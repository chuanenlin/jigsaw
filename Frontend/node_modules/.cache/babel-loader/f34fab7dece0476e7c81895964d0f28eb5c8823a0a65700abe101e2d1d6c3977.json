{"ast":null,"code":"import Blockly from 'blockly/core';\nimport { Modality } from '../../../types';\nexport class CustomCategory extends Blockly.ToolboxCategory {\n  constructor(categoryDef, toolbox, optParent) {\n    super(categoryDef, toolbox, optParent);\n  }\n\n  /**\n   * Adds the colour to the toolbox.\n   * This is called on category creation and whenever the theme changes.\n   * @override\n   */\n  addColourBorder_(colour) {\n    if (!this.rowDiv_) {\n      return;\n    }\n    this.rowDiv_.style.backgroundColor = colour;\n    this.rowDiv_.style.marginBottom = '0';\n  }\n\n  /**\n   * Sets the style for the category when it is selected or deselected.\n   * @param {boolean} isSelected True if the category has been selected,\n   *     false otherwise.\n   * @override\n   */\n  setSelected(isSelected) {\n    var _this$rowDiv_;\n    if (!this.rowDiv_) {\n      return;\n    }\n    // We do not store the label span on the category, so use getElementsByClassName.\n    const labelDom = (_this$rowDiv_ = this.rowDiv_) === null || _this$rowDiv_ === void 0 ? void 0 : _this$rowDiv_.getElementsByClassName('blocklyTreeLabel')[0];\n    if (!labelDom) {\n      return;\n    }\n    this.toggleSelectedClasses(isSelected);\n  }\n  toggleSelectedClasses(selected) {\n    if (!this.rowDiv_) {\n      return;\n    }\n    const container = this.rowDiv_.querySelector('.blocklyTreeRowContentContainer');\n    if (container) {\n      const icon = container.querySelector('div > .category-icon');\n      const label = container.querySelector('.blocklyTreeLabel');\n      if (icon && label) {\n        if (selected) {\n          icon.classList.add('selected-category-icon');\n          label.classList.add('selected-category-label');\n        } else {\n          icon.classList.remove('selected-category-icon');\n          label.classList.remove('selected-category-label');\n        }\n      }\n    }\n  }\n\n  /**\n   * Creates the dom used for the icon.\n   * @returns {HTMLElement} The element for the icon.\n   * @override\n   */\n  createIconDom_() {\n    const iconContainer = document.createElement('div');\n    const icon = document.createElement('span');\n    icon.classList.add('category-icon');\n    switch (this.name_) {\n      case Modality.Text:\n        icon.innerHTML = 'üî§';\n        break;\n      case Modality.Image:\n        icon.innerHTML = 'üñºÔ∏è';\n        break;\n      case Modality.Video:\n        icon.innerHTML = 'üé•';\n        break;\n      case Modality.Audio:\n        icon.innerHTML = 'üîä';\n        break;\n      case Modality.ThreeDimentional:\n        icon.innerHTML = 'üé®';\n        break;\n      case Modality.Sketch:\n        icon.innerHTML = 'üñåÔ∏è';\n        break;\n      case Modality.Custom:\n        icon.innerHTML = 'üîß';\n    }\n    Object.assign(iconContainer.style, {\n      display: 'flex',\n      justifyContent: 'center'\n    });\n    iconContainer.appendChild(icon);\n    return iconContainer;\n  }\n}","map":{"version":3,"names":["Blockly","Modality","CustomCategory","ToolboxCategory","constructor","categoryDef","toolbox","optParent","addColourBorder_","colour","rowDiv_","style","backgroundColor","marginBottom","setSelected","isSelected","_this$rowDiv_","labelDom","getElementsByClassName","toggleSelectedClasses","selected","container","querySelector","icon","label","classList","add","remove","createIconDom_","iconContainer","document","createElement","name_","Text","innerHTML","Image","Video","Audio","ThreeDimentional","Sketch","Custom","Object","assign","display","justifyContent","appendChild"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/src/components/blockly/custom/CustomCategory.ts"],"sourcesContent":["import Blockly, { ICollapsibleToolboxItem, IToolbox } from 'blockly/core'\nimport { CategoryInfo } from 'blockly/core/utils/toolbox'\nimport { Modality } from '../../../types'\n\nexport class CustomCategory extends Blockly.ToolboxCategory {\n  constructor(categoryDef: CategoryInfo, toolbox: IToolbox, optParent: ICollapsibleToolboxItem) {\n    super(categoryDef, toolbox, optParent)\n  }\n\n  /**\n   * Adds the colour to the toolbox.\n   * This is called on category creation and whenever the theme changes.\n   * @override\n   */\n  addColourBorder_(colour: string) {\n    if (!this.rowDiv_) {\n      return\n    }\n\n    this.rowDiv_.style.backgroundColor = colour\n    this.rowDiv_.style.marginBottom = '0'\n  }\n\n  /**\n   * Sets the style for the category when it is selected or deselected.\n   * @param {boolean} isSelected True if the category has been selected,\n   *     false otherwise.\n   * @override\n   */\n  setSelected(isSelected: boolean) {\n    if (!this.rowDiv_) {\n      return\n    }\n    // We do not store the label span on the category, so use getElementsByClassName.\n    const labelDom = this.rowDiv_?.getElementsByClassName('blocklyTreeLabel')[0] as HTMLElement\n\n    if (!labelDom) {\n      return\n    }\n    this.toggleSelectedClasses(isSelected)\n  }\n\n  toggleSelectedClasses(selected: boolean) {\n    if (!this.rowDiv_) {\n      return\n    }\n\n    const container = this.rowDiv_.querySelector('.blocklyTreeRowContentContainer')\n\n    if (container) {\n      const icon = container.querySelector('div > .category-icon') as HTMLSpanElement | null\n      const label = container.querySelector('.blocklyTreeLabel') as HTMLSpanElement | null\n\n      if (icon && label) {\n        if (selected) {\n          icon.classList.add('selected-category-icon')\n          label.classList.add('selected-category-label')\n        } else {\n          icon.classList.remove('selected-category-icon')\n          label.classList.remove('selected-category-label')\n        }\n      }\n    }\n  }\n\n  /**\n   * Creates the dom used for the icon.\n   * @returns {HTMLElement} The element for the icon.\n   * @override\n   */\n  createIconDom_() {\n    const iconContainer = document.createElement('div')\n    const icon = document.createElement('span')\n    icon.classList.add('category-icon')\n\n    switch (this.name_) {\n      case Modality.Text:\n        icon.innerHTML = 'üî§'\n        break\n      case Modality.Image:\n        icon.innerHTML = 'üñºÔ∏è'\n        break\n      case Modality.Video:\n        icon.innerHTML = 'üé•'\n        break\n      case Modality.Audio:\n        icon.innerHTML = 'üîä'\n        break\n      case Modality.ThreeDimentional:\n        icon.innerHTML = 'üé®'\n        break\n      case Modality.Sketch:\n        icon.innerHTML = 'üñåÔ∏è'\n        break\n      case Modality.Custom:\n        icon.innerHTML = 'üîß'\n    }\n\n    Object.assign(iconContainer.style, {\n      display: 'flex',\n      justifyContent: 'center',\n    })\n\n    iconContainer.appendChild(icon)\n\n    return iconContainer\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}