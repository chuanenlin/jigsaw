{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as Blockly from 'blockly/core';\n\n/** Adds additional padding to the bottom of the flyout if needed. */\nexport class ContinuousFlyoutMetrics extends Blockly.FlyoutMetricsManager {\n  /** @override */\n  constructor(workspace, flyout) {\n    super(workspace, flyout);\n  }\n  /**\n   * Adds additional padding to the bottom of the flyout if needed,\n   * in order to make it possible to scroll to the top of the last category.\n   * @override\n   */\n  getScrollMetrics() {\n    let getWorkspaceCoordinates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n    let cachedViewMetrics = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    let cachedContentMetrics = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n    const scrollMetrics = super.getScrollMetrics(getWorkspaceCoordinates, cachedViewMetrics, cachedContentMetrics);\n    const contentMetrics = cachedContentMetrics || this.getContentMetrics(getWorkspaceCoordinates);\n    const viewMetrics = cachedViewMetrics || this.getViewMetrics(getWorkspaceCoordinates);\n    if (scrollMetrics) {\n      scrollMetrics.height += this.flyout_.calculateBottomPadding(contentMetrics, viewMetrics);\n    }\n    return scrollMetrics;\n  }\n}","map":{"version":3,"names":["Blockly","ContinuousFlyoutMetrics","FlyoutMetricsManager","constructor","workspace","flyout","getScrollMetrics","getWorkspaceCoordinates","arguments","length","undefined","cachedViewMetrics","cachedContentMetrics","scrollMetrics","contentMetrics","getContentMetrics","viewMetrics","getViewMetrics","height","flyout_","calculateBottomPadding"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/src/components/blockly/continuous-toolbox/ContinuousMetricsFlyout.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as Blockly from 'blockly/core'\n\n/** Adds additional padding to the bottom of the flyout if needed. */\nexport class ContinuousFlyoutMetrics extends Blockly.FlyoutMetricsManager {\n  /** @override */\n  constructor(workspace, flyout) {\n    super(workspace, flyout)\n  }\n  /**\n   * Adds additional padding to the bottom of the flyout if needed,\n   * in order to make it possible to scroll to the top of the last category.\n   * @override\n   */\n  getScrollMetrics(\n    getWorkspaceCoordinates = undefined,\n    cachedViewMetrics = undefined,\n    cachedContentMetrics = undefined,\n  ) {\n    const scrollMetrics = super.getScrollMetrics(\n      getWorkspaceCoordinates,\n      cachedViewMetrics,\n      cachedContentMetrics,\n    )\n    const contentMetrics = cachedContentMetrics || this.getContentMetrics(getWorkspaceCoordinates)\n    const viewMetrics = cachedViewMetrics || this.getViewMetrics(getWorkspaceCoordinates)\n\n    if (scrollMetrics) {\n      scrollMetrics.height += this.flyout_.calculateBottomPadding(contentMetrics, viewMetrics)\n    }\n    return scrollMetrics\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAO,KAAKA,OAAO,MAAM,cAAc;;AAEvC;AACA,OAAO,MAAMC,uBAAuB,SAASD,OAAO,CAACE,oBAAoB,CAAC;EACxE;EACAC,WAAWA,CAACC,SAAS,EAAEC,MAAM,EAAE;IAC7B,KAAK,CAACD,SAAS,EAAEC,MAAM,CAAC;EAC1B;EACA;AACF;AACA;AACA;AACA;EACEC,gBAAgBA,CAAA,EAId;IAAA,IAHAC,uBAAuB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGE,SAAS;IAAA,IACnCC,iBAAiB,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGE,SAAS;IAAA,IAC7BE,oBAAoB,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGE,SAAS;IAEhC,MAAMG,aAAa,GAAG,KAAK,CAACP,gBAAgB,CAC1CC,uBAAuB,EACvBI,iBAAiB,EACjBC,oBACF,CAAC;IACD,MAAME,cAAc,GAAGF,oBAAoB,IAAI,IAAI,CAACG,iBAAiB,CAACR,uBAAuB,CAAC;IAC9F,MAAMS,WAAW,GAAGL,iBAAiB,IAAI,IAAI,CAACM,cAAc,CAACV,uBAAuB,CAAC;IAErF,IAAIM,aAAa,EAAE;MACjBA,aAAa,CAACK,MAAM,IAAI,IAAI,CAACC,OAAO,CAACC,sBAAsB,CAACN,cAAc,EAAEE,WAAW,CAAC;IAC1F;IACA,OAAOH,aAAa;EACtB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}