{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst codegen_1 = require(\"./codegen\");\nconst names = {\n  // validation function arguments\n  data: new codegen_1.Name(\"data\"),\n  // args passed from referencing schema\n  valCxt: new codegen_1.Name(\"valCxt\"),\n  instancePath: new codegen_1.Name(\"instancePath\"),\n  parentData: new codegen_1.Name(\"parentData\"),\n  parentDataProperty: new codegen_1.Name(\"parentDataProperty\"),\n  rootData: new codegen_1.Name(\"rootData\"),\n  dynamicAnchors: new codegen_1.Name(\"dynamicAnchors\"),\n  // function scoped variables\n  vErrors: new codegen_1.Name(\"vErrors\"),\n  errors: new codegen_1.Name(\"errors\"),\n  this: new codegen_1.Name(\"this\"),\n  // \"globals\"\n  self: new codegen_1.Name(\"self\"),\n  scope: new codegen_1.Name(\"scope\"),\n  // JTD serialize/parse name for JSON string and position\n  json: new codegen_1.Name(\"json\"),\n  jsonPos: new codegen_1.Name(\"jsonPos\"),\n  jsonLen: new codegen_1.Name(\"jsonLen\"),\n  jsonPart: new codegen_1.Name(\"jsonPart\")\n};\nexports.default = names;","map":{"version":3,"names":["codegen_1","require","names","data","Name","valCxt","instancePath","parentData","parentDataProperty","rootData","dynamicAnchors","vErrors","errors","this","self","scope","json","jsonPos","jsonLen","jsonPart","exports","default"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/ajv/lib/compile/names.ts"],"sourcesContent":["import {Name} from \"./codegen\"\n\nconst names = {\n  // validation function arguments\n  data: new Name(\"data\"), // data passed to validation function\n  // args passed from referencing schema\n  valCxt: new Name(\"valCxt\"), // validation/data context - should not be used directly, it is destructured to the names below\n  instancePath: new Name(\"instancePath\"),\n  parentData: new Name(\"parentData\"),\n  parentDataProperty: new Name(\"parentDataProperty\"),\n  rootData: new Name(\"rootData\"), // root data - same as the data passed to the first/top validation function\n  dynamicAnchors: new Name(\"dynamicAnchors\"), // used to support recursiveRef and dynamicRef\n  // function scoped variables\n  vErrors: new Name(\"vErrors\"), // null or array of validation errors\n  errors: new Name(\"errors\"), // counter of validation errors\n  this: new Name(\"this\"),\n  // \"globals\"\n  self: new Name(\"self\"),\n  scope: new Name(\"scope\"),\n  // JTD serialize/parse name for JSON string and position\n  json: new Name(\"json\"),\n  jsonPos: new Name(\"jsonPos\"),\n  jsonLen: new Name(\"jsonLen\"),\n  jsonPart: new Name(\"jsonPart\"),\n}\n\nexport default names\n"],"mappings":";;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AAEA,MAAMC,KAAK,GAAG;EACZ;EACAC,IAAI,EAAE,IAAIH,SAAA,CAAAI,IAAI,CAAC,MAAM,CAAC;EACtB;EACAC,MAAM,EAAE,IAAIL,SAAA,CAAAI,IAAI,CAAC,QAAQ,CAAC;EAC1BE,YAAY,EAAE,IAAIN,SAAA,CAAAI,IAAI,CAAC,cAAc,CAAC;EACtCG,UAAU,EAAE,IAAIP,SAAA,CAAAI,IAAI,CAAC,YAAY,CAAC;EAClCI,kBAAkB,EAAE,IAAIR,SAAA,CAAAI,IAAI,CAAC,oBAAoB,CAAC;EAClDK,QAAQ,EAAE,IAAIT,SAAA,CAAAI,IAAI,CAAC,UAAU,CAAC;EAC9BM,cAAc,EAAE,IAAIV,SAAA,CAAAI,IAAI,CAAC,gBAAgB,CAAC;EAC1C;EACAO,OAAO,EAAE,IAAIX,SAAA,CAAAI,IAAI,CAAC,SAAS,CAAC;EAC5BQ,MAAM,EAAE,IAAIZ,SAAA,CAAAI,IAAI,CAAC,QAAQ,CAAC;EAC1BS,IAAI,EAAE,IAAIb,SAAA,CAAAI,IAAI,CAAC,MAAM,CAAC;EACtB;EACAU,IAAI,EAAE,IAAId,SAAA,CAAAI,IAAI,CAAC,MAAM,CAAC;EACtBW,KAAK,EAAE,IAAIf,SAAA,CAAAI,IAAI,CAAC,OAAO,CAAC;EACxB;EACAY,IAAI,EAAE,IAAIhB,SAAA,CAAAI,IAAI,CAAC,MAAM,CAAC;EACtBa,OAAO,EAAE,IAAIjB,SAAA,CAAAI,IAAI,CAAC,SAAS,CAAC;EAC5Bc,OAAO,EAAE,IAAIlB,SAAA,CAAAI,IAAI,CAAC,SAAS,CAAC;EAC5Be,QAAQ,EAAE,IAAInB,SAAA,CAAAI,IAAI,CAAC,UAAU;CAC9B;AAEDgB,OAAA,CAAAC,OAAA,GAAenB,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}