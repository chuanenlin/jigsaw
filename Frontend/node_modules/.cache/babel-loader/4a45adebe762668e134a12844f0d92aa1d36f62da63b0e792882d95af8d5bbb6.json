{"ast":null,"code":"import invariant from 'invariant';\nexport class Bridge {\n  // Each bridge can have a different set of parameters.\n  constructor() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    invariant(this.constructor !== Bridge, 'Bridge cannot be instantiated (args=%o).', {\n      args\n    });\n  }\n  /**\n   * Get an error for field `name` out of `error`. There is no standarized\n   * format, but fields treat truthy values as a sign of being invalid. Fields\n   * receive this as a `error` guaranteed prop.\n   */\n  getError(name, error) {\n    return invariant(false, '%s have not implemented `getError` method (args=%o).', this.constructor.name, {\n      name,\n      error\n    });\n  }\n  /**\n   * Get an error message for field `name` out of `error`. If there is no error,\n   * return an empty string. Fields receive this as a `errorMessage` guaranteed\n   * prop.\n   */\n  getErrorMessage(name, error) {\n    return invariant(false, '%s have not implemented `getErrorMessage` method (args=%o).', this.constructor.name, {\n      name,\n      error\n    });\n  }\n  /**\n   * Get all error messages from `error`. Only `ErrorsField` make use of that\n   * (in builtin themes).\n   */\n  getErrorMessages(error) {\n    return invariant(false, '%s have not implemented `getErrorMessages` method (args=%o).', this.constructor.name, {\n      error\n    });\n  }\n  /**\n   * Get internal field definition for field `name`. Fields receive this as a\n   * `field` guaranteed prop. There is no standarized field format. Most bridges\n   * use it as a common object, used in calculation of initial values, props,\n   * and types.\n   */\n  getField(name) {\n    return invariant(false, '%s have not implemented `getField` method (args=%o).', this.constructor.name, {\n      name\n    });\n  }\n  /**\n   * Get initial value of field `name`. It is used as a default when no value is\n   * set (e.g. the form is rendered with an empty `model`). Additionally,\n   * `props` are this field instance props. If a field is rendered multiple\n   * times, this function will be called multiple times, possibly with different\n   * `props`.\n   */\n  getInitialValue(name) {\n    return invariant(false, '%s have not implemented `getInitialValue` method (args=%o).', this.constructor.name, {\n      name\n    });\n  }\n  /**\n   * Get props defined in schema for a field `name`. There are no required nor\n   * banned fields, however properties like `required` are often available.\n   */\n  getProps(name) {\n    return invariant(false, '%s have not implemented `getProps` method (args=%o).', this.constructor.name, {\n      name\n    });\n  }\n  /**\n   * Get a list of subfields of field `name` or top-level fields, if no `name`\n   * is passed.\n   */\n  getSubfields(name) {\n    return invariant(false, '%s have not implemented `getSubfields` method (args=%o).', this.constructor.name, {\n      name\n    });\n  }\n  /**\n   * There is no standarized field type format. However, `AutoField` component\n   * will work correctly only with standard JavaScript constructors, like\n   * `String` or `Number`.\n   */\n  getType(name) {\n    return invariant(false, '%s have not implemented `getType` method (args=%o).', this.constructor.name, {\n      name\n    });\n  }\n  /**\n   * Get a validator function. The `options` here are from the `validator` prop\n   * of the form. A validator function receives a model and returns an error or\n   * a promise that will resolve (not reject!) with an error. If there is no\n   * error, return (or resolve with) a `null` value instead.\n   */\n  getValidator(options) {\n    return invariant(false, '%s have not implemented `getValidator` method (args=%o).', this.constructor.name, {\n      options\n    });\n  }\n}","map":{"version":3,"names":["invariant","Bridge","constructor","_len","arguments","length","args","Array","_key","getError","name","error","getErrorMessage","getErrorMessages","getField","getInitialValue","getProps","getSubfields","getType","getValidator","options"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/uniforms/esm/Bridge.js"],"sourcesContent":["import invariant from 'invariant';\nexport class Bridge {\n    // Each bridge can have a different set of parameters.\n    constructor(...args) {\n        invariant(this.constructor !== Bridge, 'Bridge cannot be instantiated (args=%o).', { args });\n    }\n    /**\n     * Get an error for field `name` out of `error`. There is no standarized\n     * format, but fields treat truthy values as a sign of being invalid. Fields\n     * receive this as a `error` guaranteed prop.\n     */\n    getError(name, error) {\n        return invariant(false, '%s have not implemented `getError` method (args=%o).', this.constructor.name, { name, error });\n    }\n    /**\n     * Get an error message for field `name` out of `error`. If there is no error,\n     * return an empty string. Fields receive this as a `errorMessage` guaranteed\n     * prop.\n     */\n    getErrorMessage(name, error) {\n        return invariant(false, '%s have not implemented `getErrorMessage` method (args=%o).', this.constructor.name, { name, error });\n    }\n    /**\n     * Get all error messages from `error`. Only `ErrorsField` make use of that\n     * (in builtin themes).\n     */\n    getErrorMessages(error) {\n        return invariant(false, '%s have not implemented `getErrorMessages` method (args=%o).', this.constructor.name, { error });\n    }\n    /**\n     * Get internal field definition for field `name`. Fields receive this as a\n     * `field` guaranteed prop. There is no standarized field format. Most bridges\n     * use it as a common object, used in calculation of initial values, props,\n     * and types.\n     */\n    getField(name) {\n        return invariant(false, '%s have not implemented `getField` method (args=%o).', this.constructor.name, { name });\n    }\n    /**\n     * Get initial value of field `name`. It is used as a default when no value is\n     * set (e.g. the form is rendered with an empty `model`). Additionally,\n     * `props` are this field instance props. If a field is rendered multiple\n     * times, this function will be called multiple times, possibly with different\n     * `props`.\n     */\n    getInitialValue(name) {\n        return invariant(false, '%s have not implemented `getInitialValue` method (args=%o).', this.constructor.name, { name });\n    }\n    /**\n     * Get props defined in schema for a field `name`. There are no required nor\n     * banned fields, however properties like `required` are often available.\n     */\n    getProps(name) {\n        return invariant(false, '%s have not implemented `getProps` method (args=%o).', this.constructor.name, { name });\n    }\n    /**\n     * Get a list of subfields of field `name` or top-level fields, if no `name`\n     * is passed.\n     */\n    getSubfields(name) {\n        return invariant(false, '%s have not implemented `getSubfields` method (args=%o).', this.constructor.name, { name });\n    }\n    /**\n     * There is no standarized field type format. However, `AutoField` component\n     * will work correctly only with standard JavaScript constructors, like\n     * `String` or `Number`.\n     */\n    getType(name) {\n        return invariant(false, '%s have not implemented `getType` method (args=%o).', this.constructor.name, { name });\n    }\n    /**\n     * Get a validator function. The `options` here are from the `validator` prop\n     * of the form. A validator function receives a model and returns an error or\n     * a promise that will resolve (not reject!) with an error. If there is no\n     * error, return (or resolve with) a `null` value instead.\n     */\n    getValidator(options) {\n        return invariant(false, '%s have not implemented `getValidator` method (args=%o).', this.constructor.name, { options });\n    }\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,WAAW;AACjC,OAAO,MAAMC,MAAM,CAAC;EAChB;EACAC,WAAWA,CAAA,EAAU;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAANC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IACfR,SAAS,CAAC,IAAI,CAACE,WAAW,KAAKD,MAAM,EAAE,0CAA0C,EAAE;MAAEK;IAAK,CAAC,CAAC;EAChG;EACA;AACJ;AACA;AACA;AACA;EACIG,QAAQA,CAACC,IAAI,EAAEC,KAAK,EAAE;IAClB,OAAOX,SAAS,CAAC,KAAK,EAAE,sDAAsD,EAAE,IAAI,CAACE,WAAW,CAACQ,IAAI,EAAE;MAAEA,IAAI;MAAEC;IAAM,CAAC,CAAC;EAC3H;EACA;AACJ;AACA;AACA;AACA;EACIC,eAAeA,CAACF,IAAI,EAAEC,KAAK,EAAE;IACzB,OAAOX,SAAS,CAAC,KAAK,EAAE,6DAA6D,EAAE,IAAI,CAACE,WAAW,CAACQ,IAAI,EAAE;MAAEA,IAAI;MAAEC;IAAM,CAAC,CAAC;EAClI;EACA;AACJ;AACA;AACA;EACIE,gBAAgBA,CAACF,KAAK,EAAE;IACpB,OAAOX,SAAS,CAAC,KAAK,EAAE,8DAA8D,EAAE,IAAI,CAACE,WAAW,CAACQ,IAAI,EAAE;MAAEC;IAAM,CAAC,CAAC;EAC7H;EACA;AACJ;AACA;AACA;AACA;AACA;EACIG,QAAQA,CAACJ,IAAI,EAAE;IACX,OAAOV,SAAS,CAAC,KAAK,EAAE,sDAAsD,EAAE,IAAI,CAACE,WAAW,CAACQ,IAAI,EAAE;MAAEA;IAAK,CAAC,CAAC;EACpH;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIK,eAAeA,CAACL,IAAI,EAAE;IAClB,OAAOV,SAAS,CAAC,KAAK,EAAE,6DAA6D,EAAE,IAAI,CAACE,WAAW,CAACQ,IAAI,EAAE;MAAEA;IAAK,CAAC,CAAC;EAC3H;EACA;AACJ;AACA;AACA;EACIM,QAAQA,CAACN,IAAI,EAAE;IACX,OAAOV,SAAS,CAAC,KAAK,EAAE,sDAAsD,EAAE,IAAI,CAACE,WAAW,CAACQ,IAAI,EAAE;MAAEA;IAAK,CAAC,CAAC;EACpH;EACA;AACJ;AACA;AACA;EACIO,YAAYA,CAACP,IAAI,EAAE;IACf,OAAOV,SAAS,CAAC,KAAK,EAAE,0DAA0D,EAAE,IAAI,CAACE,WAAW,CAACQ,IAAI,EAAE;MAAEA;IAAK,CAAC,CAAC;EACxH;EACA;AACJ;AACA;AACA;AACA;EACIQ,OAAOA,CAACR,IAAI,EAAE;IACV,OAAOV,SAAS,CAAC,KAAK,EAAE,qDAAqD,EAAE,IAAI,CAACE,WAAW,CAACQ,IAAI,EAAE;MAAEA;IAAK,CAAC,CAAC;EACnH;EACA;AACJ;AACA;AACA;AACA;AACA;EACIS,YAAYA,CAACC,OAAO,EAAE;IAClB,OAAOpB,SAAS,CAAC,KAAK,EAAE,0DAA0D,EAAE,IAAI,CAACE,WAAW,CAACQ,IAAI,EAAE;MAAEU;IAAQ,CAAC,CAAC;EAC3H;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}