{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getData = exports.KeywordCxt = exports.validateFunctionCode = void 0;\nconst boolSchema_1 = require(\"./boolSchema\");\nconst dataType_1 = require(\"./dataType\");\nconst applicability_1 = require(\"./applicability\");\nconst dataType_2 = require(\"./dataType\");\nconst defaults_1 = require(\"./defaults\");\nconst keyword_1 = require(\"./keyword\");\nconst subschema_1 = require(\"./subschema\");\nconst codegen_1 = require(\"../codegen\");\nconst names_1 = require(\"../names\");\nconst resolve_1 = require(\"../resolve\");\nconst util_1 = require(\"../util\");\nconst errors_1 = require(\"../errors\");\n// schema compilation - generates validation function, subschemaCode (below) is used for subschemas\nfunction validateFunctionCode(it) {\n  if (isSchemaObj(it)) {\n    checkKeywords(it);\n    if (schemaCxtHasRules(it)) {\n      topSchemaObjCode(it);\n      return;\n    }\n  }\n  validateFunction(it, () => (0, boolSchema_1.topBoolOrEmptySchema)(it));\n}\nexports.validateFunctionCode = validateFunctionCode;\nfunction validateFunction(_ref, body) {\n  let {\n    gen,\n    validateName,\n    schema,\n    schemaEnv,\n    opts\n  } = _ref;\n  if (opts.code.es5) {\n    gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${names_1.default.valCxt}`, schemaEnv.$async, () => {\n      gen.code((0, codegen_1._)`\"use strict\"; ${funcSourceUrl(schema, opts)}`);\n      destructureValCxtES5(gen, opts);\n      gen.code(body);\n    });\n  } else {\n    gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, () => gen.code(funcSourceUrl(schema, opts)).code(body));\n  }\n}\nfunction destructureValCxt(opts) {\n  return (0, codegen_1._)`{${names_1.default.instancePath}=\"\", ${names_1.default.parentData}, ${names_1.default.parentDataProperty}, ${names_1.default.rootData}=${names_1.default.data}${opts.dynamicRef ? (0, codegen_1._)`, ${names_1.default.dynamicAnchors}={}` : codegen_1.nil}}={}`;\n}\nfunction destructureValCxtES5(gen, opts) {\n  gen.if(names_1.default.valCxt, () => {\n    gen.var(names_1.default.instancePath, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.instancePath}`);\n    gen.var(names_1.default.parentData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentData}`);\n    gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentDataProperty}`);\n    gen.var(names_1.default.rootData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.rootData}`);\n    if (opts.dynamicRef) gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.dynamicAnchors}`);\n  }, () => {\n    gen.var(names_1.default.instancePath, (0, codegen_1._)`\"\"`);\n    gen.var(names_1.default.parentData, (0, codegen_1._)`undefined`);\n    gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`undefined`);\n    gen.var(names_1.default.rootData, names_1.default.data);\n    if (opts.dynamicRef) gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`{}`);\n  });\n}\nfunction topSchemaObjCode(it) {\n  const {\n    schema,\n    opts,\n    gen\n  } = it;\n  validateFunction(it, () => {\n    if (opts.$comment && schema.$comment) commentKeyword(it);\n    checkNoDefault(it);\n    gen.let(names_1.default.vErrors, null);\n    gen.let(names_1.default.errors, 0);\n    if (opts.unevaluated) resetEvaluated(it);\n    typeAndKeywords(it);\n    returnResults(it);\n  });\n  return;\n}\nfunction resetEvaluated(it) {\n  // TODO maybe some hook to execute it in the end to check whether props/items are Name, as in assignEvaluated\n  const {\n    gen,\n    validateName\n  } = it;\n  it.evaluated = gen.const(\"evaluated\", (0, codegen_1._)`${validateName}.evaluated`);\n  gen.if((0, codegen_1._)`${it.evaluated}.dynamicProps`, () => gen.assign((0, codegen_1._)`${it.evaluated}.props`, (0, codegen_1._)`undefined`));\n  gen.if((0, codegen_1._)`${it.evaluated}.dynamicItems`, () => gen.assign((0, codegen_1._)`${it.evaluated}.items`, (0, codegen_1._)`undefined`));\n}\nfunction funcSourceUrl(schema, opts) {\n  const schId = typeof schema == \"object\" && schema[opts.schemaId];\n  return schId && (opts.code.source || opts.code.process) ? (0, codegen_1._)`/*# sourceURL=${schId} */` : codegen_1.nil;\n}\n// schema compilation - this function is used recursively to generate code for sub-schemas\nfunction subschemaCode(it, valid) {\n  if (isSchemaObj(it)) {\n    checkKeywords(it);\n    if (schemaCxtHasRules(it)) {\n      subSchemaObjCode(it, valid);\n      return;\n    }\n  }\n  (0, boolSchema_1.boolOrEmptySchema)(it, valid);\n}\nfunction schemaCxtHasRules(_ref2) {\n  let {\n    schema,\n    self\n  } = _ref2;\n  if (typeof schema == \"boolean\") return !schema;\n  for (const key in schema) if (self.RULES.all[key]) return true;\n  return false;\n}\nfunction isSchemaObj(it) {\n  return typeof it.schema != \"boolean\";\n}\nfunction subSchemaObjCode(it, valid) {\n  const {\n    schema,\n    gen,\n    opts\n  } = it;\n  if (opts.$comment && schema.$comment) commentKeyword(it);\n  updateContext(it);\n  checkAsyncSchema(it);\n  const errsCount = gen.const(\"_errs\", names_1.default.errors);\n  typeAndKeywords(it, errsCount);\n  // TODO var\n  gen.var(valid, (0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);\n}\nfunction checkKeywords(it) {\n  (0, util_1.checkUnknownRules)(it);\n  checkRefsAndKeywords(it);\n}\nfunction typeAndKeywords(it, errsCount) {\n  if (it.opts.jtd) return schemaKeywords(it, [], false, errsCount);\n  const types = (0, dataType_1.getSchemaTypes)(it.schema);\n  const checkedTypes = (0, dataType_1.coerceAndCheckDataType)(it, types);\n  schemaKeywords(it, types, !checkedTypes, errsCount);\n}\nfunction checkRefsAndKeywords(it) {\n  const {\n    schema,\n    errSchemaPath,\n    opts,\n    self\n  } = it;\n  if (schema.$ref && opts.ignoreKeywordsWithRef && (0, util_1.schemaHasRulesButRef)(schema, self.RULES)) {\n    self.logger.warn(`$ref: keywords ignored in schema at path \"${errSchemaPath}\"`);\n  }\n}\nfunction checkNoDefault(it) {\n  const {\n    schema,\n    opts\n  } = it;\n  if (schema.default !== undefined && opts.useDefaults && opts.strictSchema) {\n    (0, util_1.checkStrictMode)(it, \"default is ignored in the schema root\");\n  }\n}\nfunction updateContext(it) {\n  const schId = it.schema[it.opts.schemaId];\n  if (schId) it.baseId = (0, resolve_1.resolveUrl)(it.opts.uriResolver, it.baseId, schId);\n}\nfunction checkAsyncSchema(it) {\n  if (it.schema.$async && !it.schemaEnv.$async) throw new Error(\"async schema in sync schema\");\n}\nfunction commentKeyword(_ref3) {\n  let {\n    gen,\n    schemaEnv,\n    schema,\n    errSchemaPath,\n    opts\n  } = _ref3;\n  const msg = schema.$comment;\n  if (opts.$comment === true) {\n    gen.code((0, codegen_1._)`${names_1.default.self}.logger.log(${msg})`);\n  } else if (typeof opts.$comment == \"function\") {\n    const schemaPath = (0, codegen_1.str)`${errSchemaPath}/$comment`;\n    const rootName = gen.scopeValue(\"root\", {\n      ref: schemaEnv.root\n    });\n    gen.code((0, codegen_1._)`${names_1.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`);\n  }\n}\nfunction returnResults(it) {\n  const {\n    gen,\n    schemaEnv,\n    validateName,\n    ValidationError,\n    opts\n  } = it;\n  if (schemaEnv.$async) {\n    // TODO assign unevaluated\n    gen.if((0, codegen_1._)`${names_1.default.errors} === 0`, () => gen.return(names_1.default.data), () => gen.throw((0, codegen_1._)`new ${ValidationError}(${names_1.default.vErrors})`));\n  } else {\n    gen.assign((0, codegen_1._)`${validateName}.errors`, names_1.default.vErrors);\n    if (opts.unevaluated) assignEvaluated(it);\n    gen.return((0, codegen_1._)`${names_1.default.errors} === 0`);\n  }\n}\nfunction assignEvaluated(_ref4) {\n  let {\n    gen,\n    evaluated,\n    props,\n    items\n  } = _ref4;\n  if (props instanceof codegen_1.Name) gen.assign((0, codegen_1._)`${evaluated}.props`, props);\n  if (items instanceof codegen_1.Name) gen.assign((0, codegen_1._)`${evaluated}.items`, items);\n}\nfunction schemaKeywords(it, types, typeErrors, errsCount) {\n  const {\n    gen,\n    schema,\n    data,\n    allErrors,\n    opts,\n    self\n  } = it;\n  const {\n    RULES\n  } = self;\n  if (schema.$ref && (opts.ignoreKeywordsWithRef || !(0, util_1.schemaHasRulesButRef)(schema, RULES))) {\n    gen.block(() => keywordCode(it, \"$ref\", RULES.all.$ref.definition)); // TODO typecast\n    return;\n  }\n  if (!opts.jtd) checkStrictTypes(it, types);\n  gen.block(() => {\n    for (const group of RULES.rules) groupKeywords(group);\n    groupKeywords(RULES.post);\n  });\n  function groupKeywords(group) {\n    if (!(0, applicability_1.shouldUseGroup)(schema, group)) return;\n    if (group.type) {\n      gen.if((0, dataType_2.checkDataType)(group.type, data, opts.strictNumbers));\n      iterateKeywords(it, group);\n      if (types.length === 1 && types[0] === group.type && typeErrors) {\n        gen.else();\n        (0, dataType_2.reportTypeError)(it);\n      }\n      gen.endIf();\n    } else {\n      iterateKeywords(it, group);\n    }\n    // TODO make it \"ok\" call?\n    if (!allErrors) gen.if((0, codegen_1._)`${names_1.default.errors} === ${errsCount || 0}`);\n  }\n}\nfunction iterateKeywords(it, group) {\n  const {\n    gen,\n    schema,\n    opts: {\n      useDefaults\n    }\n  } = it;\n  if (useDefaults) (0, defaults_1.assignDefaults)(it, group.type);\n  gen.block(() => {\n    for (const rule of group.rules) {\n      if ((0, applicability_1.shouldUseRule)(schema, rule)) {\n        keywordCode(it, rule.keyword, rule.definition, group.type);\n      }\n    }\n  });\n}\nfunction checkStrictTypes(it, types) {\n  if (it.schemaEnv.meta || !it.opts.strictTypes) return;\n  checkContextTypes(it, types);\n  if (!it.opts.allowUnionTypes) checkMultipleTypes(it, types);\n  checkKeywordTypes(it, it.dataTypes);\n}\nfunction checkContextTypes(it, types) {\n  if (!types.length) return;\n  if (!it.dataTypes.length) {\n    it.dataTypes = types;\n    return;\n  }\n  types.forEach(t => {\n    if (!includesType(it.dataTypes, t)) {\n      strictTypesError(it, `type \"${t}\" not allowed by context \"${it.dataTypes.join(\",\")}\"`);\n    }\n  });\n  narrowSchemaTypes(it, types);\n}\nfunction checkMultipleTypes(it, ts) {\n  if (ts.length > 1 && !(ts.length === 2 && ts.includes(\"null\"))) {\n    strictTypesError(it, \"use allowUnionTypes to allow union type keyword\");\n  }\n}\nfunction checkKeywordTypes(it, ts) {\n  const rules = it.self.RULES.all;\n  for (const keyword in rules) {\n    const rule = rules[keyword];\n    if (typeof rule == \"object\" && (0, applicability_1.shouldUseRule)(it.schema, rule)) {\n      const {\n        type\n      } = rule.definition;\n      if (type.length && !type.some(t => hasApplicableType(ts, t))) {\n        strictTypesError(it, `missing type \"${type.join(\",\")}\" for keyword \"${keyword}\"`);\n      }\n    }\n  }\n}\nfunction hasApplicableType(schTs, kwdT) {\n  return schTs.includes(kwdT) || kwdT === \"number\" && schTs.includes(\"integer\");\n}\nfunction includesType(ts, t) {\n  return ts.includes(t) || t === \"integer\" && ts.includes(\"number\");\n}\nfunction narrowSchemaTypes(it, withTypes) {\n  const ts = [];\n  for (const t of it.dataTypes) {\n    if (includesType(withTypes, t)) ts.push(t);else if (withTypes.includes(\"integer\") && t === \"number\") ts.push(\"integer\");\n  }\n  it.dataTypes = ts;\n}\nfunction strictTypesError(it, msg) {\n  const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;\n  msg += ` at \"${schemaPath}\" (strictTypes)`;\n  (0, util_1.checkStrictMode)(it, msg, it.opts.strictTypes);\n}\nclass KeywordCxt {\n  constructor(it, def, keyword) {\n    (0, keyword_1.validateKeywordUsage)(it, def, keyword);\n    this.gen = it.gen;\n    this.allErrors = it.allErrors;\n    this.keyword = keyword;\n    this.data = it.data;\n    this.schema = it.schema[keyword];\n    this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;\n    this.schemaValue = (0, util_1.schemaRefOrVal)(it, this.schema, keyword, this.$data);\n    this.schemaType = def.schemaType;\n    this.parentSchema = it.schema;\n    this.params = {};\n    this.it = it;\n    this.def = def;\n    if (this.$data) {\n      this.schemaCode = it.gen.const(\"vSchema\", getData(this.$data, it));\n    } else {\n      this.schemaCode = this.schemaValue;\n      if (!(0, keyword_1.validSchemaType)(this.schema, def.schemaType, def.allowUndefined)) {\n        throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);\n      }\n    }\n    if (\"code\" in def ? def.trackErrors : def.errors !== false) {\n      this.errsCount = it.gen.const(\"_errs\", names_1.default.errors);\n    }\n  }\n  result(condition, successAction, failAction) {\n    this.failResult((0, codegen_1.not)(condition), successAction, failAction);\n  }\n  failResult(condition, successAction, failAction) {\n    this.gen.if(condition);\n    if (failAction) failAction();else this.error();\n    if (successAction) {\n      this.gen.else();\n      successAction();\n      if (this.allErrors) this.gen.endIf();\n    } else {\n      if (this.allErrors) this.gen.endIf();else this.gen.else();\n    }\n  }\n  pass(condition, failAction) {\n    this.failResult((0, codegen_1.not)(condition), undefined, failAction);\n  }\n  fail(condition) {\n    if (condition === undefined) {\n      this.error();\n      if (!this.allErrors) this.gen.if(false); // this branch will be removed by gen.optimize\n      return;\n    }\n    this.gen.if(condition);\n    this.error();\n    if (this.allErrors) this.gen.endIf();else this.gen.else();\n  }\n  fail$data(condition) {\n    if (!this.$data) return this.fail(condition);\n    const {\n      schemaCode\n    } = this;\n    this.fail((0, codegen_1._)`${schemaCode} !== undefined && (${(0, codegen_1.or)(this.invalid$data(), condition)})`);\n  }\n  error(append, errorParams, errorPaths) {\n    if (errorParams) {\n      this.setParams(errorParams);\n      this._error(append, errorPaths);\n      this.setParams({});\n      return;\n    }\n    this._error(append, errorPaths);\n  }\n  _error(append, errorPaths) {\n    ;\n    (append ? errors_1.reportExtraError : errors_1.reportError)(this, this.def.error, errorPaths);\n  }\n  $dataError() {\n    (0, errors_1.reportError)(this, this.def.$dataError || errors_1.keyword$DataError);\n  }\n  reset() {\n    if (this.errsCount === undefined) throw new Error('add \"trackErrors\" to keyword definition');\n    (0, errors_1.resetErrorsCount)(this.gen, this.errsCount);\n  }\n  ok(cond) {\n    if (!this.allErrors) this.gen.if(cond);\n  }\n  setParams(obj, assign) {\n    if (assign) Object.assign(this.params, obj);else this.params = obj;\n  }\n  block$data(valid, codeBlock) {\n    let $dataValid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : codegen_1.nil;\n    this.gen.block(() => {\n      this.check$data(valid, $dataValid);\n      codeBlock();\n    });\n  }\n  check$data() {\n    let valid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : codegen_1.nil;\n    let $dataValid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : codegen_1.nil;\n    if (!this.$data) return;\n    const {\n      gen,\n      schemaCode,\n      schemaType,\n      def\n    } = this;\n    gen.if((0, codegen_1.or)((0, codegen_1._)`${schemaCode} === undefined`, $dataValid));\n    if (valid !== codegen_1.nil) gen.assign(valid, true);\n    if (schemaType.length || def.validateSchema) {\n      gen.elseIf(this.invalid$data());\n      this.$dataError();\n      if (valid !== codegen_1.nil) gen.assign(valid, false);\n    }\n    gen.else();\n  }\n  invalid$data() {\n    const {\n      gen,\n      schemaCode,\n      schemaType,\n      def,\n      it\n    } = this;\n    return (0, codegen_1.or)(wrong$DataType(), invalid$DataSchema());\n    function wrong$DataType() {\n      if (schemaType.length) {\n        /* istanbul ignore if */\n        if (!(schemaCode instanceof codegen_1.Name)) throw new Error(\"ajv implementation error\");\n        const st = Array.isArray(schemaType) ? schemaType : [schemaType];\n        return (0, codegen_1._)`${(0, dataType_2.checkDataTypes)(st, schemaCode, it.opts.strictNumbers, dataType_2.DataType.Wrong)}`;\n      }\n      return codegen_1.nil;\n    }\n    function invalid$DataSchema() {\n      if (def.validateSchema) {\n        const validateSchemaRef = gen.scopeValue(\"validate$data\", {\n          ref: def.validateSchema\n        }); // TODO value.code for standalone\n        return (0, codegen_1._)`!${validateSchemaRef}(${schemaCode})`;\n      }\n      return codegen_1.nil;\n    }\n  }\n  subschema(appl, valid) {\n    const subschema = (0, subschema_1.getSubschema)(this.it, appl);\n    (0, subschema_1.extendSubschemaData)(subschema, this.it, appl);\n    (0, subschema_1.extendSubschemaMode)(subschema, appl);\n    const nextContext = {\n      ...this.it,\n      ...subschema,\n      items: undefined,\n      props: undefined\n    };\n    subschemaCode(nextContext, valid);\n    return nextContext;\n  }\n  mergeEvaluated(schemaCxt, toName) {\n    const {\n      it,\n      gen\n    } = this;\n    if (!it.opts.unevaluated) return;\n    if (it.props !== true && schemaCxt.props !== undefined) {\n      it.props = util_1.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);\n    }\n    if (it.items !== true && schemaCxt.items !== undefined) {\n      it.items = util_1.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);\n    }\n  }\n  mergeValidEvaluated(schemaCxt, valid) {\n    const {\n      it,\n      gen\n    } = this;\n    if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {\n      gen.if(valid, () => this.mergeEvaluated(schemaCxt, codegen_1.Name));\n      return true;\n    }\n  }\n}\nexports.KeywordCxt = KeywordCxt;\nfunction keywordCode(it, keyword, def, ruleType) {\n  const cxt = new KeywordCxt(it, def, keyword);\n  if (\"code\" in def) {\n    def.code(cxt, ruleType);\n  } else if (cxt.$data && def.validate) {\n    (0, keyword_1.funcKeywordCode)(cxt, def);\n  } else if (\"macro\" in def) {\n    (0, keyword_1.macroKeywordCode)(cxt, def);\n  } else if (def.compile || def.validate) {\n    (0, keyword_1.funcKeywordCode)(cxt, def);\n  }\n}\nconst JSON_POINTER = /^\\/(?:[^~]|~0|~1)*$/;\nconst RELATIVE_JSON_POINTER = /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/;\nfunction getData($data, _ref5) {\n  let {\n    dataLevel,\n    dataNames,\n    dataPathArr\n  } = _ref5;\n  let jsonPointer;\n  let data;\n  if ($data === \"\") return names_1.default.rootData;\n  if ($data[0] === \"/\") {\n    if (!JSON_POINTER.test($data)) throw new Error(`Invalid JSON-pointer: ${$data}`);\n    jsonPointer = $data;\n    data = names_1.default.rootData;\n  } else {\n    const matches = RELATIVE_JSON_POINTER.exec($data);\n    if (!matches) throw new Error(`Invalid JSON-pointer: ${$data}`);\n    const up = +matches[1];\n    jsonPointer = matches[2];\n    if (jsonPointer === \"#\") {\n      if (up >= dataLevel) throw new Error(errorMsg(\"property/index\", up));\n      return dataPathArr[dataLevel - up];\n    }\n    if (up > dataLevel) throw new Error(errorMsg(\"data\", up));\n    data = dataNames[dataLevel - up];\n    if (!jsonPointer) return data;\n  }\n  let expr = data;\n  const segments = jsonPointer.split(\"/\");\n  for (const segment of segments) {\n    if (segment) {\n      data = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)((0, util_1.unescapeJsonPointer)(segment))}`;\n      expr = (0, codegen_1._)`${expr} && ${data}`;\n    }\n  }\n  return expr;\n  function errorMsg(pointerType, up) {\n    return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;\n  }\n}\nexports.getData = getData;","map":{"version":3,"names":["boolSchema_1","require","dataType_1","applicability_1","dataType_2","defaults_1","keyword_1","subschema_1","codegen_1","names_1","resolve_1","util_1","errors_1","validateFunctionCode","it","isSchemaObj","checkKeywords","schemaCxtHasRules","topSchemaObjCode","validateFunction","topBoolOrEmptySchema","exports","_ref","body","gen","validateName","schema","schemaEnv","opts","code","es5","func","_","default","data","valCxt","$async","funcSourceUrl","destructureValCxtES5","destructureValCxt","instancePath","parentData","parentDataProperty","rootData","dynamicRef","dynamicAnchors","nil","if","var","$comment","commentKeyword","checkNoDefault","let","vErrors","errors","unevaluated","resetEvaluated","typeAndKeywords","returnResults","evaluated","const","assign","schId","schemaId","source","process","subschemaCode","valid","subSchemaObjCode","boolOrEmptySchema","_ref2","self","key","RULES","all","updateContext","checkAsyncSchema","errsCount","checkUnknownRules","checkRefsAndKeywords","jtd","schemaKeywords","types","getSchemaTypes","checkedTypes","coerceAndCheckDataType","errSchemaPath","$ref","ignoreKeywordsWithRef","schemaHasRulesButRef","logger","warn","undefined","useDefaults","strictSchema","checkStrictMode","baseId","resolveUrl","uriResolver","Error","_ref3","msg","schemaPath","str","rootName","scopeValue","ref","root","ValidationError","return","throw","assignEvaluated","_ref4","props","items","Name","typeErrors","allErrors","block","keywordCode","definition","checkStrictTypes","group","rules","groupKeywords","post","shouldUseGroup","type","checkDataType","strictNumbers","iterateKeywords","length","else","reportTypeError","endIf","assignDefaults","rule","shouldUseRule","keyword","meta","strictTypes","checkContextTypes","allowUnionTypes","checkMultipleTypes","checkKeywordTypes","dataTypes","forEach","t","includesType","strictTypesError","join","narrowSchemaTypes","ts","includes","some","hasApplicableType","schTs","kwdT","withTypes","push","KeywordCxt","constructor","def","validateKeywordUsage","$data","schemaValue","schemaRefOrVal","schemaType","parentSchema","params","schemaCode","getData","validSchemaType","allowUndefined","JSON","stringify","trackErrors","result","condition","successAction","failAction","failResult","not","error","pass","fail","fail$data","or","invalid$data","append","errorParams","errorPaths","setParams","_error","reportExtraError","reportError","$dataError","keyword$DataError","reset","resetErrorsCount","ok","cond","obj","Object","block$data","codeBlock","$dataValid","arguments","check$data","validateSchema","elseIf","wrong$DataType","invalid$DataSchema","st","Array","isArray","checkDataTypes","DataType","Wrong","validateSchemaRef","subschema","appl","getSubschema","extendSubschemaData","extendSubschemaMode","nextContext","mergeEvaluated","schemaCxt","toName","mergeValidEvaluated","ruleType","cxt","validate","funcKeywordCode","macroKeywordCode","compile","JSON_POINTER","RELATIVE_JSON_POINTER","_ref5","dataLevel","dataNames","dataPathArr","jsonPointer","test","matches","exec","up","errorMsg","expr","segments","split","segment","getProperty","unescapeJsonPointer","pointerType"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/ajv/lib/compile/validate/index.ts"],"sourcesContent":["import type {\n  AddedKeywordDefinition,\n  AnySchema,\n  AnySchemaObject,\n  KeywordErrorCxt,\n  KeywordCxtParams,\n} from \"../../types\"\nimport type {SchemaCxt, SchemaObjCxt} from \"..\"\nimport type {InstanceOptions} from \"../../core\"\nimport {boolOrEmptySchema, topBoolOrEmptySchema} from \"./boolSchema\"\nimport {coerceAndCheckDataType, getSchemaTypes} from \"./dataType\"\nimport {shouldUseGroup, shouldUseRule} from \"./applicability\"\nimport {checkDataType, checkDataTypes, reportTypeError, DataType} from \"./dataType\"\nimport {assignDefaults} from \"./defaults\"\nimport {funcKeywordCode, macroKeywordCode, validateKeywordUsage, validSchemaType} from \"./keyword\"\nimport {getSubschema, extendSubschemaData, SubschemaArgs, extendSubschemaMode} from \"./subschema\"\nimport {_, nil, str, or, not, getProperty, Block, Code, Name, CodeGen} from \"../codegen\"\nimport N from \"../names\"\nimport {resolveUrl} from \"../resolve\"\nimport {\n  schemaRefOrVal,\n  schemaHasRulesButRef,\n  checkUnknownRules,\n  checkStrictMode,\n  unescapeJsonPointer,\n  mergeEvaluated,\n} from \"../util\"\nimport type {JSONType, Rule, RuleGroup} from \"../rules\"\nimport {\n  ErrorPaths,\n  reportError,\n  reportExtraError,\n  resetErrorsCount,\n  keyword$DataError,\n} from \"../errors\"\n\n// schema compilation - generates validation function, subschemaCode (below) is used for subschemas\nexport function validateFunctionCode(it: SchemaCxt): void {\n  if (isSchemaObj(it)) {\n    checkKeywords(it)\n    if (schemaCxtHasRules(it)) {\n      topSchemaObjCode(it)\n      return\n    }\n  }\n  validateFunction(it, () => topBoolOrEmptySchema(it))\n}\n\nfunction validateFunction(\n  {gen, validateName, schema, schemaEnv, opts}: SchemaCxt,\n  body: Block\n): void {\n  if (opts.code.es5) {\n    gen.func(validateName, _`${N.data}, ${N.valCxt}`, schemaEnv.$async, () => {\n      gen.code(_`\"use strict\"; ${funcSourceUrl(schema, opts)}`)\n      destructureValCxtES5(gen, opts)\n      gen.code(body)\n    })\n  } else {\n    gen.func(validateName, _`${N.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, () =>\n      gen.code(funcSourceUrl(schema, opts)).code(body)\n    )\n  }\n}\n\nfunction destructureValCxt(opts: InstanceOptions): Code {\n  return _`{${N.instancePath}=\"\", ${N.parentData}, ${N.parentDataProperty}, ${N.rootData}=${\n    N.data\n  }${opts.dynamicRef ? _`, ${N.dynamicAnchors}={}` : nil}}={}`\n}\n\nfunction destructureValCxtES5(gen: CodeGen, opts: InstanceOptions): void {\n  gen.if(\n    N.valCxt,\n    () => {\n      gen.var(N.instancePath, _`${N.valCxt}.${N.instancePath}`)\n      gen.var(N.parentData, _`${N.valCxt}.${N.parentData}`)\n      gen.var(N.parentDataProperty, _`${N.valCxt}.${N.parentDataProperty}`)\n      gen.var(N.rootData, _`${N.valCxt}.${N.rootData}`)\n      if (opts.dynamicRef) gen.var(N.dynamicAnchors, _`${N.valCxt}.${N.dynamicAnchors}`)\n    },\n    () => {\n      gen.var(N.instancePath, _`\"\"`)\n      gen.var(N.parentData, _`undefined`)\n      gen.var(N.parentDataProperty, _`undefined`)\n      gen.var(N.rootData, N.data)\n      if (opts.dynamicRef) gen.var(N.dynamicAnchors, _`{}`)\n    }\n  )\n}\n\nfunction topSchemaObjCode(it: SchemaObjCxt): void {\n  const {schema, opts, gen} = it\n  validateFunction(it, () => {\n    if (opts.$comment && schema.$comment) commentKeyword(it)\n    checkNoDefault(it)\n    gen.let(N.vErrors, null)\n    gen.let(N.errors, 0)\n    if (opts.unevaluated) resetEvaluated(it)\n    typeAndKeywords(it)\n    returnResults(it)\n  })\n  return\n}\n\nfunction resetEvaluated(it: SchemaObjCxt): void {\n  // TODO maybe some hook to execute it in the end to check whether props/items are Name, as in assignEvaluated\n  const {gen, validateName} = it\n  it.evaluated = gen.const(\"evaluated\", _`${validateName}.evaluated`)\n  gen.if(_`${it.evaluated}.dynamicProps`, () => gen.assign(_`${it.evaluated}.props`, _`undefined`))\n  gen.if(_`${it.evaluated}.dynamicItems`, () => gen.assign(_`${it.evaluated}.items`, _`undefined`))\n}\n\nfunction funcSourceUrl(schema: AnySchema, opts: InstanceOptions): Code {\n  const schId = typeof schema == \"object\" && schema[opts.schemaId]\n  return schId && (opts.code.source || opts.code.process) ? _`/*# sourceURL=${schId} */` : nil\n}\n\n// schema compilation - this function is used recursively to generate code for sub-schemas\nfunction subschemaCode(it: SchemaCxt, valid: Name): void {\n  if (isSchemaObj(it)) {\n    checkKeywords(it)\n    if (schemaCxtHasRules(it)) {\n      subSchemaObjCode(it, valid)\n      return\n    }\n  }\n  boolOrEmptySchema(it, valid)\n}\n\nfunction schemaCxtHasRules({schema, self}: SchemaCxt): boolean {\n  if (typeof schema == \"boolean\") return !schema\n  for (const key in schema) if (self.RULES.all[key]) return true\n  return false\n}\n\nfunction isSchemaObj(it: SchemaCxt): it is SchemaObjCxt {\n  return typeof it.schema != \"boolean\"\n}\n\nfunction subSchemaObjCode(it: SchemaObjCxt, valid: Name): void {\n  const {schema, gen, opts} = it\n  if (opts.$comment && schema.$comment) commentKeyword(it)\n  updateContext(it)\n  checkAsyncSchema(it)\n  const errsCount = gen.const(\"_errs\", N.errors)\n  typeAndKeywords(it, errsCount)\n  // TODO var\n  gen.var(valid, _`${errsCount} === ${N.errors}`)\n}\n\nfunction checkKeywords(it: SchemaObjCxt): void {\n  checkUnknownRules(it)\n  checkRefsAndKeywords(it)\n}\n\nfunction typeAndKeywords(it: SchemaObjCxt, errsCount?: Name): void {\n  if (it.opts.jtd) return schemaKeywords(it, [], false, errsCount)\n  const types = getSchemaTypes(it.schema)\n  const checkedTypes = coerceAndCheckDataType(it, types)\n  schemaKeywords(it, types, !checkedTypes, errsCount)\n}\n\nfunction checkRefsAndKeywords(it: SchemaObjCxt): void {\n  const {schema, errSchemaPath, opts, self} = it\n  if (schema.$ref && opts.ignoreKeywordsWithRef && schemaHasRulesButRef(schema, self.RULES)) {\n    self.logger.warn(`$ref: keywords ignored in schema at path \"${errSchemaPath}\"`)\n  }\n}\n\nfunction checkNoDefault(it: SchemaObjCxt): void {\n  const {schema, opts} = it\n  if (schema.default !== undefined && opts.useDefaults && opts.strictSchema) {\n    checkStrictMode(it, \"default is ignored in the schema root\")\n  }\n}\n\nfunction updateContext(it: SchemaObjCxt): void {\n  const schId = it.schema[it.opts.schemaId]\n  if (schId) it.baseId = resolveUrl(it.opts.uriResolver, it.baseId, schId)\n}\n\nfunction checkAsyncSchema(it: SchemaObjCxt): void {\n  if (it.schema.$async && !it.schemaEnv.$async) throw new Error(\"async schema in sync schema\")\n}\n\nfunction commentKeyword({gen, schemaEnv, schema, errSchemaPath, opts}: SchemaObjCxt): void {\n  const msg = schema.$comment\n  if (opts.$comment === true) {\n    gen.code(_`${N.self}.logger.log(${msg})`)\n  } else if (typeof opts.$comment == \"function\") {\n    const schemaPath = str`${errSchemaPath}/$comment`\n    const rootName = gen.scopeValue(\"root\", {ref: schemaEnv.root})\n    gen.code(_`${N.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`)\n  }\n}\n\nfunction returnResults(it: SchemaCxt): void {\n  const {gen, schemaEnv, validateName, ValidationError, opts} = it\n  if (schemaEnv.$async) {\n    // TODO assign unevaluated\n    gen.if(\n      _`${N.errors} === 0`,\n      () => gen.return(N.data),\n      () => gen.throw(_`new ${ValidationError as Name}(${N.vErrors})`)\n    )\n  } else {\n    gen.assign(_`${validateName}.errors`, N.vErrors)\n    if (opts.unevaluated) assignEvaluated(it)\n    gen.return(_`${N.errors} === 0`)\n  }\n}\n\nfunction assignEvaluated({gen, evaluated, props, items}: SchemaCxt): void {\n  if (props instanceof Name) gen.assign(_`${evaluated}.props`, props)\n  if (items instanceof Name) gen.assign(_`${evaluated}.items`, items)\n}\n\nfunction schemaKeywords(\n  it: SchemaObjCxt,\n  types: JSONType[],\n  typeErrors: boolean,\n  errsCount?: Name\n): void {\n  const {gen, schema, data, allErrors, opts, self} = it\n  const {RULES} = self\n  if (schema.$ref && (opts.ignoreKeywordsWithRef || !schemaHasRulesButRef(schema, RULES))) {\n    gen.block(() => keywordCode(it, \"$ref\", (RULES.all.$ref as Rule).definition)) // TODO typecast\n    return\n  }\n  if (!opts.jtd) checkStrictTypes(it, types)\n  gen.block(() => {\n    for (const group of RULES.rules) groupKeywords(group)\n    groupKeywords(RULES.post)\n  })\n\n  function groupKeywords(group: RuleGroup): void {\n    if (!shouldUseGroup(schema, group)) return\n    if (group.type) {\n      gen.if(checkDataType(group.type, data, opts.strictNumbers))\n      iterateKeywords(it, group)\n      if (types.length === 1 && types[0] === group.type && typeErrors) {\n        gen.else()\n        reportTypeError(it)\n      }\n      gen.endIf()\n    } else {\n      iterateKeywords(it, group)\n    }\n    // TODO make it \"ok\" call?\n    if (!allErrors) gen.if(_`${N.errors} === ${errsCount || 0}`)\n  }\n}\n\nfunction iterateKeywords(it: SchemaObjCxt, group: RuleGroup): void {\n  const {\n    gen,\n    schema,\n    opts: {useDefaults},\n  } = it\n  if (useDefaults) assignDefaults(it, group.type)\n  gen.block(() => {\n    for (const rule of group.rules) {\n      if (shouldUseRule(schema, rule)) {\n        keywordCode(it, rule.keyword, rule.definition, group.type)\n      }\n    }\n  })\n}\n\nfunction checkStrictTypes(it: SchemaObjCxt, types: JSONType[]): void {\n  if (it.schemaEnv.meta || !it.opts.strictTypes) return\n  checkContextTypes(it, types)\n  if (!it.opts.allowUnionTypes) checkMultipleTypes(it, types)\n  checkKeywordTypes(it, it.dataTypes)\n}\n\nfunction checkContextTypes(it: SchemaObjCxt, types: JSONType[]): void {\n  if (!types.length) return\n  if (!it.dataTypes.length) {\n    it.dataTypes = types\n    return\n  }\n  types.forEach((t) => {\n    if (!includesType(it.dataTypes, t)) {\n      strictTypesError(it, `type \"${t}\" not allowed by context \"${it.dataTypes.join(\",\")}\"`)\n    }\n  })\n  narrowSchemaTypes(it, types)\n}\n\nfunction checkMultipleTypes(it: SchemaObjCxt, ts: JSONType[]): void {\n  if (ts.length > 1 && !(ts.length === 2 && ts.includes(\"null\"))) {\n    strictTypesError(it, \"use allowUnionTypes to allow union type keyword\")\n  }\n}\n\nfunction checkKeywordTypes(it: SchemaObjCxt, ts: JSONType[]): void {\n  const rules = it.self.RULES.all\n  for (const keyword in rules) {\n    const rule = rules[keyword]\n    if (typeof rule == \"object\" && shouldUseRule(it.schema, rule)) {\n      const {type} = rule.definition\n      if (type.length && !type.some((t) => hasApplicableType(ts, t))) {\n        strictTypesError(it, `missing type \"${type.join(\",\")}\" for keyword \"${keyword}\"`)\n      }\n    }\n  }\n}\n\nfunction hasApplicableType(schTs: JSONType[], kwdT: JSONType): boolean {\n  return schTs.includes(kwdT) || (kwdT === \"number\" && schTs.includes(\"integer\"))\n}\n\nfunction includesType(ts: JSONType[], t: JSONType): boolean {\n  return ts.includes(t) || (t === \"integer\" && ts.includes(\"number\"))\n}\n\nfunction narrowSchemaTypes(it: SchemaObjCxt, withTypes: JSONType[]): void {\n  const ts: JSONType[] = []\n  for (const t of it.dataTypes) {\n    if (includesType(withTypes, t)) ts.push(t)\n    else if (withTypes.includes(\"integer\") && t === \"number\") ts.push(\"integer\")\n  }\n  it.dataTypes = ts\n}\n\nfunction strictTypesError(it: SchemaObjCxt, msg: string): void {\n  const schemaPath = it.schemaEnv.baseId + it.errSchemaPath\n  msg += ` at \"${schemaPath}\" (strictTypes)`\n  checkStrictMode(it, msg, it.opts.strictTypes)\n}\n\nexport class KeywordCxt implements KeywordErrorCxt {\n  readonly gen: CodeGen\n  readonly allErrors?: boolean\n  readonly keyword: string\n  readonly data: Name // Name referencing the current level of the data instance\n  readonly $data?: string | false\n  schema: any // keyword value in the schema\n  readonly schemaValue: Code | number | boolean // Code reference to keyword schema value or primitive value\n  readonly schemaCode: Code | number | boolean // Code reference to resolved schema value (different if schema is $data)\n  readonly schemaType: JSONType[] // allowed type(s) of keyword value in the schema\n  readonly parentSchema: AnySchemaObject\n  readonly errsCount?: Name // Name reference to the number of validation errors collected before this keyword,\n  // requires option trackErrors in keyword definition\n  params: KeywordCxtParams // object to pass parameters to error messages from keyword code\n  readonly it: SchemaObjCxt // schema compilation context (schema is guaranteed to be an object, not boolean)\n  readonly def: AddedKeywordDefinition\n\n  constructor(it: SchemaObjCxt, def: AddedKeywordDefinition, keyword: string) {\n    validateKeywordUsage(it, def, keyword)\n    this.gen = it.gen\n    this.allErrors = it.allErrors\n    this.keyword = keyword\n    this.data = it.data\n    this.schema = it.schema[keyword]\n    this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data\n    this.schemaValue = schemaRefOrVal(it, this.schema, keyword, this.$data)\n    this.schemaType = def.schemaType\n    this.parentSchema = it.schema\n    this.params = {}\n    this.it = it\n    this.def = def\n\n    if (this.$data) {\n      this.schemaCode = it.gen.const(\"vSchema\", getData(this.$data, it))\n    } else {\n      this.schemaCode = this.schemaValue\n      if (!validSchemaType(this.schema, def.schemaType, def.allowUndefined)) {\n        throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`)\n      }\n    }\n\n    if (\"code\" in def ? def.trackErrors : def.errors !== false) {\n      this.errsCount = it.gen.const(\"_errs\", N.errors)\n    }\n  }\n\n  result(condition: Code, successAction?: () => void, failAction?: () => void): void {\n    this.failResult(not(condition), successAction, failAction)\n  }\n\n  failResult(condition: Code, successAction?: () => void, failAction?: () => void): void {\n    this.gen.if(condition)\n    if (failAction) failAction()\n    else this.error()\n    if (successAction) {\n      this.gen.else()\n      successAction()\n      if (this.allErrors) this.gen.endIf()\n    } else {\n      if (this.allErrors) this.gen.endIf()\n      else this.gen.else()\n    }\n  }\n\n  pass(condition: Code, failAction?: () => void): void {\n    this.failResult(not(condition), undefined, failAction)\n  }\n\n  fail(condition?: Code): void {\n    if (condition === undefined) {\n      this.error()\n      if (!this.allErrors) this.gen.if(false) // this branch will be removed by gen.optimize\n      return\n    }\n    this.gen.if(condition)\n    this.error()\n    if (this.allErrors) this.gen.endIf()\n    else this.gen.else()\n  }\n\n  fail$data(condition: Code): void {\n    if (!this.$data) return this.fail(condition)\n    const {schemaCode} = this\n    this.fail(_`${schemaCode} !== undefined && (${or(this.invalid$data(), condition)})`)\n  }\n\n  error(append?: boolean, errorParams?: KeywordCxtParams, errorPaths?: ErrorPaths): void {\n    if (errorParams) {\n      this.setParams(errorParams)\n      this._error(append, errorPaths)\n      this.setParams({})\n      return\n    }\n    this._error(append, errorPaths)\n  }\n\n  private _error(append?: boolean, errorPaths?: ErrorPaths): void {\n    ;(append ? reportExtraError : reportError)(this, this.def.error, errorPaths)\n  }\n\n  $dataError(): void {\n    reportError(this, this.def.$dataError || keyword$DataError)\n  }\n\n  reset(): void {\n    if (this.errsCount === undefined) throw new Error('add \"trackErrors\" to keyword definition')\n    resetErrorsCount(this.gen, this.errsCount)\n  }\n\n  ok(cond: Code | boolean): void {\n    if (!this.allErrors) this.gen.if(cond)\n  }\n\n  setParams(obj: KeywordCxtParams, assign?: true): void {\n    if (assign) Object.assign(this.params, obj)\n    else this.params = obj\n  }\n\n  block$data(valid: Name, codeBlock: () => void, $dataValid: Code = nil): void {\n    this.gen.block(() => {\n      this.check$data(valid, $dataValid)\n      codeBlock()\n    })\n  }\n\n  check$data(valid: Name = nil, $dataValid: Code = nil): void {\n    if (!this.$data) return\n    const {gen, schemaCode, schemaType, def} = this\n    gen.if(or(_`${schemaCode} === undefined`, $dataValid))\n    if (valid !== nil) gen.assign(valid, true)\n    if (schemaType.length || def.validateSchema) {\n      gen.elseIf(this.invalid$data())\n      this.$dataError()\n      if (valid !== nil) gen.assign(valid, false)\n    }\n    gen.else()\n  }\n\n  invalid$data(): Code {\n    const {gen, schemaCode, schemaType, def, it} = this\n    return or(wrong$DataType(), invalid$DataSchema())\n\n    function wrong$DataType(): Code {\n      if (schemaType.length) {\n        /* istanbul ignore if */\n        if (!(schemaCode instanceof Name)) throw new Error(\"ajv implementation error\")\n        const st = Array.isArray(schemaType) ? schemaType : [schemaType]\n        return _`${checkDataTypes(st, schemaCode, it.opts.strictNumbers, DataType.Wrong)}`\n      }\n      return nil\n    }\n\n    function invalid$DataSchema(): Code {\n      if (def.validateSchema) {\n        const validateSchemaRef = gen.scopeValue(\"validate$data\", {ref: def.validateSchema}) // TODO value.code for standalone\n        return _`!${validateSchemaRef}(${schemaCode})`\n      }\n      return nil\n    }\n  }\n\n  subschema(appl: SubschemaArgs, valid: Name): SchemaCxt {\n    const subschema = getSubschema(this.it, appl)\n    extendSubschemaData(subschema, this.it, appl)\n    extendSubschemaMode(subschema, appl)\n    const nextContext = {...this.it, ...subschema, items: undefined, props: undefined}\n    subschemaCode(nextContext, valid)\n    return nextContext\n  }\n\n  mergeEvaluated(schemaCxt: SchemaCxt, toName?: typeof Name): void {\n    const {it, gen} = this\n    if (!it.opts.unevaluated) return\n    if (it.props !== true && schemaCxt.props !== undefined) {\n      it.props = mergeEvaluated.props(gen, schemaCxt.props, it.props, toName)\n    }\n    if (it.items !== true && schemaCxt.items !== undefined) {\n      it.items = mergeEvaluated.items(gen, schemaCxt.items, it.items, toName)\n    }\n  }\n\n  mergeValidEvaluated(schemaCxt: SchemaCxt, valid: Name): boolean | void {\n    const {it, gen} = this\n    if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {\n      gen.if(valid, () => this.mergeEvaluated(schemaCxt, Name))\n      return true\n    }\n  }\n}\n\nfunction keywordCode(\n  it: SchemaObjCxt,\n  keyword: string,\n  def: AddedKeywordDefinition,\n  ruleType?: JSONType\n): void {\n  const cxt = new KeywordCxt(it, def, keyword)\n  if (\"code\" in def) {\n    def.code(cxt, ruleType)\n  } else if (cxt.$data && def.validate) {\n    funcKeywordCode(cxt, def)\n  } else if (\"macro\" in def) {\n    macroKeywordCode(cxt, def)\n  } else if (def.compile || def.validate) {\n    funcKeywordCode(cxt, def)\n  }\n}\n\nconst JSON_POINTER = /^\\/(?:[^~]|~0|~1)*$/\nconst RELATIVE_JSON_POINTER = /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/\nexport function getData(\n  $data: string,\n  {dataLevel, dataNames, dataPathArr}: SchemaCxt\n): Code | number {\n  let jsonPointer\n  let data: Code\n  if ($data === \"\") return N.rootData\n  if ($data[0] === \"/\") {\n    if (!JSON_POINTER.test($data)) throw new Error(`Invalid JSON-pointer: ${$data}`)\n    jsonPointer = $data\n    data = N.rootData\n  } else {\n    const matches = RELATIVE_JSON_POINTER.exec($data)\n    if (!matches) throw new Error(`Invalid JSON-pointer: ${$data}`)\n    const up: number = +matches[1]\n    jsonPointer = matches[2]\n    if (jsonPointer === \"#\") {\n      if (up >= dataLevel) throw new Error(errorMsg(\"property/index\", up))\n      return dataPathArr[dataLevel - up]\n    }\n    if (up > dataLevel) throw new Error(errorMsg(\"data\", up))\n    data = dataNames[dataLevel - up]\n    if (!jsonPointer) return data\n  }\n\n  let expr = data\n  const segments = jsonPointer.split(\"/\")\n  for (const segment of segments) {\n    if (segment) {\n      data = _`${data}${getProperty(unescapeJsonPointer(segment))}`\n      expr = _`${expr} && ${data}`\n    }\n  }\n  return expr\n\n  function errorMsg(pointerType: string, up: number): string {\n    return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}