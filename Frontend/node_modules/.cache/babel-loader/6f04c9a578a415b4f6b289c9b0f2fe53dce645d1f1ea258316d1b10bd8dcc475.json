{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst resolve_1 = require(\"./resolve\");\nclass MissingRefError extends Error {\n  constructor(resolver, baseId, ref, msg) {\n    super(msg || `can't resolve reference ${ref} from id ${baseId}`);\n    this.missingRef = (0, resolve_1.resolveUrl)(resolver, baseId, ref);\n    this.missingSchema = (0, resolve_1.normalizeId)((0, resolve_1.getFullPath)(resolver, this.missingRef));\n  }\n}\nexports.default = MissingRefError;","map":{"version":3,"names":["resolve_1","require","MissingRefError","Error","constructor","resolver","baseId","ref","msg","missingRef","resolveUrl","missingSchema","normalizeId","getFullPath","exports","default"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/ajv/lib/compile/ref_error.ts"],"sourcesContent":["import {resolveUrl, normalizeId, getFullPath} from \"./resolve\"\nimport type {UriResolver} from \"../types\"\n\nexport default class MissingRefError extends Error {\n  readonly missingRef: string\n  readonly missingSchema: string\n\n  constructor(resolver: UriResolver, baseId: string, ref: string, msg?: string) {\n    super(msg || `can't resolve reference ${ref} from id ${baseId}`)\n    this.missingRef = resolveUrl(resolver, baseId, ref)\n    this.missingSchema = normalizeId(getFullPath(resolver, this.missingRef))\n  }\n}\n"],"mappings":";;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AAGA,MAAqBC,eAAgB,SAAQC,KAAK;EAIhDC,YAAYC,QAAqB,EAAEC,MAAc,EAAEC,GAAW,EAAEC,GAAY;IAC1E,KAAK,CAACA,GAAG,IAAI,2BAA2BD,GAAG,YAAYD,MAAM,EAAE,CAAC;IAChE,IAAI,CAACG,UAAU,GAAG,IAAAT,SAAA,CAAAU,UAAU,EAACL,QAAQ,EAAEC,MAAM,EAAEC,GAAG,CAAC;IACnD,IAAI,CAACI,aAAa,GAAG,IAAAX,SAAA,CAAAY,WAAW,EAAC,IAAAZ,SAAA,CAAAa,WAAW,EAACR,QAAQ,EAAE,IAAI,CAACI,UAAU,CAAC,CAAC;EAC1E;;AARFK,OAAA,CAAAC,OAAA,GAAAb,eAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}