{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport { useTooltipContext } from '../context';\nexport const useTooltip = () => {\n  _s();\n  const {\n    tooltipInfo,\n    setTooltipInfo\n  } = useTooltipContext();\n\n  // We need these refs to be able to access tooltipInfo in the mouseenter and mouseleave\n  // listeners, otherwise they will be undefined because of the closure of tooltipInfo.\n  const tooltipInfoRef = useRef(tooltipInfo);\n  const setTooltipInfoRef = useRef(setTooltipInfo);\n  useEffect(() => {\n    tooltipInfoRef.current = tooltipInfo;\n    setTooltipInfoRef.current = setTooltipInfo;\n  }, [tooltipInfo, setTooltipInfo]);\n  const setupTooltipListeners = workspace => {\n    var _workspace$getFlyout;\n    if (!workspace) {\n      return;\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const toolboxBlocks = (_workspace$getFlyout = workspace.getFlyout()) === null || _workspace$getFlyout === void 0 ? void 0 : _workspace$getFlyout.getBlocks();\n    for (const block of toolboxBlocks) {\n      block.getSvgRoot().addEventListener('mouseenter', async event => {\n        ;\n        event.target.classList.add('tooltip-opened');\n        await new Promise(resolve => setTimeout(resolve, 400));\n        if (event.target.classList.contains('tooltip-opened')) {\n          setTooltipInfoRef.current({\n            blockSvg: block,\n            event,\n            tooltipHovered: false\n          });\n        }\n      });\n      block.getSvgRoot().addEventListener('mouseleave', async event => {\n        var _tooltipInfoRef$curre;\n        ;\n        event.target.classList.remove('tooltip-opened');\n        await new Promise(resolve => setTimeout(resolve, 300));\n        if ((_tooltipInfoRef$curre = tooltipInfoRef.current) !== null && _tooltipInfoRef$curre !== void 0 && _tooltipInfoRef$curre.tooltipHovered) {\n          return;\n        }\n        setTooltipInfoRef.current(undefined);\n      });\n    }\n  };\n  const onMouseOverTooltipComponent = () => {\n    setTooltipInfoRef.current({\n      ...tooltipInfo,\n      tooltipHovered: true\n    });\n  };\n  const onMouseLeaveTooltipComponent = () => {\n    setTooltipInfoRef.current(undefined);\n  };\n  return {\n    setupTooltipListeners,\n    onMouseLeaveTooltipComponent,\n    onMouseOverTooltipComponent,\n    tooltipInfo: tooltipInfoRef.current,\n    setTooltipInfo: setTooltipInfoRef.current\n  };\n};\n_s(useTooltip, \"s7+CkJalA0OIvlEe4+Ubqbq9sug=\", false, function () {\n  return [useTooltipContext];\n});","map":{"version":3,"names":["useEffect","useRef","useTooltipContext","useTooltip","_s","tooltipInfo","setTooltipInfo","tooltipInfoRef","setTooltipInfoRef","current","setupTooltipListeners","workspace","_workspace$getFlyout","toolboxBlocks","getFlyout","getBlocks","block","getSvgRoot","addEventListener","event","target","classList","add","Promise","resolve","setTimeout","contains","blockSvg","tooltipHovered","_tooltipInfoRef$curre","remove","undefined","onMouseOverTooltipComponent","onMouseLeaveTooltipComponent"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/src/hooks/useTooltip.ts"],"sourcesContent":["import { useEffect, useRef } from 'react'\nimport { BlockSvg, WorkspaceSvg } from 'blockly/core'\nimport { useTooltipContext } from '../context'\n\nexport const useTooltip = () => {\n  const { tooltipInfo, setTooltipInfo } = useTooltipContext()\n\n  // We need these refs to be able to access tooltipInfo in the mouseenter and mouseleave\n  // listeners, otherwise they will be undefined because of the closure of tooltipInfo.\n  const tooltipInfoRef = useRef(tooltipInfo)\n  const setTooltipInfoRef = useRef(setTooltipInfo)\n\n  useEffect(() => {\n    tooltipInfoRef.current = tooltipInfo\n    setTooltipInfoRef.current = setTooltipInfo\n  }, [tooltipInfo, setTooltipInfo])\n\n  const setupTooltipListeners = (workspace?: WorkspaceSvg) => {\n    if (!workspace) {\n      return\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const toolboxBlocks = workspace.getFlyout()?.getBlocks()\n    for (const block of toolboxBlocks as Array<BlockSvg>) {\n      block.getSvgRoot().addEventListener('mouseenter', async (event: MouseEvent) => {\n        ;(event.target as SVGGElement).classList.add('tooltip-opened')\n        await new Promise((resolve) => setTimeout(resolve, 400))\n\n        if ((event.target as SVGGElement).classList.contains('tooltip-opened')) {\n          setTooltipInfoRef.current({ blockSvg: block, event, tooltipHovered: false })\n        }\n      })\n\n      block.getSvgRoot().addEventListener('mouseleave', async (event: MouseEvent) => {\n        ;(event.target as SVGGElement).classList.remove('tooltip-opened')\n        await new Promise((resolve) => setTimeout(resolve, 300))\n        if (tooltipInfoRef.current?.tooltipHovered) {\n          return\n        }\n\n        setTooltipInfoRef.current(undefined)\n      })\n    }\n  }\n\n  const onMouseOverTooltipComponent = () => {\n    setTooltipInfoRef.current({ ...tooltipInfo, tooltipHovered: true })\n  }\n\n  const onMouseLeaveTooltipComponent = () => {\n    setTooltipInfoRef.current(undefined)\n  }\n\n  return {\n    setupTooltipListeners,\n    onMouseLeaveTooltipComponent,\n    onMouseOverTooltipComponent,\n    tooltipInfo: tooltipInfoRef.current,\n    setTooltipInfo: setTooltipInfoRef.current,\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEzC,SAASC,iBAAiB,QAAQ,YAAY;AAE9C,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM;IAAEC,WAAW;IAAEC;EAAe,CAAC,GAAGJ,iBAAiB,CAAC,CAAC;;EAE3D;EACA;EACA,MAAMK,cAAc,GAAGN,MAAM,CAACI,WAAW,CAAC;EAC1C,MAAMG,iBAAiB,GAAGP,MAAM,CAACK,cAAc,CAAC;EAEhDN,SAAS,CAAC,MAAM;IACdO,cAAc,CAACE,OAAO,GAAGJ,WAAW;IACpCG,iBAAiB,CAACC,OAAO,GAAGH,cAAc;EAC5C,CAAC,EAAE,CAACD,WAAW,EAAEC,cAAc,CAAC,CAAC;EAEjC,MAAMI,qBAAqB,GAAIC,SAAwB,IAAK;IAAA,IAAAC,oBAAA;IAC1D,IAAI,CAACD,SAAS,EAAE;MACd;IACF;IACA;IACA;IACA,MAAME,aAAa,IAAAD,oBAAA,GAAGD,SAAS,CAACG,SAAS,CAAC,CAAC,cAAAF,oBAAA,uBAArBA,oBAAA,CAAuBG,SAAS,CAAC,CAAC;IACxD,KAAK,MAAMC,KAAK,IAAIH,aAAa,EAAqB;MACpDG,KAAK,CAACC,UAAU,CAAC,CAAC,CAACC,gBAAgB,CAAC,YAAY,EAAE,MAAOC,KAAiB,IAAK;QAC7E;QAAEA,KAAK,CAACC,MAAM,CAAiBC,SAAS,CAACC,GAAG,CAAC,gBAAgB,CAAC;QAC9D,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;QAExD,IAAKL,KAAK,CAACC,MAAM,CAAiBC,SAAS,CAACK,QAAQ,CAAC,gBAAgB,CAAC,EAAE;UACtElB,iBAAiB,CAACC,OAAO,CAAC;YAAEkB,QAAQ,EAAEX,KAAK;YAAEG,KAAK;YAAES,cAAc,EAAE;UAAM,CAAC,CAAC;QAC9E;MACF,CAAC,CAAC;MAEFZ,KAAK,CAACC,UAAU,CAAC,CAAC,CAACC,gBAAgB,CAAC,YAAY,EAAE,MAAOC,KAAiB,IAAK;QAAA,IAAAU,qBAAA;QAC7E;QAAEV,KAAK,CAACC,MAAM,CAAiBC,SAAS,CAACS,MAAM,CAAC,gBAAgB,CAAC;QACjE,MAAM,IAAIP,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;QACxD,KAAAK,qBAAA,GAAItB,cAAc,CAACE,OAAO,cAAAoB,qBAAA,eAAtBA,qBAAA,CAAwBD,cAAc,EAAE;UAC1C;QACF;QAEApB,iBAAiB,CAACC,OAAO,CAACsB,SAAS,CAAC;MACtC,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAMC,2BAA2B,GAAGA,CAAA,KAAM;IACxCxB,iBAAiB,CAACC,OAAO,CAAC;MAAE,GAAGJ,WAAW;MAAEuB,cAAc,EAAE;IAAK,CAAC,CAAC;EACrE,CAAC;EAED,MAAMK,4BAA4B,GAAGA,CAAA,KAAM;IACzCzB,iBAAiB,CAACC,OAAO,CAACsB,SAAS,CAAC;EACtC,CAAC;EAED,OAAO;IACLrB,qBAAqB;IACrBuB,4BAA4B;IAC5BD,2BAA2B;IAC3B3B,WAAW,EAAEE,cAAc,CAACE,OAAO;IACnCH,cAAc,EAAEE,iBAAiB,CAACC;EACpC,CAAC;AACH,CAAC;AAAAL,EAAA,CAzDYD,UAAU;EAAA,QACmBD,iBAAiB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}