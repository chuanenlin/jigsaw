{"ast":null,"code":"import Blockly from 'blockly/core';\nimport { blocksList } from '../../../constants';\nexport const initCustomBlocks = () => {\n  blocksList.map(block => {\n    Blockly.Blocks[block.name] = {\n      init: function () {\n        this.contextMenu = false;\n        /**\n         * If the block has two inputs and one output, the message0 will be\n         * \"Image to Text Block 1 %1, %2\". But there's no label for the second input\n         * so there will be a comma at the end of the message0. This removes the comma.\n         */\n        const message0 = `${block.name} ${block.blockType === 'input' ? '' : block.inputModality.map((_, index) => `%${index + 1}`)}`;\n        const lastCommaIndex = message0.lastIndexOf(',');\n        const message0WithoutLastComma = message0.substring(0, lastCommaIndex) + message0.substring(lastCommaIndex + 1);\n        this.jsonInit({\n          message0: message0WithoutLastComma,\n          args0: block.blockType === 'input' ? undefined : block.inputModality.map(inputModality => {\n            return {\n              type: 'input_value',\n              name: inputModality.modality,\n              check: inputModality.alias ? [inputModality.modality, inputModality.alias] : inputModality.modality\n            };\n          }),\n          colour: 160,\n          tooltip: '',\n          helpUrl: ''\n        });\n        this.setOutput(true, block.outputModality);\n        this.data = JSON.stringify({\n          block\n        });\n        this.style = {\n          colourPrimary: '#f2f2f2',\n          colourSecondary: '#e6e6e6',\n          colourTertiary: '#d9d9d9'\n        };\n        this.pathObject.svgRoot.classList.add(block.id);\n\n        // Center text in multi input blocks\n        if (block.inputModality.length > 1) {\n          this.onchange = () => {\n            var _this$getSvgRoot$last, _this$getSvgRoot$last2;\n            return (_this$getSvgRoot$last = this.getSvgRoot().lastChild) === null || _this$getSvgRoot$last === void 0 ? void 0 : (_this$getSvgRoot$last2 = _this$getSvgRoot$last.firstChild) === null || _this$getSvgRoot$last2 === void 0 ? void 0 : _this$getSvgRoot$last2.setAttribute('y', '55');\n          };\n        }\n\n        // Center text in the input blocks\n        if (block.blockType === 'input') {\n          this.onchange = () => {\n            var _this$getSvgRoot$last3, _this$getSvgRoot$last4;\n            return (_this$getSvgRoot$last3 = this.getSvgRoot().lastChild) === null || _this$getSvgRoot$last3 === void 0 ? void 0 : (_this$getSvgRoot$last4 = _this$getSvgRoot$last3.firstChild) === null || _this$getSvgRoot$last4 === void 0 ? void 0 : _this$getSvgRoot$last4.setAttribute('y', '15');\n          };\n        }\n        this.RTL = true;\n      }\n    };\n  });\n};","map":{"version":3,"names":["Blockly","blocksList","initCustomBlocks","map","block","Blocks","name","init","contextMenu","message0","blockType","inputModality","_","index","lastCommaIndex","lastIndexOf","message0WithoutLastComma","substring","jsonInit","args0","undefined","type","modality","check","alias","colour","tooltip","helpUrl","setOutput","outputModality","data","JSON","stringify","style","colourPrimary","colourSecondary","colourTertiary","pathObject","svgRoot","classList","add","id","length","onchange","_this$getSvgRoot$last","_this$getSvgRoot$last2","getSvgRoot","lastChild","firstChild","setAttribute","_this$getSvgRoot$last3","_this$getSvgRoot$last4","RTL"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/src/components/blockly/blocks/init-custom-blocks.ts"],"sourcesContent":["import Blockly from 'blockly/core'\nimport { blocksList } from '../../../constants'\n\nexport const initCustomBlocks = () => {\n  blocksList.map((block) => {\n    Blockly.Blocks[block.name] = {\n      init: function () {\n        this.contextMenu = false\n        /**\n         * If the block has two inputs and one output, the message0 will be\n         * \"Image to Text Block 1 %1, %2\". But there's no label for the second input\n         * so there will be a comma at the end of the message0. This removes the comma.\n         */\n        const message0 = `${block.name} ${\n          block.blockType === 'input' ? '' : block.inputModality.map((_, index) => `%${index + 1}`)\n        }`\n        const lastCommaIndex = message0.lastIndexOf(',')\n        const message0WithoutLastComma =\n          message0.substring(0, lastCommaIndex) + message0.substring(lastCommaIndex + 1)\n\n        this.jsonInit({\n          message0: message0WithoutLastComma,\n          args0:\n            block.blockType === 'input'\n              ? undefined\n              : block.inputModality.map((inputModality) => {\n                  return {\n                    type: 'input_value',\n                    name: inputModality.modality,\n                    check: inputModality.alias\n                      ? [inputModality.modality, inputModality.alias]\n                      : inputModality.modality,\n                  }\n                }),\n          colour: 160,\n          tooltip: '',\n          helpUrl: '',\n        })\n\n        this.setOutput(true, block.outputModality)\n\n        this.data = JSON.stringify({ block })\n\n        this.style = {\n          colourPrimary: '#f2f2f2',\n          colourSecondary: '#e6e6e6',\n          colourTertiary: '#d9d9d9',\n        }\n\n        this.pathObject.svgRoot.classList.add(block.id)\n\n        // Center text in multi input blocks\n        if (block.inputModality.length > 1) {\n          this.onchange = () => this.getSvgRoot().lastChild?.firstChild?.setAttribute('y', '55')\n        }\n\n        // Center text in the input blocks\n        if (block.blockType === 'input') {\n          this.onchange = () => this.getSvgRoot().lastChild?.firstChild?.setAttribute('y', '15')\n        }\n        this.RTL = true\n      },\n    }\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}