{"ast":null,"code":"import * as Blockly from 'blockly';\nconst MIN_BLOCK_HEIGHT = 100;\nconst NOTCH_WIDTH = 50;\nexport const TAB_HEIGHT = 30;\nconst TAB_WIDTH = 30;\nconst TAB_OFFSET_FROM_TOP = MIN_BLOCK_HEIGHT / 2 - TAB_HEIGHT / 2;\nconst TOP_ROW_MIN_HEIGHT = MIN_BLOCK_HEIGHT / 2 - TAB_HEIGHT / 2;\nexport class CustomConstantProvider extends Blockly.blockRendering.ConstantProvider {\n  constructor() {\n    // Set up all of the constants from the base provider.\n    super();\n\n    // Override a few properties.\n    /**\n     * The height of the block.\n     * @type {number}\n     * @override\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.RECT_PREV_NEXT = void 0;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.RECT_INPUT_OUTPUT = void 0;\n    this.MIN_BLOCK_HEIGHT = MIN_BLOCK_HEIGHT;\n\n    /**\n     * The width of the notch used for previous and next connections.\n     * @type {number}\n     * @override\n     */\n    this.NOTCH_WIDTH = NOTCH_WIDTH;\n\n    /**\n     *\n     * @type {number}\n     * @override\n     */\n    this.TAB_OFFSET_FROM_TOP = TAB_OFFSET_FROM_TOP;\n\n    /**\n     * The space between bottom of the block and the last input and the top of the block and the first input.\n     * @type {number}\n     * @override\n     */\n    this.TOP_ROW_MIN_HEIGHT = TOP_ROW_MIN_HEIGHT;\n\n    /**\n     * The height of the puzzle tab used for input and output connections.\n     * @type {number}\n     * @override\n     */\n    this.TAB_HEIGHT = TAB_HEIGHT;\n    this.TAB_WIDTH = TAB_WIDTH;\n\n    /**\n     * The amount of padding between inputs of a multi input block.\n     * 2.2 if found by trial and error, there's no logic behind it.\n     * it is the best value to make the blocks look good when other blocks are connected to it.\n     * @type {number}\n     * @override\n     */\n    this.LARGE_PADDING = TAB_HEIGHT * 2.2;\n\n    /**\n     * The padding after the last input.\n     * @type {number}\n     * @override\n     */\n    this.BOTTOM_ROW_MIN_HEIGHT = TAB_HEIGHT;\n\n    /**\n     * These values are for how the block resizes when the inputs are attached.\n     */\n    this.SMALL_PADDING = TAB_HEIGHT;\n    this.MEDIUM_PADDING = TAB_HEIGHT;\n    this.MEDIUM_LARGE_PADDING = TAB_HEIGHT;\n  }\n\n  /**\n   * @override\n   */\n  init() {\n    // First, call init() in the base provider to store the default objects.\n    super.init();\n\n    // Add calls to create shape objects for the new connection shapes.\n    this.RECT_PREV_NEXT = this.makeRectangularPreviousConn();\n    this.RECT_INPUT_OUTPUT = this.makeRoundTab();\n  }\n\n  /**\n   * @override\n   */\n  shapeFor(connection) {\n    switch (connection.type) {\n      case Blockly.INPUT_VALUE:\n      case Blockly.OUTPUT_VALUE:\n        return this.RECT_INPUT_OUTPUT;\n      case Blockly.PREVIOUS_STATEMENT:\n      case Blockly.NEXT_STATEMENT:\n        return this.RECT_PREV_NEXT;\n      default:\n        throw Error('Unknown connection type');\n    }\n  }\n\n  /**\n   * @returns Rectangular notch for use with previous and next connections.\n   */\n  makeRectangularPreviousConn() {\n    const width = this.NOTCH_WIDTH;\n    const height = 0;\n\n    /**\n     * Since previous and next connections share the same shape you can define\n     * a function to generate the path for both.\n     *\n     * @param dir Multiplier for the horizontal direction of the path (-1 or 1)\n     * @returns SVGPath line for use with previous and next connections.\n     */\n    function makeMainPath(dir) {\n      return Blockly.utils.svgPaths.line([Blockly.utils.svgPaths.point(0, height * 0.5), Blockly.utils.svgPaths.point(dir * width, 0), Blockly.utils.svgPaths.point(0, -height * 0.5)]);\n    }\n    const pathLeft = makeMainPath(1);\n    const pathRight = makeMainPath(-1);\n    return {\n      width: width,\n      height: height,\n      pathLeft: pathLeft,\n      pathRight: pathRight\n    };\n  }\n\n  /**\n   * @returns Rectangular puzzle tab for use with input and output connections.\n   */\n  makeRectangularInputConn() {\n    const width = this.TAB_WIDTH;\n    const height = this.TAB_HEIGHT;\n\n    /**\n     * Since input and output connections share the same shape you can define\n     * a function to generate the path for both.\n     *\n     * @param dir Multiplier for the vertical direction of the path (-1 or 1)\n     * @returns SVGPath line for use with input and output connections.\n     */\n    function makeMainPath(dir) {\n      return Blockly.utils.svgPaths.line([Blockly.utils.svgPaths.point(-width, 0), Blockly.utils.svgPaths.point(0, dir * height), Blockly.utils.svgPaths.point(width, 0)]);\n    }\n    const pathUp = makeMainPath(-1);\n    const pathDown = makeMainPath(1);\n    return {\n      width: width,\n      height: height,\n      pathUp: pathUp,\n      pathDown: pathDown\n    };\n  }\n\n  /**\n   * @returns An object containing sizing and path information about puzzle\n   *     tabs.\n   */\n  makeRoundTab() {\n    const width = this.TAB_WIDTH * 0.8;\n    const height = this.TAB_HEIGHT;\n\n    /**\n     * Make the main path for the puzzle tab made out of a few curves (c and s).\n     * Those curves are defined with relative positions.  The 'up' and 'down'\n     * versions of the paths are the same, but the Y sign flips.  Forward and\n     * back are the signs to use to move the cursor in the direction that the\n     * path is being drawn.\n     *\n     * @param up True if the path should be drawn from bottom to top, false\n     *     otherwise.\n     * @returns A path fragment describing a puzzle tab.\n     */\n    function makeMainPath(up) {\n      const forward = up ? -1 : 1;\n      const back = -forward;\n      const halfHeight = height / 2;\n      const overlap = -1 * halfHeight / 1.5;\n      const control1Y = halfHeight + overlap;\n      const control2Y = halfHeight + overlap;\n      const control3Y = overlap; // 2.5\n\n      const endPoint1 = Blockly.utils.svgPaths.point(-width, forward * halfHeight);\n      const endPoint2 = Blockly.utils.svgPaths.point(width, forward * halfHeight);\n      return Blockly.utils.svgPaths.curve('c', [Blockly.utils.svgPaths.point(0, forward * control1Y), Blockly.utils.svgPaths.point(-width, back * control2Y), endPoint1]) + Blockly.utils.svgPaths.curve('s', [Blockly.utils.svgPaths.point(width, back * control3Y), endPoint2]);\n    }\n\n    // c 0,-10  -8,8  -8,-7.5  s 8,2.5  8,-7.5\n    const pathUp = makeMainPath(true);\n    // c 0,10  -8,-8  -8,7.5  s 8,-2.5  8,7.5\n    const pathDown = makeMainPath(false);\n    return {\n      type: this.SHAPES.PUZZLE,\n      width,\n      height,\n      pathDown,\n      pathUp\n    };\n  }\n}","map":{"version":3,"names":["Blockly","MIN_BLOCK_HEIGHT","NOTCH_WIDTH","TAB_HEIGHT","TAB_WIDTH","TAB_OFFSET_FROM_TOP","TOP_ROW_MIN_HEIGHT","CustomConstantProvider","blockRendering","ConstantProvider","constructor","RECT_PREV_NEXT","RECT_INPUT_OUTPUT","LARGE_PADDING","BOTTOM_ROW_MIN_HEIGHT","SMALL_PADDING","MEDIUM_PADDING","MEDIUM_LARGE_PADDING","init","makeRectangularPreviousConn","makeRoundTab","shapeFor","connection","type","INPUT_VALUE","OUTPUT_VALUE","PREVIOUS_STATEMENT","NEXT_STATEMENT","Error","width","height","makeMainPath","dir","utils","svgPaths","line","point","pathLeft","pathRight","makeRectangularInputConn","pathUp","pathDown","up","forward","back","halfHeight","overlap","control1Y","control2Y","control3Y","endPoint1","endPoint2","curve","SHAPES","PUZZLE"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/src/components/blockly/custom/CustomConstantProvider.ts"],"sourcesContent":["import * as Blockly from 'blockly'\n\nconst MIN_BLOCK_HEIGHT = 100\nconst NOTCH_WIDTH = 50\nexport const TAB_HEIGHT = 30\nconst TAB_WIDTH = 30\n\nconst TAB_OFFSET_FROM_TOP = MIN_BLOCK_HEIGHT / 2 - TAB_HEIGHT / 2\nconst TOP_ROW_MIN_HEIGHT = MIN_BLOCK_HEIGHT / 2 - TAB_HEIGHT / 2\n\nexport class CustomConstantProvider extends Blockly.blockRendering.ConstantProvider {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  RECT_PREV_NEXT: any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  RECT_INPUT_OUTPUT: any\n  constructor() {\n    // Set up all of the constants from the base provider.\n    super()\n\n    // Override a few properties.\n    /**\n     * The height of the block.\n     * @type {number}\n     * @override\n     */\n    this.MIN_BLOCK_HEIGHT = MIN_BLOCK_HEIGHT\n\n    /**\n     * The width of the notch used for previous and next connections.\n     * @type {number}\n     * @override\n     */\n    this.NOTCH_WIDTH = NOTCH_WIDTH\n\n    /**\n     *\n     * @type {number}\n     * @override\n     */\n    this.TAB_OFFSET_FROM_TOP = TAB_OFFSET_FROM_TOP\n\n    /**\n     * The space between bottom of the block and the last input and the top of the block and the first input.\n     * @type {number}\n     * @override\n     */\n    this.TOP_ROW_MIN_HEIGHT = TOP_ROW_MIN_HEIGHT\n\n    /**\n     * The height of the puzzle tab used for input and output connections.\n     * @type {number}\n     * @override\n     */\n    this.TAB_HEIGHT = TAB_HEIGHT\n\n    this.TAB_WIDTH = TAB_WIDTH\n\n    /**\n     * The amount of padding between inputs of a multi input block.\n     * 2.2 if found by trial and error, there's no logic behind it.\n     * it is the best value to make the blocks look good when other blocks are connected to it.\n     * @type {number}\n     * @override\n     */\n    this.LARGE_PADDING = TAB_HEIGHT * 2.2\n\n    /**\n     * The padding after the last input.\n     * @type {number}\n     * @override\n     */\n    this.BOTTOM_ROW_MIN_HEIGHT = TAB_HEIGHT\n\n    /**\n     * These values are for how the block resizes when the inputs are attached.\n     */\n    this.SMALL_PADDING = TAB_HEIGHT\n    this.MEDIUM_PADDING = TAB_HEIGHT\n    this.MEDIUM_LARGE_PADDING = TAB_HEIGHT\n  }\n\n  /**\n   * @override\n   */\n  init() {\n    // First, call init() in the base provider to store the default objects.\n    super.init()\n\n    // Add calls to create shape objects for the new connection shapes.\n    this.RECT_PREV_NEXT = this.makeRectangularPreviousConn()\n    this.RECT_INPUT_OUTPUT = this.makeRoundTab()\n  }\n\n  /**\n   * @override\n   */\n  shapeFor(connection: Blockly.RenderedConnection) {\n    switch (connection.type) {\n      case Blockly.INPUT_VALUE:\n      case Blockly.OUTPUT_VALUE:\n        return this.RECT_INPUT_OUTPUT\n      case Blockly.PREVIOUS_STATEMENT:\n      case Blockly.NEXT_STATEMENT:\n        return this.RECT_PREV_NEXT\n      default:\n        throw Error('Unknown connection type')\n    }\n  }\n\n  /**\n   * @returns Rectangular notch for use with previous and next connections.\n   */\n  makeRectangularPreviousConn() {\n    const width = this.NOTCH_WIDTH\n    const height = 0\n\n    /**\n     * Since previous and next connections share the same shape you can define\n     * a function to generate the path for both.\n     *\n     * @param dir Multiplier for the horizontal direction of the path (-1 or 1)\n     * @returns SVGPath line for use with previous and next connections.\n     */\n    function makeMainPath(dir: number) {\n      return Blockly.utils.svgPaths.line([\n        Blockly.utils.svgPaths.point(0, height * 0.5),\n        Blockly.utils.svgPaths.point(dir * width, 0),\n        Blockly.utils.svgPaths.point(0, -height * 0.5),\n      ])\n    }\n    const pathLeft = makeMainPath(1)\n    const pathRight = makeMainPath(-1)\n\n    return {\n      width: width,\n      height: height,\n      pathLeft: pathLeft,\n      pathRight: pathRight,\n    }\n  }\n\n  /**\n   * @returns Rectangular puzzle tab for use with input and output connections.\n   */\n  makeRectangularInputConn() {\n    const width = this.TAB_WIDTH\n    const height = this.TAB_HEIGHT\n\n    /**\n     * Since input and output connections share the same shape you can define\n     * a function to generate the path for both.\n     *\n     * @param dir Multiplier for the vertical direction of the path (-1 or 1)\n     * @returns SVGPath line for use with input and output connections.\n     */\n    function makeMainPath(dir: number) {\n      return Blockly.utils.svgPaths.line([\n        Blockly.utils.svgPaths.point(-width, 0),\n        Blockly.utils.svgPaths.point(0, dir * height),\n        Blockly.utils.svgPaths.point(width, 0),\n      ])\n    }\n    const pathUp = makeMainPath(-1)\n    const pathDown = makeMainPath(1)\n\n    return {\n      width: width,\n      height: height,\n      pathUp: pathUp,\n      pathDown: pathDown,\n    }\n  }\n\n  /**\n   * @returns An object containing sizing and path information about puzzle\n   *     tabs.\n   */\n  protected makeRoundTab() {\n    const width = this.TAB_WIDTH * 0.8\n    const height = this.TAB_HEIGHT\n\n    /**\n     * Make the main path for the puzzle tab made out of a few curves (c and s).\n     * Those curves are defined with relative positions.  The 'up' and 'down'\n     * versions of the paths are the same, but the Y sign flips.  Forward and\n     * back are the signs to use to move the cursor in the direction that the\n     * path is being drawn.\n     *\n     * @param up True if the path should be drawn from bottom to top, false\n     *     otherwise.\n     * @returns A path fragment describing a puzzle tab.\n     */\n    function makeMainPath(up: boolean): string {\n      const forward = up ? -1 : 1\n      const back = -forward\n\n      const halfHeight = height / 2\n      const overlap = (-1 * halfHeight) / 1.5\n      const control1Y = halfHeight + overlap\n      const control2Y = halfHeight + overlap\n      const control3Y = overlap // 2.5\n\n      const endPoint1 = Blockly.utils.svgPaths.point(-width, forward * halfHeight)\n      const endPoint2 = Blockly.utils.svgPaths.point(width, forward * halfHeight)\n\n      return (\n        Blockly.utils.svgPaths.curve('c', [\n          Blockly.utils.svgPaths.point(0, forward * control1Y),\n          Blockly.utils.svgPaths.point(-width, back * control2Y),\n          endPoint1,\n        ]) +\n        Blockly.utils.svgPaths.curve('s', [\n          Blockly.utils.svgPaths.point(width, back * control3Y),\n          endPoint2,\n        ])\n      )\n    }\n\n    // c 0,-10  -8,8  -8,-7.5  s 8,2.5  8,-7.5\n    const pathUp = makeMainPath(true)\n    // c 0,10  -8,-8  -8,7.5  s 8,-2.5  8,7.5\n    const pathDown = makeMainPath(false)\n\n    return {\n      type: this.SHAPES.PUZZLE,\n      width,\n      height,\n      pathDown,\n      pathUp,\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}