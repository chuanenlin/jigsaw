{"ast":null,"code":"import { makeApiCall } from './api';\nimport { Endpoint } from '../constants';\nexport const makeAutoChainCall = async requestBody => makeApiCall('autochain', requestBody);\nexport const getAutoChain = async task => {\n  // const { Autochain } = await makeAutoChainCall({ task })\n  //\n  // return {\n  //   // eslint-disable-next-line camelcase\n  //   autochain_output: {\n  //     chain: JSON.parse(Autochain.json),\n  //     parameters: {},\n  //   },\n  // }\n  return getDummyAutoChain();\n};\nconst getDummyAutoChain = async () => {\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  return dummyAutoChainResponse;\n};\nconst dummyAutoChainResponse = {\n  // eslint-disable-next-line camelcase\n  autochain_output: {\n    parameters: {},\n    chain: [{\n      id: 'block1',\n      type: 'image_input'\n    }, {\n      id: 'block2',\n      type: Endpoint.Image2Text,\n      inputs: {\n        Image: 'block1'\n      }\n    }, {\n      id: 'block3',\n      type: Endpoint.Text2Text,\n      inputs: {\n        Text: 'block2'\n      }\n    }, {\n      id: 'block4',\n      type: Endpoint.Text2Audio,\n      inputs: {\n        Text: 'block3'\n      }\n    }]\n  }\n};","map":{"version":3,"names":["makeApiCall","Endpoint","makeAutoChainCall","requestBody","getAutoChain","task","getDummyAutoChain","Promise","resolve","setTimeout","dummyAutoChainResponse","autochain_output","parameters","chain","id","type","Image2Text","inputs","Image","Text2Text","Text","Text2Audio"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/src/api/autochain.ts"],"sourcesContent":["import { RequestHandler, makeApiCall } from './api'\nimport { AutoChainRequest, AutoChainResponse } from './types'\nimport { Endpoint } from '../constants'\n\nexport const makeAutoChainCall: RequestHandler<\n  AutoChainRequest,\n  { Autochain: { logs: Array<string>; json: string } }\n> = async (requestBody) => makeApiCall('autochain', requestBody)\n\nexport const getAutoChain = async (task: string) => {\n  // const { Autochain } = await makeAutoChainCall({ task })\n  //\n  // return {\n  //   // eslint-disable-next-line camelcase\n  //   autochain_output: {\n  //     chain: JSON.parse(Autochain.json),\n  //     parameters: {},\n  //   },\n  // }\n  return getDummyAutoChain()\n}\n\nconst getDummyAutoChain = async () => {\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n\n  return dummyAutoChainResponse\n}\n\nconst dummyAutoChainResponse: AutoChainResponse = {\n  // eslint-disable-next-line camelcase\n  autochain_output: {\n    parameters: {},\n    chain: [\n      {\n        id: 'block1',\n        type: 'image_input',\n      },\n      {\n        id: 'block2',\n        type: Endpoint.Image2Text,\n        inputs: {\n          Image: 'block1',\n        },\n      },\n      {\n        id: 'block3',\n        type: Endpoint.Text2Text,\n        inputs: {\n          Text: 'block2',\n        },\n      },\n      {\n        id: 'block4',\n        type: Endpoint.Text2Audio,\n        inputs: {\n          Text: 'block3',\n        },\n      },\n    ],\n  },\n}\n"],"mappings":"AAAA,SAAyBA,WAAW,QAAQ,OAAO;AAEnD,SAASC,QAAQ,QAAQ,cAAc;AAEvC,OAAO,MAAMC,iBAGZ,GAAG,MAAOC,WAAW,IAAKH,WAAW,CAAC,WAAW,EAAEG,WAAW,CAAC;AAEhE,OAAO,MAAMC,YAAY,GAAG,MAAOC,IAAY,IAAK;EAClD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,OAAOC,iBAAiB,CAAC,CAAC;AAC5B,CAAC;AAED,MAAMA,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EACpC,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;EAEzD,OAAOE,sBAAsB;AAC/B,CAAC;AAED,MAAMA,sBAAyC,GAAG;EAChD;EACAC,gBAAgB,EAAE;IAChBC,UAAU,EAAE,CAAC,CAAC;IACdC,KAAK,EAAE,CACL;MACEC,EAAE,EAAE,QAAQ;MACZC,IAAI,EAAE;IACR,CAAC,EACD;MACED,EAAE,EAAE,QAAQ;MACZC,IAAI,EAAEd,QAAQ,CAACe,UAAU;MACzBC,MAAM,EAAE;QACNC,KAAK,EAAE;MACT;IACF,CAAC,EACD;MACEJ,EAAE,EAAE,QAAQ;MACZC,IAAI,EAAEd,QAAQ,CAACkB,SAAS;MACxBF,MAAM,EAAE;QACNG,IAAI,EAAE;MACR;IACF,CAAC,EACD;MACEN,EAAE,EAAE,QAAQ;MACZC,IAAI,EAAEd,QAAQ,CAACoB,UAAU;MACzBJ,MAAM,EAAE;QACNG,IAAI,EAAE;MACR;IACF,CAAC;EAEL;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}