{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.boolOrEmptySchema = exports.topBoolOrEmptySchema = void 0;\nconst errors_1 = require(\"../errors\");\nconst codegen_1 = require(\"../codegen\");\nconst names_1 = require(\"../names\");\nconst boolError = {\n  message: \"boolean schema is false\"\n};\nfunction topBoolOrEmptySchema(it) {\n  const {\n    gen,\n    schema,\n    validateName\n  } = it;\n  if (schema === false) {\n    falseSchemaError(it, false);\n  } else if (typeof schema == \"object\" && schema.$async === true) {\n    gen.return(names_1.default.data);\n  } else {\n    gen.assign((0, codegen_1._)`${validateName}.errors`, null);\n    gen.return(true);\n  }\n}\nexports.topBoolOrEmptySchema = topBoolOrEmptySchema;\nfunction boolOrEmptySchema(it, valid) {\n  const {\n    gen,\n    schema\n  } = it;\n  if (schema === false) {\n    gen.var(valid, false); // TODO var\n    falseSchemaError(it);\n  } else {\n    gen.var(valid, true); // TODO var\n  }\n}\n\nexports.boolOrEmptySchema = boolOrEmptySchema;\nfunction falseSchemaError(it, overrideAllErrors) {\n  const {\n    gen,\n    data\n  } = it;\n  // TODO maybe some other interface should be used for non-keyword validation errors...\n  const cxt = {\n    gen,\n    keyword: \"false schema\",\n    data,\n    schema: false,\n    schemaCode: false,\n    schemaValue: false,\n    params: {},\n    it\n  };\n  (0, errors_1.reportError)(cxt, boolError, undefined, overrideAllErrors);\n}","map":{"version":3,"names":["errors_1","require","codegen_1","names_1","boolError","message","topBoolOrEmptySchema","it","gen","schema","validateName","falseSchemaError","$async","return","default","data","assign","_","exports","boolOrEmptySchema","valid","var","overrideAllErrors","cxt","keyword","schemaCode","schemaValue","params","reportError","undefined"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/ajv/lib/compile/validate/boolSchema.ts"],"sourcesContent":["import type {KeywordErrorDefinition, KeywordErrorCxt} from \"../../types\"\nimport type {SchemaCxt} from \"..\"\nimport {reportError} from \"../errors\"\nimport {_, Name} from \"../codegen\"\nimport N from \"../names\"\n\nconst boolError: KeywordErrorDefinition = {\n  message: \"boolean schema is false\",\n}\n\nexport function topBoolOrEmptySchema(it: SchemaCxt): void {\n  const {gen, schema, validateName} = it\n  if (schema === false) {\n    falseSchemaError(it, false)\n  } else if (typeof schema == \"object\" && schema.$async === true) {\n    gen.return(N.data)\n  } else {\n    gen.assign(_`${validateName}.errors`, null)\n    gen.return(true)\n  }\n}\n\nexport function boolOrEmptySchema(it: SchemaCxt, valid: Name): void {\n  const {gen, schema} = it\n  if (schema === false) {\n    gen.var(valid, false) // TODO var\n    falseSchemaError(it)\n  } else {\n    gen.var(valid, true) // TODO var\n  }\n}\n\nfunction falseSchemaError(it: SchemaCxt, overrideAllErrors?: boolean): void {\n  const {gen, data} = it\n  // TODO maybe some other interface should be used for non-keyword validation errors...\n  const cxt: KeywordErrorCxt = {\n    gen,\n    keyword: \"false schema\",\n    data,\n    schema: false,\n    schemaCode: false,\n    schemaValue: false,\n    params: {},\n    it,\n  }\n  reportError(cxt, boolError, undefined, overrideAllErrors)\n}\n"],"mappings":";;;;;;AAEA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,SAAA,GAAAD,OAAA;AACA,MAAAE,OAAA,GAAAF,OAAA;AAEA,MAAMG,SAAS,GAA2B;EACxCC,OAAO,EAAE;CACV;AAED,SAAgBC,oBAAoBA,CAACC,EAAa;EAChD,MAAM;IAACC,GAAG;IAAEC,MAAM;IAAEC;EAAY,CAAC,GAAGH,EAAE;EACtC,IAAIE,MAAM,KAAK,KAAK,EAAE;IACpBE,gBAAgB,CAACJ,EAAE,EAAE,KAAK,CAAC;GAC5B,MAAM,IAAI,OAAOE,MAAM,IAAI,QAAQ,IAAIA,MAAM,CAACG,MAAM,KAAK,IAAI,EAAE;IAC9DJ,GAAG,CAACK,MAAM,CAACV,OAAA,CAAAW,OAAC,CAACC,IAAI,CAAC;GACnB,MAAM;IACLP,GAAG,CAACQ,MAAM,CAAC,IAAAd,SAAA,CAAAe,CAAC,IAAGP,YAAY,SAAS,EAAE,IAAI,CAAC;IAC3CF,GAAG,CAACK,MAAM,CAAC,IAAI,CAAC;;AAEpB;AAVAK,OAAA,CAAAZ,oBAAA,GAAAA,oBAAA;AAYA,SAAgBa,iBAAiBA,CAACZ,EAAa,EAAEa,KAAW;EAC1D,MAAM;IAACZ,GAAG;IAAEC;EAAM,CAAC,GAAGF,EAAE;EACxB,IAAIE,MAAM,KAAK,KAAK,EAAE;IACpBD,GAAG,CAACa,GAAG,CAACD,KAAK,EAAE,KAAK,CAAC,EAAC;IACtBT,gBAAgB,CAACJ,EAAE,CAAC;GACrB,MAAM;IACLC,GAAG,CAACa,GAAG,CAACD,KAAK,EAAE,IAAI,CAAC,EAAC;;AAEzB;;AARAF,OAAA,CAAAC,iBAAA,GAAAA,iBAAA;AAUA,SAASR,gBAAgBA,CAACJ,EAAa,EAAEe,iBAA2B;EAClE,MAAM;IAACd,GAAG;IAAEO;EAAI,CAAC,GAAGR,EAAE;EACtB;EACA,MAAMgB,GAAG,GAAoB;IAC3Bf,GAAG;IACHgB,OAAO,EAAE,cAAc;IACvBT,IAAI;IACJN,MAAM,EAAE,KAAK;IACbgB,UAAU,EAAE,KAAK;IACjBC,WAAW,EAAE,KAAK;IAClBC,MAAM,EAAE,EAAE;IACVpB;GACD;EACD,IAAAP,QAAA,CAAA4B,WAAW,EAACL,GAAG,EAAEnB,SAAS,EAAEyB,SAAS,EAAEP,iBAAiB,CAAC;AAC3D"},"metadata":{},"sourceType":"script","externalDependencies":[]}