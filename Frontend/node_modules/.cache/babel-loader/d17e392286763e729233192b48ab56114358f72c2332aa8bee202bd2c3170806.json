{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n  message: \"property name must be valid\",\n  params: _ref => {\n    let {\n      params\n    } = _ref;\n    return (0, codegen_1._)`{propertyName: ${params.propertyName}}`;\n  }\n};\nconst def = {\n  keyword: \"propertyNames\",\n  type: \"object\",\n  schemaType: [\"object\", \"boolean\"],\n  error,\n  code(cxt) {\n    const {\n      gen,\n      schema,\n      data,\n      it\n    } = cxt;\n    if ((0, util_1.alwaysValidSchema)(it, schema)) return;\n    const valid = gen.name(\"valid\");\n    gen.forIn(\"key\", data, key => {\n      cxt.setParams({\n        propertyName: key\n      });\n      cxt.subschema({\n        keyword: \"propertyNames\",\n        data: key,\n        dataTypes: [\"string\"],\n        propertyName: key,\n        compositeRule: true\n      }, valid);\n      gen.if((0, codegen_1.not)(valid), () => {\n        cxt.error(true);\n        if (!it.allErrors) gen.break();\n      });\n    });\n    cxt.ok(valid);\n  }\n};\nexports.default = def;","map":{"version":3,"names":["codegen_1","require","util_1","error","message","params","_ref","_","propertyName","def","keyword","type","schemaType","code","cxt","gen","schema","data","it","alwaysValidSchema","valid","name","forIn","key","setParams","subschema","dataTypes","compositeRule","if","not","allErrors","break","ok","exports","default"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/ajv/lib/vocabularies/applicator/propertyNames.ts"],"sourcesContent":["import type {\n  CodeKeywordDefinition,\n  ErrorObject,\n  KeywordErrorDefinition,\n  AnySchema,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, not} from \"../../compile/codegen\"\nimport {alwaysValidSchema} from \"../../compile/util\"\n\nexport type PropertyNamesError = ErrorObject<\"propertyNames\", {propertyName: string}, AnySchema>\n\nconst error: KeywordErrorDefinition = {\n  message: \"property name must be valid\",\n  params: ({params}) => _`{propertyName: ${params.propertyName}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"propertyNames\",\n  type: \"object\",\n  schemaType: [\"object\", \"boolean\"],\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, schema, data, it} = cxt\n    if (alwaysValidSchema(it, schema)) return\n    const valid = gen.name(\"valid\")\n\n    gen.forIn(\"key\", data, (key) => {\n      cxt.setParams({propertyName: key})\n      cxt.subschema(\n        {\n          keyword: \"propertyNames\",\n          data: key,\n          dataTypes: [\"string\"],\n          propertyName: key,\n          compositeRule: true,\n        },\n        valid\n      )\n      gen.if(not(valid), () => {\n        cxt.error(true)\n        if (!it.allErrors) gen.break()\n      })\n    })\n\n    cxt.ok(valid)\n  },\n}\n\nexport default def\n"],"mappings":";;;;;AAOA,MAAAA,SAAA,GAAAC,OAAA;AACA,MAAAC,MAAA,GAAAD,OAAA;AAIA,MAAME,KAAK,GAA2B;EACpCC,OAAO,EAAE,6BAA6B;EACtCC,MAAM,EAAEC,IAAA;IAAA,IAAC;MAACD;IAAM,CAAC,GAAAC,IAAA;IAAA,OAAK,IAAAN,SAAA,CAAAO,CAAC,mBAAkBF,MAAM,CAACG,YAAY,GAAG;EAAA;CAChE;AAED,MAAMC,GAAG,GAA0B;EACjCC,OAAO,EAAE,eAAe;EACxBC,IAAI,EAAE,QAAQ;EACdC,UAAU,EAAE,CAAC,QAAQ,EAAE,SAAS,CAAC;EACjCT,KAAK;EACLU,IAAIA,CAACC,GAAe;IAClB,MAAM;MAACC,GAAG;MAAEC,MAAM;MAAEC,IAAI;MAAEC;IAAE,CAAC,GAAGJ,GAAG;IACnC,IAAI,IAAAZ,MAAA,CAAAiB,iBAAiB,EAACD,EAAE,EAAEF,MAAM,CAAC,EAAE;IACnC,MAAMI,KAAK,GAAGL,GAAG,CAACM,IAAI,CAAC,OAAO,CAAC;IAE/BN,GAAG,CAACO,KAAK,CAAC,KAAK,EAAEL,IAAI,EAAGM,GAAG,IAAI;MAC7BT,GAAG,CAACU,SAAS,CAAC;QAAChB,YAAY,EAAEe;MAAG,CAAC,CAAC;MAClCT,GAAG,CAACW,SAAS,CACX;QACEf,OAAO,EAAE,eAAe;QACxBO,IAAI,EAAEM,GAAG;QACTG,SAAS,EAAE,CAAC,QAAQ,CAAC;QACrBlB,YAAY,EAAEe,GAAG;QACjBI,aAAa,EAAE;OAChB,EACDP,KAAK,CACN;MACDL,GAAG,CAACa,EAAE,CAAC,IAAA5B,SAAA,CAAA6B,GAAG,EAACT,KAAK,CAAC,EAAE,MAAK;QACtBN,GAAG,CAACX,KAAK,CAAC,IAAI,CAAC;QACf,IAAI,CAACe,EAAE,CAACY,SAAS,EAAEf,GAAG,CAACgB,KAAK,EAAE;MAChC,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFjB,GAAG,CAACkB,EAAE,CAACZ,KAAK,CAAC;EACf;CACD;AAEDa,OAAA,CAAAC,OAAA,GAAezB,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}