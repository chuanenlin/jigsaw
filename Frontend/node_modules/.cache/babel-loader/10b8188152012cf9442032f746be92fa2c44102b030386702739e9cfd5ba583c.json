{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst dataType_1 = require(\"../../compile/validate/dataType\");\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst equal_1 = require(\"../../runtime/equal\");\nconst error = {\n  message: _ref => {\n    let {\n      params: {\n        i,\n        j\n      }\n    } = _ref;\n    return (0, codegen_1.str)`must NOT have duplicate items (items ## ${j} and ${i} are identical)`;\n  },\n  params: _ref2 => {\n    let {\n      params: {\n        i,\n        j\n      }\n    } = _ref2;\n    return (0, codegen_1._)`{i: ${i}, j: ${j}}`;\n  }\n};\nconst def = {\n  keyword: \"uniqueItems\",\n  type: \"array\",\n  schemaType: \"boolean\",\n  $data: true,\n  error,\n  code(cxt) {\n    const {\n      gen,\n      data,\n      $data,\n      schema,\n      parentSchema,\n      schemaCode,\n      it\n    } = cxt;\n    if (!$data && !schema) return;\n    const valid = gen.let(\"valid\");\n    const itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];\n    cxt.block$data(valid, validateUniqueItems, (0, codegen_1._)`${schemaCode} === false`);\n    cxt.ok(valid);\n    function validateUniqueItems() {\n      const i = gen.let(\"i\", (0, codegen_1._)`${data}.length`);\n      const j = gen.let(\"j\");\n      cxt.setParams({\n        i,\n        j\n      });\n      gen.assign(valid, true);\n      gen.if((0, codegen_1._)`${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j));\n    }\n    function canOptimize() {\n      return itemTypes.length > 0 && !itemTypes.some(t => t === \"object\" || t === \"array\");\n    }\n    function loopN(i, j) {\n      const item = gen.name(\"item\");\n      const wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);\n      const indices = gen.const(\"indices\", (0, codegen_1._)`{}`);\n      gen.for((0, codegen_1._)`;${i}--;`, () => {\n        gen.let(item, (0, codegen_1._)`${data}[${i}]`);\n        gen.if(wrongType, (0, codegen_1._)`continue`);\n        if (itemTypes.length > 1) gen.if((0, codegen_1._)`typeof ${item} == \"string\"`, (0, codegen_1._)`${item} += \"_\"`);\n        gen.if((0, codegen_1._)`typeof ${indices}[${item}] == \"number\"`, () => {\n          gen.assign(j, (0, codegen_1._)`${indices}[${item}]`);\n          cxt.error();\n          gen.assign(valid, false).break();\n        }).code((0, codegen_1._)`${indices}[${item}] = ${i}`);\n      });\n    }\n    function loopN2(i, j) {\n      const eql = (0, util_1.useFunc)(gen, equal_1.default);\n      const outer = gen.name(\"outer\");\n      gen.label(outer).for((0, codegen_1._)`;${i}--;`, () => gen.for((0, codegen_1._)`${j} = ${i}; ${j}--;`, () => gen.if((0, codegen_1._)`${eql}(${data}[${i}], ${data}[${j}])`, () => {\n        cxt.error();\n        gen.assign(valid, false).break(outer);\n      })));\n    }\n  }\n};\nexports.default = def;","map":{"version":3,"names":["dataType_1","require","codegen_1","util_1","equal_1","error","message","_ref","params","i","j","str","_ref2","_","def","keyword","type","schemaType","$data","code","cxt","gen","data","schema","parentSchema","schemaCode","it","valid","let","itemTypes","items","getSchemaTypes","block$data","validateUniqueItems","ok","setParams","assign","if","canOptimize","loopN","loopN2","length","some","t","item","name","wrongType","checkDataTypes","opts","strictNumbers","DataType","Wrong","indices","const","for","break","eql","useFunc","default","outer","label","exports"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/ajv/lib/vocabularies/validation/uniqueItems.ts"],"sourcesContent":["import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {checkDataTypes, getSchemaTypes, DataType} from \"../../compile/validate/dataType\"\nimport {_, str, Name} from \"../../compile/codegen\"\nimport {useFunc} from \"../../compile/util\"\nimport equal from \"../../runtime/equal\"\n\nexport type UniqueItemsError = ErrorObject<\n  \"uniqueItems\",\n  {i: number; j: number},\n  boolean | {$data: string}\n>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {i, j}}) =>\n    str`must NOT have duplicate items (items ## ${j} and ${i} are identical)`,\n  params: ({params: {i, j}}) => _`{i: ${i}, j: ${j}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"uniqueItems\",\n  type: \"array\",\n  schemaType: \"boolean\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, data, $data, schema, parentSchema, schemaCode, it} = cxt\n    if (!$data && !schema) return\n    const valid = gen.let(\"valid\")\n    const itemTypes = parentSchema.items ? getSchemaTypes(parentSchema.items) : []\n    cxt.block$data(valid, validateUniqueItems, _`${schemaCode} === false`)\n    cxt.ok(valid)\n\n    function validateUniqueItems(): void {\n      const i = gen.let(\"i\", _`${data}.length`)\n      const j = gen.let(\"j\")\n      cxt.setParams({i, j})\n      gen.assign(valid, true)\n      gen.if(_`${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j))\n    }\n\n    function canOptimize(): boolean {\n      return itemTypes.length > 0 && !itemTypes.some((t) => t === \"object\" || t === \"array\")\n    }\n\n    function loopN(i: Name, j: Name): void {\n      const item = gen.name(\"item\")\n      const wrongType = checkDataTypes(itemTypes, item, it.opts.strictNumbers, DataType.Wrong)\n      const indices = gen.const(\"indices\", _`{}`)\n      gen.for(_`;${i}--;`, () => {\n        gen.let(item, _`${data}[${i}]`)\n        gen.if(wrongType, _`continue`)\n        if (itemTypes.length > 1) gen.if(_`typeof ${item} == \"string\"`, _`${item} += \"_\"`)\n        gen\n          .if(_`typeof ${indices}[${item}] == \"number\"`, () => {\n            gen.assign(j, _`${indices}[${item}]`)\n            cxt.error()\n            gen.assign(valid, false).break()\n          })\n          .code(_`${indices}[${item}] = ${i}`)\n      })\n    }\n\n    function loopN2(i: Name, j: Name): void {\n      const eql = useFunc(gen, equal)\n      const outer = gen.name(\"outer\")\n      gen.label(outer).for(_`;${i}--;`, () =>\n        gen.for(_`${j} = ${i}; ${j}--;`, () =>\n          gen.if(_`${eql}(${data}[${i}], ${data}[${j}])`, () => {\n            cxt.error()\n            gen.assign(valid, false).break(outer)\n          })\n        )\n      )\n    }\n  },\n}\n\nexport default def\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}