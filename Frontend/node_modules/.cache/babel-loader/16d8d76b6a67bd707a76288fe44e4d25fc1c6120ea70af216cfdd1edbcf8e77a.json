{"ast":null,"code":"// Do not edit this file; automatically generated.\n\n/* eslint-disable */\n;\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define([\"./blockly_compressed.js\"], factory);\n  } else if (typeof exports === 'object') {\n    // Node.js\n    module.exports = factory(require(\"./blockly_compressed.js\"));\n  } else {\n    // Browser\n    var factoryExports = factory(root.Blockly);\n    root.Blockly.JavaScript = factoryExports.javascriptGenerator;\n    root.Blockly.JavaScript.__namespace__ = factoryExports.__namespace__;\n  }\n})(this, function (__parent__) {\n  var $ = __parent__.__namespace__;\n  var module$exports$Blockly$JavaScript = {},\n    module$contents$Blockly$JavaScript_Variables = $.module$build$src$core$variables,\n    module$contents$Blockly$JavaScript_stringUtils = $.module$build$src$core$utils$string,\n    module$contents$Blockly$JavaScript_CodeGenerator = $.CodeGenerator$$module$build$src$core$generator,\n    module$contents$Blockly$JavaScript_inputTypes = $.module$build$src$core$input_types.inputTypes,\n    module$contents$Blockly$JavaScript_Names = $.module$build$src$core$names.Names,\n    module$contents$Blockly$JavaScript_NameType = $.NameType$$module$build$src$core$names;\n  module$exports$Blockly$JavaScript.javascriptGenerator = new $.CodeGenerator$$module$build$src$core$generator(\"JavaScript\");\n  module$exports$Blockly$JavaScript.javascriptGenerator.addReservedWords(\"break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,in,instanceof,new,return,super,switch,this,throw,try,typeof,var,void,while,with,yield,enum,implements,interface,let,package,private,protected,public,static,await,null,true,false,arguments,\" + Object.getOwnPropertyNames(globalThis).join(\",\"));\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ATOMIC = 0;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NEW = 1.1;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER = 1.2;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL = 2;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_INCREMENT = 3;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_DECREMENT = 3;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_BITWISE_NOT = 4.1;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_UNARY_PLUS = 4.2;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_UNARY_NEGATION = 4.3;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_LOGICAL_NOT = 4.4;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_TYPEOF = 4.5;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_VOID = 4.6;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_DELETE = 4.7;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_AWAIT = 4.8;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_EXPONENTIATION = 5;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MULTIPLICATION = 5.1;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_DIVISION = 5.2;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MODULUS = 5.3;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_SUBTRACTION = 6.1;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ADDITION = 6.2;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_BITWISE_SHIFT = 7;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_RELATIONAL = 8;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_IN = 8;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_INSTANCEOF = 8;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_EQUALITY = 9;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_BITWISE_AND = 10;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_BITWISE_XOR = 11;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_BITWISE_OR = 12;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_LOGICAL_AND = 13;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_LOGICAL_OR = 14;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_CONDITIONAL = 15;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ASSIGNMENT = 16;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_YIELD = 17;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_COMMA = 18;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE = 99;\n  module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_OVERRIDES = [[module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER], [module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL], [module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER], [module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL], [module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_LOGICAL_NOT, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_LOGICAL_NOT], [module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MULTIPLICATION, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MULTIPLICATION], [module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ADDITION, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ADDITION], [module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_LOGICAL_AND, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_LOGICAL_AND], [module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_LOGICAL_OR, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_LOGICAL_OR]];\n  module$exports$Blockly$JavaScript.javascriptGenerator.isInitialized = !1;\n  module$exports$Blockly$JavaScript.javascriptGenerator.init = function (a) {\n    Object.getPrototypeOf(this).init.call(this);\n    this.nameDB_ ? this.nameDB_.reset() : this.nameDB_ = new $.module$build$src$core$names.Names(this.RESERVED_WORDS_);\n    this.nameDB_.setVariableMap(a.getVariableMap());\n    this.nameDB_.populateVariables(a);\n    this.nameDB_.populateProcedures(a);\n    const b = [];\n    var c = $.module$build$src$core$variables.allDeveloperVariables(a);\n    for (let d = 0; d < c.length; d++) b.push(this.nameDB_.getName(c[d], $.NameType$$module$build$src$core$names.DEVELOPER_VARIABLE));\n    a = $.module$build$src$core$variables.allUsedVarModels(a);\n    for (c = 0; c < a.length; c++) b.push(this.nameDB_.getName(a[c].getId(), $.NameType$$module$build$src$core$names.VARIABLE));\n    b.length && (this.definitions_.variables = \"var \" + b.join(\", \") + \";\");\n    this.isInitialized = !0;\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.finish = function (a) {\n    const b = Object.values(this.definitions_);\n    a = Object.getPrototypeOf(this).finish.call(this, a);\n    this.isInitialized = !1;\n    this.nameDB_.reset();\n    return b.join(\"\\n\\n\") + \"\\n\\n\\n\" + a;\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.scrubNakedValue = function (a) {\n    return a + \";\\n\";\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.quote_ = function (a) {\n    a = a.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\n/g, \"\\\\\\n\").replace(/'/g, \"\\\\'\");\n    return \"'\" + a + \"'\";\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.multiline_quote_ = function (a) {\n    return a.split(/\\n/g).map(this.quote_).join(\" + '\\\\n' +\\n\");\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.scrub_ = function (a, b, c) {\n    let d = \"\";\n    if (!a.outputConnection || !a.outputConnection.targetConnection) {\n      var e = a.getCommentText();\n      e && (e = $.module$build$src$core$utils$string.wrap(e, this.COMMENT_WRAP - 3), d += this.prefixLines(e + \"\\n\", \"// \"));\n      for (let f = 0; f < a.inputList.length; f++) a.inputList[f].type === $.module$build$src$core$input_types.inputTypes.VALUE && (e = a.inputList[f].connection.targetBlock()) && (e = this.allNestedComments(e)) && (d += this.prefixLines(e, \"// \"));\n    }\n    a = a.nextConnection && a.nextConnection.targetBlock();\n    c = c ? \"\" : this.blockToCode(a);\n    return d + b + c;\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.getAdjusted = function (a, b, c, d, e) {\n    c = c || 0;\n    e = e || this.ORDER_NONE;\n    a.workspace.options.oneBasedIndex && c--;\n    const f = a.workspace.options.oneBasedIndex ? \"1\" : \"0\";\n    let g,\n      h = e;\n    0 < c ? g = h = this.ORDER_ADDITION : 0 > c ? g = h = this.ORDER_SUBTRACTION : d && (g = h = this.ORDER_UNARY_NEGATION);\n    a = this.valueToCode(a, b, h) || f;\n    $.module$build$src$core$utils$string.isNumber(a) ? (a = Number(a) + c, d && (a = -a)) : (0 < c ? a = a + \" + \" + c : 0 > c && (a = a + \" - \" + -c), d && (a = c ? \"-(\" + a + \")\" : \"-\" + a), g = Math.floor(g), e = Math.floor(e), g && e >= g && (a = \"(\" + a + \")\"));\n    return a;\n  };\n  var module$exports$Blockly$JavaScript$colour = {};\n  module$exports$Blockly$JavaScript.javascriptGenerator.colour_picker = function (a) {\n    return [module$exports$Blockly$JavaScript.javascriptGenerator.quote_(a.getFieldValue(\"COLOUR\")), module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ATOMIC];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.colour_random = function (a) {\n    return [module$exports$Blockly$JavaScript.javascriptGenerator.provideFunction_(\"colourRandom\", `\nfunction ${module$exports$Blockly$JavaScript.javascriptGenerator.FUNCTION_NAME_PLACEHOLDER_}() {\n  var num = Math.floor(Math.random() * Math.pow(2, 24));\n  return '#' + ('00000' + num.toString(16)).substr(-6);\n}\n`) + \"()\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.colour_rgb = function (a) {\n    const b = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"RED\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || 0,\n      c = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"GREEN\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || 0;\n    a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"BLUE\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || 0;\n    return [module$exports$Blockly$JavaScript.javascriptGenerator.provideFunction_(\"colourRgb\", `\nfunction ${module$exports$Blockly$JavaScript.javascriptGenerator.FUNCTION_NAME_PLACEHOLDER_}(r, g, b) {\n  r = Math.max(Math.min(Number(r), 100), 0) * 2.55;\n  g = Math.max(Math.min(Number(g), 100), 0) * 2.55;\n  b = Math.max(Math.min(Number(b), 100), 0) * 2.55;\n  r = ('0' + (Math.round(r) || 0).toString(16)).slice(-2);\n  g = ('0' + (Math.round(g) || 0).toString(16)).slice(-2);\n  b = ('0' + (Math.round(b) || 0).toString(16)).slice(-2);\n  return '#' + r + g + b;\n}\n`) + \"(\" + b + \", \" + c + \", \" + a + \")\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.colour_blend = function (a) {\n    const b = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"COLOUR1\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"'#000000'\",\n      c = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"COLOUR2\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"'#000000'\";\n    a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"RATIO\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || .5;\n    return [module$exports$Blockly$JavaScript.javascriptGenerator.provideFunction_(\"colourBlend\", `\nfunction ${module$exports$Blockly$JavaScript.javascriptGenerator.FUNCTION_NAME_PLACEHOLDER_}(c1, c2, ratio) {\n  ratio = Math.max(Math.min(Number(ratio), 1), 0);\n  var r1 = parseInt(c1.substring(1, 3), 16);\n  var g1 = parseInt(c1.substring(3, 5), 16);\n  var b1 = parseInt(c1.substring(5, 7), 16);\n  var r2 = parseInt(c2.substring(1, 3), 16);\n  var g2 = parseInt(c2.substring(3, 5), 16);\n  var b2 = parseInt(c2.substring(5, 7), 16);\n  var r = Math.round(r1 * (1 - ratio) + r2 * ratio);\n  var g = Math.round(g1 * (1 - ratio) + g2 * ratio);\n  var b = Math.round(b1 * (1 - ratio) + b2 * ratio);\n  r = ('0' + (r || 0).toString(16)).slice(-2);\n  g = ('0' + (g || 0).toString(16)).slice(-2);\n  b = ('0' + (b || 0).toString(16)).slice(-2);\n  return '#' + r + g + b;\n}\n`) + \"(\" + b + \", \" + c + \", \" + a + \")\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n  };\n  var module$exports$Blockly$JavaScript$lists = {},\n    module$contents$Blockly$JavaScript$lists_NameType = $.NameType$$module$build$src$core$names;\n  module$exports$Blockly$JavaScript.javascriptGenerator.lists_create_empty = function (a) {\n    return [\"[]\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ATOMIC];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.lists_create_with = function (a) {\n    const b = Array(a.itemCount_);\n    for (let c = 0; c < a.itemCount_; c++) b[c] = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"ADD\" + c, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"null\";\n    return [\"[\" + b.join(\", \") + \"]\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ATOMIC];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.lists_repeat = function (a) {\n    const b = module$exports$Blockly$JavaScript.javascriptGenerator.provideFunction_(\"listsRepeat\", `\nfunction ${module$exports$Blockly$JavaScript.javascriptGenerator.FUNCTION_NAME_PLACEHOLDER_}(value, n) {\n  var array = [];\n  for (var i = 0; i < n; i++) {\n    array[i] = value;\n  }\n  return array;\n}\n`),\n      c = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"ITEM\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"null\";\n    a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"NUM\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"0\";\n    return [b + \"(\" + c + \", \" + a + \")\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.lists_length = function (a) {\n    return [(module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"VALUE\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER) || \"[]\") + \".length\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.lists_isEmpty = function (a) {\n    return [\"!\" + (module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"VALUE\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER) || \"[]\") + \".length\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_LOGICAL_NOT];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.lists_indexOf = function (a) {\n    var b = \"FIRST\" === a.getFieldValue(\"END\") ? \"indexOf\" : \"lastIndexOf\";\n    const c = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"FIND\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"''\";\n    b = (module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"VALUE\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER) || \"[]\") + \".\" + b + \"(\" + c + \")\";\n    return a.workspace.options.oneBasedIndex ? [b + \" + 1\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ADDITION] : [b, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.lists_getIndex = function (a) {\n    const b = a.getFieldValue(\"MODE\") || \"GET\",\n      c = a.getFieldValue(\"WHERE\") || \"FROM_START\";\n    var d = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"VALUE\", \"RANDOM\" === c ? module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE : module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER) || \"[]\";\n    switch (c) {\n      case \"FIRST\":\n        if (\"GET\" === b) return [d + \"[0]\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER];\n        if (\"GET_REMOVE\" === b) return [d + \".shift()\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER];\n        if (\"REMOVE\" === b) return d + \".shift();\\n\";\n        break;\n      case \"LAST\":\n        if (\"GET\" === b) return [d + \".slice(-1)[0]\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER];\n        if (\"GET_REMOVE\" === b) return [d + \".pop()\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER];\n        if (\"REMOVE\" === b) return d + \".pop();\\n\";\n        break;\n      case \"FROM_START\":\n        a = module$exports$Blockly$JavaScript.javascriptGenerator.getAdjusted(a, \"AT\");\n        if (\"GET\" === b) return [d + \"[\" + a + \"]\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER];\n        if (\"GET_REMOVE\" === b) return [d + \".splice(\" + a + \", 1)[0]\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n        if (\"REMOVE\" === b) return d + \".splice(\" + a + \", 1);\\n\";\n        break;\n      case \"FROM_END\":\n        a = module$exports$Blockly$JavaScript.javascriptGenerator.getAdjusted(a, \"AT\", 1, !0);\n        if (\"GET\" === b) return [d + \".slice(\" + a + \")[0]\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n        if (\"GET_REMOVE\" === b) return [d + \".splice(\" + a + \", 1)[0]\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n        if (\"REMOVE\" === b) return d + \".splice(\" + a + \", 1);\";\n        break;\n      case \"RANDOM\":\n        d = module$exports$Blockly$JavaScript.javascriptGenerator.provideFunction_(\"listsGetRandomItem\", `\nfunction ${module$exports$Blockly$JavaScript.javascriptGenerator.FUNCTION_NAME_PLACEHOLDER_}(list, remove) {\n  var x = Math.floor(Math.random() * list.length);\n  if (remove) {\n    return list.splice(x, 1)[0];\n  } else {\n    return list[x];\n  }\n}\n`) + \"(\" + d + \", \" + (\"GET\" !== b) + \")\";\n        if (\"GET\" === b || \"GET_REMOVE\" === b) return [d, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n        if (\"REMOVE\" === b) return d + \";\\n\";\n    }\n    throw Error(\"Unhandled combination (lists_getIndex).\");\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.lists_setIndex = function (a) {\n    function b() {\n      if (c.match(/^\\w+$/)) return \"\";\n      const g = module$exports$Blockly$JavaScript.javascriptGenerator.nameDB_.getDistinctName(\"tmpList\", $.NameType$$module$build$src$core$names.VARIABLE),\n        h = \"var \" + g + \" = \" + c + \";\\n\";\n      c = g;\n      return h;\n    }\n    let c = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"LIST\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER) || \"[]\";\n    const d = a.getFieldValue(\"MODE\") || \"GET\";\n    var e = a.getFieldValue(\"WHERE\") || \"FROM_START\";\n    const f = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"TO\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ASSIGNMENT) || \"null\";\n    switch (e) {\n      case \"FIRST\":\n        if (\"SET\" === d) return c + \"[0] = \" + f + \";\\n\";\n        if (\"INSERT\" === d) return c + \".unshift(\" + f + \");\\n\";\n        break;\n      case \"LAST\":\n        if (\"SET\" === d) return b() + (c + \"[\" + c + \".length - 1] = \" + f + \";\\n\");\n        if (\"INSERT\" === d) return c + \".push(\" + f + \");\\n\";\n        break;\n      case \"FROM_START\":\n        a = module$exports$Blockly$JavaScript.javascriptGenerator.getAdjusted(a, \"AT\");\n        if (\"SET\" === d) return c + \"[\" + a + \"] = \" + f + \";\\n\";\n        if (\"INSERT\" === d) return c + \".splice(\" + a + \", 0, \" + f + \");\\n\";\n        break;\n      case \"FROM_END\":\n        a = module$exports$Blockly$JavaScript.javascriptGenerator.getAdjusted(a, \"AT\", 1, !1, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_SUBTRACTION);\n        e = b();\n        if (\"SET\" === d) return e + (c + \"[\" + c + \".length - \" + a + \"] = \" + f + \";\\n\");\n        if (\"INSERT\" === d) return e + (c + \".splice(\" + c + \".length - \" + a + \", 0, \" + f + \");\\n\");\n        break;\n      case \"RANDOM\":\n        a = b();\n        e = module$exports$Blockly$JavaScript.javascriptGenerator.nameDB_.getDistinctName(\"tmpX\", $.NameType$$module$build$src$core$names.VARIABLE);\n        a += \"var \" + e + \" = Math.floor(Math.random() * \" + c + \".length);\\n\";\n        if (\"SET\" === d) return a + (c + \"[\" + e + \"] = \" + f + \";\\n\");\n        if (\"INSERT\" === d) return a + (c + \".splice(\" + e + \", 0, \" + f + \");\\n\");\n    }\n    throw Error(\"Unhandled combination (lists_setIndex).\");\n  };\n  var module$contents$Blockly$JavaScript$lists_getSubstringIndex = function (a, b, c) {\n    return \"FIRST\" === b ? \"0\" : \"FROM_END\" === b ? a + \".length - 1 - \" + c : \"LAST\" === b ? a + \".length - 1\" : c;\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.lists_getSublist = function (a) {\n    var b = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"LIST\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER) || \"[]\",\n      c = a.getFieldValue(\"WHERE1\"),\n      d = a.getFieldValue(\"WHERE2\");\n    if (\"FIRST\" === c && \"LAST\" === d) b += \".slice(0)\";else if (b.match(/^\\w+$/) || \"FROM_END\" !== c && \"FROM_START\" === d) {\n      switch (c) {\n        case \"FROM_START\":\n          c = module$exports$Blockly$JavaScript.javascriptGenerator.getAdjusted(a, \"AT1\");\n          break;\n        case \"FROM_END\":\n          c = module$exports$Blockly$JavaScript.javascriptGenerator.getAdjusted(a, \"AT1\", 1, !1, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_SUBTRACTION);\n          c = b + \".length - \" + c;\n          break;\n        case \"FIRST\":\n          c = \"0\";\n          break;\n        default:\n          throw Error(\"Unhandled option (lists_getSublist).\");\n      }\n      switch (d) {\n        case \"FROM_START\":\n          d = module$exports$Blockly$JavaScript.javascriptGenerator.getAdjusted(a, \"AT2\", 1);\n          break;\n        case \"FROM_END\":\n          d = module$exports$Blockly$JavaScript.javascriptGenerator.getAdjusted(a, \"AT2\", 0, !1, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_SUBTRACTION);\n          d = b + \".length - \" + d;\n          break;\n        case \"LAST\":\n          d = b + \".length\";\n          break;\n        default:\n          throw Error(\"Unhandled option (lists_getSublist).\");\n      }\n      b = b + \".slice(\" + c + \", \" + d + \")\";\n    } else {\n      const e = module$exports$Blockly$JavaScript.javascriptGenerator.getAdjusted(a, \"AT1\");\n      a = module$exports$Blockly$JavaScript.javascriptGenerator.getAdjusted(a, \"AT2\");\n      const f = {\n        FIRST: \"First\",\n        LAST: \"Last\",\n        FROM_START: \"FromStart\",\n        FROM_END: \"FromEnd\"\n      };\n      b = module$exports$Blockly$JavaScript.javascriptGenerator.provideFunction_(\"subsequence\" + f[c] + f[d], `\nfunction ${module$exports$Blockly$JavaScript.javascriptGenerator.FUNCTION_NAME_PLACEHOLDER_}(sequence${\"FROM_END\" === c || \"FROM_START\" === c ? \", at1\" : \"\"}${\"FROM_END\" === d || \"FROM_START\" === d ? \", at2\" : \"\"}) {\n  var start = ${module$contents$Blockly$JavaScript$lists_getSubstringIndex(\"sequence\", c, \"at1\")};\n  var end = ${module$contents$Blockly$JavaScript$lists_getSubstringIndex(\"sequence\", d, \"at2\")} + 1;\n  return sequence.slice(start, end);\n}\n`) + \"(\" + b + (\"FROM_END\" === c || \"FROM_START\" === c ? \", \" + e : \"\") + (\"FROM_END\" === d || \"FROM_START\" === d ? \", \" + a : \"\") + \")\";\n    }\n    return [b, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.lists_sort = function (a) {\n    const b = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"LIST\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL) || \"[]\",\n      c = \"1\" === a.getFieldValue(\"DIRECTION\") ? 1 : -1;\n    a = a.getFieldValue(\"TYPE\");\n    const d = module$exports$Blockly$JavaScript.javascriptGenerator.provideFunction_(\"listsGetSortCompare\", `\nfunction ${module$exports$Blockly$JavaScript.javascriptGenerator.FUNCTION_NAME_PLACEHOLDER_}(type, direction) {\n  var compareFuncs = {\n    'NUMERIC': function(a, b) {\n        return Number(a) - Number(b); },\n    'TEXT': function(a, b) {\n        return String(a) > String(b) ? 1 : -1; },\n    'IGNORE_CASE': function(a, b) {\n        return String(a).toLowerCase() > String(b).toLowerCase() ? 1 : -1; },\n  };\n  var compare = compareFuncs[type];\n  return function(a, b) { return compare(a, b) * direction; };\n}\n      `);\n    return [b + \".slice().sort(\" + d + '(\"' + a + '\", ' + c + \"))\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.lists_split = function (a) {\n    let b = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"INPUT\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER);\n    const c = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"DELIM\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"''\";\n    a = a.getFieldValue(\"MODE\");\n    if (\"SPLIT\" === a) b || (b = \"''\"), a = \"split\";else if (\"JOIN\" === a) b || (b = \"[]\"), a = \"join\";else throw Error(\"Unknown mode: \" + a);\n    return [b + \".\" + a + \"(\" + c + \")\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.lists_reverse = function (a) {\n    return [(module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"LIST\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL) || \"[]\") + \".slice().reverse()\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n  };\n  var module$exports$Blockly$JavaScript$logic = {};\n  module$exports$Blockly$JavaScript.javascriptGenerator.controls_if = function (a) {\n    var b = 0;\n    let c = \"\";\n    module$exports$Blockly$JavaScript.javascriptGenerator.STATEMENT_PREFIX && (c += module$exports$Blockly$JavaScript.javascriptGenerator.injectId(module$exports$Blockly$JavaScript.javascriptGenerator.STATEMENT_PREFIX, a));\n    do {\n      const d = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"IF\" + b, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"false\";\n      let e = module$exports$Blockly$JavaScript.javascriptGenerator.statementToCode(a, \"DO\" + b);\n      module$exports$Blockly$JavaScript.javascriptGenerator.STATEMENT_SUFFIX && (e = module$exports$Blockly$JavaScript.javascriptGenerator.prefixLines(module$exports$Blockly$JavaScript.javascriptGenerator.injectId(module$exports$Blockly$JavaScript.javascriptGenerator.STATEMENT_SUFFIX, a), module$exports$Blockly$JavaScript.javascriptGenerator.INDENT) + e);\n      c += (0 < b ? \" else \" : \"\") + \"if (\" + d + \") {\\n\" + e + \"}\";\n      b++;\n    } while (a.getInput(\"IF\" + b));\n    if (a.getInput(\"ELSE\") || module$exports$Blockly$JavaScript.javascriptGenerator.STATEMENT_SUFFIX) b = module$exports$Blockly$JavaScript.javascriptGenerator.statementToCode(a, \"ELSE\"), module$exports$Blockly$JavaScript.javascriptGenerator.STATEMENT_SUFFIX && (b = module$exports$Blockly$JavaScript.javascriptGenerator.prefixLines(module$exports$Blockly$JavaScript.javascriptGenerator.injectId(module$exports$Blockly$JavaScript.javascriptGenerator.STATEMENT_SUFFIX, a), module$exports$Blockly$JavaScript.javascriptGenerator.INDENT) + b), c += \" else {\\n\" + b + \"}\";\n    return c + \"\\n\";\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.controls_ifelse = module$exports$Blockly$JavaScript.javascriptGenerator.controls_if;\n  module$exports$Blockly$JavaScript.javascriptGenerator.logic_compare = function (a) {\n    const b = {\n        EQ: \"==\",\n        NEQ: \"!=\",\n        LT: \"<\",\n        LTE: \"<=\",\n        GT: \">\",\n        GTE: \">=\"\n      }[a.getFieldValue(\"OP\")],\n      c = \"==\" === b || \"!=\" === b ? module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_EQUALITY : module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_RELATIONAL,\n      d = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"A\", c) || \"0\";\n    a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"B\", c) || \"0\";\n    return [d + \" \" + b + \" \" + a, c];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.logic_operation = function (a) {\n    const b = \"AND\" === a.getFieldValue(\"OP\") ? \"&&\" : \"||\",\n      c = \"&&\" === b ? module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_LOGICAL_AND : module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_LOGICAL_OR;\n    let d = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"A\", c);\n    a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"B\", c);\n    if (d || a) {\n      const e = \"&&\" === b ? \"true\" : \"false\";\n      d || (d = e);\n      a || (a = e);\n    } else a = d = \"false\";\n    return [d + \" \" + b + \" \" + a, c];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.logic_negate = function (a) {\n    const b = module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_LOGICAL_NOT;\n    return [\"!\" + (module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"BOOL\", b) || \"true\"), b];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.logic_boolean = function (a) {\n    return [\"TRUE\" === a.getFieldValue(\"BOOL\") ? \"true\" : \"false\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ATOMIC];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.logic_null = function (a) {\n    return [\"null\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ATOMIC];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.logic_ternary = function (a) {\n    const b = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"IF\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_CONDITIONAL) || \"false\",\n      c = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"THEN\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_CONDITIONAL) || \"null\";\n    a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"ELSE\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_CONDITIONAL) || \"null\";\n    return [b + \" ? \" + c + \" : \" + a, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_CONDITIONAL];\n  };\n  var module$exports$Blockly$JavaScript$loops = {},\n    module$contents$Blockly$JavaScript$loops_stringUtils = $.module$build$src$core$utils$string,\n    module$contents$Blockly$JavaScript$loops_NameType = $.NameType$$module$build$src$core$names;\n  module$exports$Blockly$JavaScript.javascriptGenerator.controls_repeat_ext = function (a) {\n    let b;\n    b = a.getField(\"TIMES\") ? String(Number(a.getFieldValue(\"TIMES\"))) : module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"TIMES\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ASSIGNMENT) || \"0\";\n    let c = module$exports$Blockly$JavaScript.javascriptGenerator.statementToCode(a, \"DO\");\n    c = module$exports$Blockly$JavaScript.javascriptGenerator.addLoopTrap(c, a);\n    a = \"\";\n    const d = module$exports$Blockly$JavaScript.javascriptGenerator.nameDB_.getDistinctName(\"count\", $.NameType$$module$build$src$core$names.VARIABLE);\n    let e = b;\n    b.match(/^\\w+$/) || $.module$build$src$core$utils$string.isNumber(b) || (e = module$exports$Blockly$JavaScript.javascriptGenerator.nameDB_.getDistinctName(\"repeat_end\", $.NameType$$module$build$src$core$names.VARIABLE), a += \"var \" + e + \" = \" + b + \";\\n\");\n    return a + (\"for (var \" + d + \" = 0; \" + d + \" < \" + e + \"; \" + d + \"++) {\\n\" + c + \"}\\n\");\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.controls_repeat = module$exports$Blockly$JavaScript.javascriptGenerator.controls_repeat_ext;\n  module$exports$Blockly$JavaScript.javascriptGenerator.controls_whileUntil = function (a) {\n    const b = \"UNTIL\" === a.getFieldValue(\"MODE\");\n    let c = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"BOOL\", b ? module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_LOGICAL_NOT : module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"false\",\n      d = module$exports$Blockly$JavaScript.javascriptGenerator.statementToCode(a, \"DO\");\n    d = module$exports$Blockly$JavaScript.javascriptGenerator.addLoopTrap(d, a);\n    b && (c = \"!\" + c);\n    return \"while (\" + c + \") {\\n\" + d + \"}\\n\";\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.controls_for = function (a) {\n    var b = module$exports$Blockly$JavaScript.javascriptGenerator.nameDB_.getName(a.getFieldValue(\"VAR\"), $.NameType$$module$build$src$core$names.VARIABLE),\n      c = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"FROM\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ASSIGNMENT) || \"0\",\n      d = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"TO\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ASSIGNMENT) || \"0\";\n    const e = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"BY\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ASSIGNMENT) || \"1\";\n    let f = module$exports$Blockly$JavaScript.javascriptGenerator.statementToCode(a, \"DO\");\n    f = module$exports$Blockly$JavaScript.javascriptGenerator.addLoopTrap(f, a);\n    if ($.module$build$src$core$utils$string.isNumber(c) && $.module$build$src$core$utils$string.isNumber(d) && $.module$build$src$core$utils$string.isNumber(e)) {\n      var g = Number(c) <= Number(d);\n      a = \"for (\" + b + \" = \" + c + \"; \" + b + (g ? \" <= \" : \" >= \") + d + \"; \" + b;\n      b = Math.abs(Number(e));\n      a = 1 === b ? a + (g ? \"++\" : \"--\") : a + ((g ? \" += \" : \" -= \") + b);\n      a += \") {\\n\" + f + \"}\\n\";\n    } else a = \"\", g = c, c.match(/^\\w+$/) || $.module$build$src$core$utils$string.isNumber(c) || (g = module$exports$Blockly$JavaScript.javascriptGenerator.nameDB_.getDistinctName(b + \"_start\", $.NameType$$module$build$src$core$names.VARIABLE), a += \"var \" + g + \" = \" + c + \";\\n\"), c = d, d.match(/^\\w+$/) || $.module$build$src$core$utils$string.isNumber(d) || (c = module$exports$Blockly$JavaScript.javascriptGenerator.nameDB_.getDistinctName(b + \"_end\", $.NameType$$module$build$src$core$names.VARIABLE), a += \"var \" + c + \" = \" + d + \";\\n\"), d = module$exports$Blockly$JavaScript.javascriptGenerator.nameDB_.getDistinctName(b + \"_inc\", $.NameType$$module$build$src$core$names.VARIABLE), a += \"var \" + d + \" = \", a = $.module$build$src$core$utils$string.isNumber(e) ? a + (Math.abs(e) + \";\\n\") : a + (\"Math.abs(\" + e + \");\\n\"), a += \"if (\" + g + \" > \" + c + \") {\\n\", a += module$exports$Blockly$JavaScript.javascriptGenerator.INDENT + d + \" = -\" + d + \";\\n\", a = a + \"}\\nfor (\" + (b + \" = \" + g + \"; \" + d + \" >= 0 ? \" + b + \" <= \" + c + \" : \" + b + \" >= \" + c + \"; \" + b + \" += \" + d + \") {\\n\" + f + \"}\\n\");\n    return a;\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.controls_forEach = function (a) {\n    const b = module$exports$Blockly$JavaScript.javascriptGenerator.nameDB_.getName(a.getFieldValue(\"VAR\"), $.NameType$$module$build$src$core$names.VARIABLE);\n    var c = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"LIST\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ASSIGNMENT) || \"[]\";\n    let d = module$exports$Blockly$JavaScript.javascriptGenerator.statementToCode(a, \"DO\");\n    d = module$exports$Blockly$JavaScript.javascriptGenerator.addLoopTrap(d, a);\n    a = \"\";\n    let e = c;\n    c.match(/^\\w+$/) || (e = module$exports$Blockly$JavaScript.javascriptGenerator.nameDB_.getDistinctName(b + \"_list\", $.NameType$$module$build$src$core$names.VARIABLE), a += \"var \" + e + \" = \" + c + \";\\n\");\n    c = module$exports$Blockly$JavaScript.javascriptGenerator.nameDB_.getDistinctName(b + \"_index\", $.NameType$$module$build$src$core$names.VARIABLE);\n    d = module$exports$Blockly$JavaScript.javascriptGenerator.INDENT + b + \" = \" + e + \"[\" + c + \"];\\n\" + d;\n    return a + (\"for (var \" + c + \" in \" + e + \") {\\n\" + d + \"}\\n\");\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.controls_flow_statements = function (a) {\n    let b = \"\";\n    module$exports$Blockly$JavaScript.javascriptGenerator.STATEMENT_PREFIX && (b += module$exports$Blockly$JavaScript.javascriptGenerator.injectId(module$exports$Blockly$JavaScript.javascriptGenerator.STATEMENT_PREFIX, a));\n    module$exports$Blockly$JavaScript.javascriptGenerator.STATEMENT_SUFFIX && (b += module$exports$Blockly$JavaScript.javascriptGenerator.injectId(module$exports$Blockly$JavaScript.javascriptGenerator.STATEMENT_SUFFIX, a));\n    if (module$exports$Blockly$JavaScript.javascriptGenerator.STATEMENT_PREFIX) {\n      const c = a.getSurroundLoop();\n      c && !c.suppressPrefixSuffix && (b += module$exports$Blockly$JavaScript.javascriptGenerator.injectId(module$exports$Blockly$JavaScript.javascriptGenerator.STATEMENT_PREFIX, c));\n    }\n    switch (a.getFieldValue(\"FLOW\")) {\n      case \"BREAK\":\n        return b + \"break;\\n\";\n      case \"CONTINUE\":\n        return b + \"continue;\\n\";\n    }\n    throw Error(\"Unknown flow statement.\");\n  };\n  var module$exports$Blockly$JavaScript$math = {},\n    module$contents$Blockly$JavaScript$math_NameType = $.NameType$$module$build$src$core$names;\n  module$exports$Blockly$JavaScript.javascriptGenerator.math_number = function (a) {\n    a = Number(a.getFieldValue(\"NUM\"));\n    return [a, 0 <= a ? module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ATOMIC : module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_UNARY_NEGATION];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.math_arithmetic = function (a) {\n    var b = {\n      ADD: [\" + \", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ADDITION],\n      MINUS: [\" - \", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_SUBTRACTION],\n      MULTIPLY: [\" * \", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MULTIPLICATION],\n      DIVIDE: [\" / \", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_DIVISION],\n      POWER: [null, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE]\n    }[a.getFieldValue(\"OP\")];\n    const c = b[0];\n    b = b[1];\n    const d = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"A\", b) || \"0\";\n    a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"B\", b) || \"0\";\n    return c ? [d + c + a, b] : [\"Math.pow(\" + d + \", \" + a + \")\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.math_single = function (a) {\n    const b = a.getFieldValue(\"OP\");\n    let c;\n    if (\"NEG\" === b) return a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"NUM\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_UNARY_NEGATION) || \"0\", \"-\" === a[0] && (a = \" \" + a), [\"-\" + a, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_UNARY_NEGATION];\n    a = \"SIN\" === b || \"COS\" === b || \"TAN\" === b ? module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"NUM\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_DIVISION) || \"0\" : module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"NUM\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"0\";\n    switch (b) {\n      case \"ABS\":\n        c = \"Math.abs(\" + a + \")\";\n        break;\n      case \"ROOT\":\n        c = \"Math.sqrt(\" + a + \")\";\n        break;\n      case \"LN\":\n        c = \"Math.log(\" + a + \")\";\n        break;\n      case \"EXP\":\n        c = \"Math.exp(\" + a + \")\";\n        break;\n      case \"POW10\":\n        c = \"Math.pow(10,\" + a + \")\";\n        break;\n      case \"ROUND\":\n        c = \"Math.round(\" + a + \")\";\n        break;\n      case \"ROUNDUP\":\n        c = \"Math.ceil(\" + a + \")\";\n        break;\n      case \"ROUNDDOWN\":\n        c = \"Math.floor(\" + a + \")\";\n        break;\n      case \"SIN\":\n        c = \"Math.sin(\" + a + \" / 180 * Math.PI)\";\n        break;\n      case \"COS\":\n        c = \"Math.cos(\" + a + \" / 180 * Math.PI)\";\n        break;\n      case \"TAN\":\n        c = \"Math.tan(\" + a + \" / 180 * Math.PI)\";\n    }\n    if (c) return [c, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n    switch (b) {\n      case \"LOG10\":\n        c = \"Math.log(\" + a + \") / Math.log(10)\";\n        break;\n      case \"ASIN\":\n        c = \"Math.asin(\" + a + \") / Math.PI * 180\";\n        break;\n      case \"ACOS\":\n        c = \"Math.acos(\" + a + \") / Math.PI * 180\";\n        break;\n      case \"ATAN\":\n        c = \"Math.atan(\" + a + \") / Math.PI * 180\";\n        break;\n      default:\n        throw Error(\"Unknown math operator: \" + b);\n    }\n    return [c, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_DIVISION];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.math_constant = function (a) {\n    return {\n      PI: [\"Math.PI\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER],\n      E: [\"Math.E\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER],\n      GOLDEN_RATIO: [\"(1 + Math.sqrt(5)) / 2\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_DIVISION],\n      SQRT2: [\"Math.SQRT2\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER],\n      SQRT1_2: [\"Math.SQRT1_2\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER],\n      INFINITY: [\"Infinity\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ATOMIC]\n    }[a.getFieldValue(\"CONSTANT\")];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.math_number_property = function (a) {\n    var b = {\n      EVEN: [\" % 2 === 0\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MODULUS, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_EQUALITY],\n      ODD: [\" % 2 === 1\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MODULUS, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_EQUALITY],\n      WHOLE: [\" % 1 === 0\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MODULUS, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_EQUALITY],\n      POSITIVE: [\" > 0\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_RELATIONAL, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_RELATIONAL],\n      NEGATIVE: [\" < 0\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_RELATIONAL, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_RELATIONAL],\n      DIVISIBLE_BY: [null, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MODULUS, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_EQUALITY],\n      PRIME: [null, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL]\n    };\n    const c = a.getFieldValue(\"PROPERTY\"),\n      [d, e, f] = b[c];\n    b = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"NUMBER_TO_CHECK\", e) || \"0\";\n    \"PRIME\" === c ? a = module$exports$Blockly$JavaScript.javascriptGenerator.provideFunction_(\"mathIsPrime\", `\nfunction ${module$exports$Blockly$JavaScript.javascriptGenerator.FUNCTION_NAME_PLACEHOLDER_}(n) {\n  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  if (n == 2 || n == 3) {\n    return true;\n  }\n  // False if n is NaN, negative, is 1, or not whole.\n  // And false if n is divisible by 2 or 3.\n  if (isNaN(n) || n <= 1 || n % 1 !== 0 || n % 2 === 0 || n % 3 === 0) {\n    return false;\n  }\n  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {\n    if (n % (x - 1) === 0 || n % (x + 1) === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n`) + \"(\" + b + \")\" : \"DIVISIBLE_BY\" === c ? (a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"DIVISOR\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MODULUS) || \"0\", a = b + \" % \" + a + \" === 0\") : a = b + d;\n    return [a, f];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.math_change = function (a) {\n    const b = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"DELTA\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ADDITION) || \"0\";\n    a = module$exports$Blockly$JavaScript.javascriptGenerator.nameDB_.getName(a.getFieldValue(\"VAR\"), $.NameType$$module$build$src$core$names.VARIABLE);\n    return a + \" = (typeof \" + a + \" === 'number' ? \" + a + \" : 0) + \" + b + \";\\n\";\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.math_round = module$exports$Blockly$JavaScript.javascriptGenerator.math_single;\n  module$exports$Blockly$JavaScript.javascriptGenerator.math_trig = module$exports$Blockly$JavaScript.javascriptGenerator.math_single;\n  module$exports$Blockly$JavaScript.javascriptGenerator.math_on_list = function (a) {\n    var b = a.getFieldValue(\"OP\");\n    switch (b) {\n      case \"SUM\":\n        a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"LIST\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER) || \"[]\";\n        a += \".reduce(function(x, y) {return x + y;}, 0)\";\n        break;\n      case \"MIN\":\n        a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"LIST\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"[]\";\n        a = \"Math.min.apply(null, \" + a + \")\";\n        break;\n      case \"MAX\":\n        a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"LIST\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"[]\";\n        a = \"Math.max.apply(null, \" + a + \")\";\n        break;\n      case \"AVERAGE\":\n        b = module$exports$Blockly$JavaScript.javascriptGenerator.provideFunction_(\"mathMean\", `\nfunction ${module$exports$Blockly$JavaScript.javascriptGenerator.FUNCTION_NAME_PLACEHOLDER_}(myList) {\n  return myList.reduce(function(x, y) {return x + y;}, 0) / myList.length;\n}\n`);\n        a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"LIST\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"[]\";\n        a = b + \"(\" + a + \")\";\n        break;\n      case \"MEDIAN\":\n        b = module$exports$Blockly$JavaScript.javascriptGenerator.provideFunction_(\"mathMedian\", `\nfunction ${module$exports$Blockly$JavaScript.javascriptGenerator.FUNCTION_NAME_PLACEHOLDER_}(myList) {\n  var localList = myList.filter(function (x) {return typeof x === 'number';});\n  if (!localList.length) return null;\n  localList.sort(function(a, b) {return b - a;});\n  if (localList.length % 2 === 0) {\n    return (localList[localList.length / 2 - 1] + localList[localList.length / 2]) / 2;\n  } else {\n    return localList[(localList.length - 1) / 2];\n  }\n}\n`);\n        a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"LIST\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"[]\";\n        a = b + \"(\" + a + \")\";\n        break;\n      case \"MODE\":\n        b = module$exports$Blockly$JavaScript.javascriptGenerator.provideFunction_(\"mathModes\", `\nfunction ${module$exports$Blockly$JavaScript.javascriptGenerator.FUNCTION_NAME_PLACEHOLDER_}(values) {\n  var modes = [];\n  var counts = [];\n  var maxCount = 0;\n  for (var i = 0; i < values.length; i++) {\n    var value = values[i];\n    var found = false;\n    var thisCount;\n    for (var j = 0; j < counts.length; j++) {\n      if (counts[j][0] === value) {\n        thisCount = ++counts[j][1];\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      counts.push([value, 1]);\n      thisCount = 1;\n    }\n    maxCount = Math.max(thisCount, maxCount);\n  }\n  for (var j = 0; j < counts.length; j++) {\n    if (counts[j][1] === maxCount) {\n        modes.push(counts[j][0]);\n    }\n  }\n  return modes;\n}\n`);\n        a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"LIST\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"[]\";\n        a = b + \"(\" + a + \")\";\n        break;\n      case \"STD_DEV\":\n        b = module$exports$Blockly$JavaScript.javascriptGenerator.provideFunction_(\"mathStandardDeviation\", `\nfunction ${module$exports$Blockly$JavaScript.javascriptGenerator.FUNCTION_NAME_PLACEHOLDER_}(numbers) {\n  var n = numbers.length;\n  if (!n) return null;\n  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;\n  var variance = 0;\n  for (var j = 0; j < n; j++) {\n    variance += Math.pow(numbers[j] - mean, 2);\n  }\n  variance = variance / n;\n  return Math.sqrt(variance);\n}\n`);\n        a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"LIST\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"[]\";\n        a = b + \"(\" + a + \")\";\n        break;\n      case \"RANDOM\":\n        b = module$exports$Blockly$JavaScript.javascriptGenerator.provideFunction_(\"mathRandomList\", `\nfunction ${module$exports$Blockly$JavaScript.javascriptGenerator.FUNCTION_NAME_PLACEHOLDER_}(list) {\n  var x = Math.floor(Math.random() * list.length);\n  return list[x];\n}\n`);\n        a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"LIST\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"[]\";\n        a = b + \"(\" + a + \")\";\n        break;\n      default:\n        throw Error(\"Unknown operator: \" + b);\n    }\n    return [a, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.math_modulo = function (a) {\n    const b = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"DIVIDEND\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MODULUS) || \"0\";\n    a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"DIVISOR\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MODULUS) || \"0\";\n    return [b + \" % \" + a, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MODULUS];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.math_constrain = function (a) {\n    const b = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"VALUE\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"0\",\n      c = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"LOW\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"0\";\n    a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"HIGH\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"Infinity\";\n    return [\"Math.min(Math.max(\" + b + \", \" + c + \"), \" + a + \")\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.math_random_int = function (a) {\n    const b = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"FROM\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"0\";\n    a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"TO\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"0\";\n    return [module$exports$Blockly$JavaScript.javascriptGenerator.provideFunction_(\"mathRandomInt\", `\nfunction ${module$exports$Blockly$JavaScript.javascriptGenerator.FUNCTION_NAME_PLACEHOLDER_}(a, b) {\n  if (a > b) {\n    // Swap a and b to ensure a is smaller.\n    var c = a;\n    a = b;\n    b = c;\n  }\n  return Math.floor(Math.random() * (b - a + 1) + a);\n}\n`) + \"(\" + b + \", \" + a + \")\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.math_random_float = function (a) {\n    return [\"Math.random()\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.math_atan2 = function (a) {\n    const b = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"X\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"0\";\n    return [\"Math.atan2(\" + (module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"Y\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"0\") + \", \" + b + \") / Math.PI * 180\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_DIVISION];\n  };\n  var module$exports$Blockly$JavaScript$procedures = {},\n    module$contents$Blockly$JavaScript$procedures_NameType = $.NameType$$module$build$src$core$names;\n  module$exports$Blockly$JavaScript.javascriptGenerator.procedures_defreturn = function (a) {\n    const b = module$exports$Blockly$JavaScript.javascriptGenerator.nameDB_.getName(a.getFieldValue(\"NAME\"), $.NameType$$module$build$src$core$names.PROCEDURE);\n    var c = \"\";\n    module$exports$Blockly$JavaScript.javascriptGenerator.STATEMENT_PREFIX && (c += module$exports$Blockly$JavaScript.javascriptGenerator.injectId(module$exports$Blockly$JavaScript.javascriptGenerator.STATEMENT_PREFIX, a));\n    module$exports$Blockly$JavaScript.javascriptGenerator.STATEMENT_SUFFIX && (c += module$exports$Blockly$JavaScript.javascriptGenerator.injectId(module$exports$Blockly$JavaScript.javascriptGenerator.STATEMENT_SUFFIX, a));\n    c && (c = module$exports$Blockly$JavaScript.javascriptGenerator.prefixLines(c, module$exports$Blockly$JavaScript.javascriptGenerator.INDENT));\n    let d = \"\";\n    module$exports$Blockly$JavaScript.javascriptGenerator.INFINITE_LOOP_TRAP && (d = module$exports$Blockly$JavaScript.javascriptGenerator.prefixLines(module$exports$Blockly$JavaScript.javascriptGenerator.injectId(module$exports$Blockly$JavaScript.javascriptGenerator.INFINITE_LOOP_TRAP, a), module$exports$Blockly$JavaScript.javascriptGenerator.INDENT));\n    const e = module$exports$Blockly$JavaScript.javascriptGenerator.statementToCode(a, \"STACK\");\n    let f = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"RETURN\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"\",\n      g = \"\";\n    e && f && (g = c);\n    f && (f = module$exports$Blockly$JavaScript.javascriptGenerator.INDENT + \"return \" + f + \";\\n\");\n    const h = [],\n      k = a.getVars();\n    for (let l = 0; l < k.length; l++) h[l] = module$exports$Blockly$JavaScript.javascriptGenerator.nameDB_.getName(k[l], $.NameType$$module$build$src$core$names.VARIABLE);\n    c = \"function \" + b + \"(\" + h.join(\", \") + \") {\\n\" + c + d + e + g + f + \"}\";\n    c = module$exports$Blockly$JavaScript.javascriptGenerator.scrub_(a, c);\n    module$exports$Blockly$JavaScript.javascriptGenerator.definitions_[\"%\" + b] = c;\n    return null;\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.procedures_defnoreturn = module$exports$Blockly$JavaScript.javascriptGenerator.procedures_defreturn;\n  module$exports$Blockly$JavaScript.javascriptGenerator.procedures_callreturn = function (a) {\n    const b = module$exports$Blockly$JavaScript.javascriptGenerator.nameDB_.getName(a.getFieldValue(\"NAME\"), $.NameType$$module$build$src$core$names.PROCEDURE),\n      c = [],\n      d = a.getVars();\n    for (let e = 0; e < d.length; e++) c[e] = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"ARG\" + e, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"null\";\n    return [b + \"(\" + c.join(\", \") + \")\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.procedures_callnoreturn = function (a) {\n    return module$exports$Blockly$JavaScript.javascriptGenerator.procedures_callreturn(a)[0] + \";\\n\";\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.procedures_ifreturn = function (a) {\n    let b = \"if (\" + (module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"CONDITION\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"false\") + \") {\\n\";\n    module$exports$Blockly$JavaScript.javascriptGenerator.STATEMENT_SUFFIX && (b += module$exports$Blockly$JavaScript.javascriptGenerator.prefixLines(module$exports$Blockly$JavaScript.javascriptGenerator.injectId(module$exports$Blockly$JavaScript.javascriptGenerator.STATEMENT_SUFFIX, a), module$exports$Blockly$JavaScript.javascriptGenerator.INDENT));\n    a.hasReturnValue_ ? (a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"VALUE\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"null\", b += module$exports$Blockly$JavaScript.javascriptGenerator.INDENT + \"return \" + a + \";\\n\") : b += module$exports$Blockly$JavaScript.javascriptGenerator.INDENT + \"return;\\n\";\n    return b + \"}\\n\";\n  };\n  var module$exports$Blockly$JavaScript$texts = {},\n    module$contents$Blockly$JavaScript$texts_NameType = $.NameType$$module$build$src$core$names,\n    module$contents$Blockly$JavaScript$texts_strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/,\n    module$contents$Blockly$JavaScript$texts_forceString = function (a) {\n      return module$contents$Blockly$JavaScript$texts_strRegExp.test(a) ? [a, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ATOMIC] : [\"String(\" + a + \")\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n    },\n    module$contents$Blockly$JavaScript$texts_getSubstringIndex = function (a, b, c) {\n      return \"FIRST\" === b ? \"0\" : \"FROM_END\" === b ? a + \".length - 1 - \" + c : \"LAST\" === b ? a + \".length - 1\" : c;\n    };\n  module$exports$Blockly$JavaScript.javascriptGenerator.text = function (a) {\n    return [module$exports$Blockly$JavaScript.javascriptGenerator.quote_(a.getFieldValue(\"TEXT\")), module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ATOMIC];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.text_multiline = function (a) {\n    a = module$exports$Blockly$JavaScript.javascriptGenerator.multiline_quote_(a.getFieldValue(\"TEXT\"));\n    const b = -1 !== a.indexOf(\"+\") ? module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ADDITION : module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ATOMIC;\n    return [a, b];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.text_join = function (a) {\n    switch (a.itemCount_) {\n      case 0:\n        return [\"''\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ATOMIC];\n      case 1:\n        return a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"ADD0\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"''\", module$contents$Blockly$JavaScript$texts_forceString(a);\n      case 2:\n        var b = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"ADD0\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"''\";\n        a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"ADD1\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"''\";\n        return [module$contents$Blockly$JavaScript$texts_forceString(b)[0] + \" + \" + module$contents$Blockly$JavaScript$texts_forceString(a)[0], module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ADDITION];\n      default:\n        b = Array(a.itemCount_);\n        for (let c = 0; c < a.itemCount_; c++) b[c] = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"ADD\" + c, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"''\";\n        return [\"[\" + b.join(\",\") + \"].join('')\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n    }\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.text_append = function (a) {\n    const b = module$exports$Blockly$JavaScript.javascriptGenerator.nameDB_.getName(a.getFieldValue(\"VAR\"), $.NameType$$module$build$src$core$names.VARIABLE);\n    a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"TEXT\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"''\";\n    return b + \" += \" + module$contents$Blockly$JavaScript$texts_forceString(a)[0] + \";\\n\";\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.text_length = function (a) {\n    return [(module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"VALUE\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER) || \"''\") + \".length\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.text_isEmpty = function (a) {\n    return [\"!\" + (module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"VALUE\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER) || \"''\") + \".length\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_LOGICAL_NOT];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.text_indexOf = function (a) {\n    var b = \"FIRST\" === a.getFieldValue(\"END\") ? \"indexOf\" : \"lastIndexOf\";\n    const c = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"FIND\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"''\";\n    b = (module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"VALUE\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER) || \"''\") + \".\" + b + \"(\" + c + \")\";\n    return a.workspace.options.oneBasedIndex ? [b + \" + 1\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ADDITION] : [b, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.text_charAt = function (a) {\n    const b = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n      c = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"VALUE\", \"RANDOM\" === b ? module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE : module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER) || \"''\";\n    switch (b) {\n      case \"FIRST\":\n        return [c + \".charAt(0)\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n      case \"LAST\":\n        return [c + \".slice(-1)\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n      case \"FROM_START\":\n        return a = module$exports$Blockly$JavaScript.javascriptGenerator.getAdjusted(a, \"AT\"), [c + \".charAt(\" + a + \")\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n      case \"FROM_END\":\n        return a = module$exports$Blockly$JavaScript.javascriptGenerator.getAdjusted(a, \"AT\", 1, !0), [c + \".slice(\" + a + \").charAt(0)\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n      case \"RANDOM\":\n        return [module$exports$Blockly$JavaScript.javascriptGenerator.provideFunction_(\"textRandomLetter\", `\nfunction ${module$exports$Blockly$JavaScript.javascriptGenerator.FUNCTION_NAME_PLACEHOLDER_}(text) {\n  var x = Math.floor(Math.random() * text.length);\n  return text[x];\n}\n`) + \"(\" + c + \")\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n    }\n    throw Error(\"Unhandled option (text_charAt).\");\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.text_getSubstring = function (a) {\n    var b = a.getFieldValue(\"WHERE1\"),\n      c = a.getFieldValue(\"WHERE2\"),\n      d = \"FROM_END\" !== b && \"LAST\" !== b && \"FROM_END\" !== c && \"LAST\" !== c,\n      e = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"STRING\", d ? module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER : module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"''\";\n    if (\"FIRST\" === b && \"LAST\" === c) return [e, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE];\n    if (e.match(/^'?\\w+'?$/) || d) {\n      switch (b) {\n        case \"FROM_START\":\n          b = module$exports$Blockly$JavaScript.javascriptGenerator.getAdjusted(a, \"AT1\");\n          break;\n        case \"FROM_END\":\n          b = module$exports$Blockly$JavaScript.javascriptGenerator.getAdjusted(a, \"AT1\", 1, !1, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_SUBTRACTION);\n          b = e + \".length - \" + b;\n          break;\n        case \"FIRST\":\n          b = \"0\";\n          break;\n        default:\n          throw Error(\"Unhandled option (text_getSubstring).\");\n      }\n      switch (c) {\n        case \"FROM_START\":\n          c = module$exports$Blockly$JavaScript.javascriptGenerator.getAdjusted(a, \"AT2\", 1);\n          break;\n        case \"FROM_END\":\n          c = module$exports$Blockly$JavaScript.javascriptGenerator.getAdjusted(a, \"AT2\", 0, !1, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_SUBTRACTION);\n          c = e + \".length - \" + c;\n          break;\n        case \"LAST\":\n          c = e + \".length\";\n          break;\n        default:\n          throw Error(\"Unhandled option (text_getSubstring).\");\n      }\n      e = e + \".slice(\" + b + \", \" + c + \")\";\n    } else {\n      d = module$exports$Blockly$JavaScript.javascriptGenerator.getAdjusted(a, \"AT1\");\n      a = module$exports$Blockly$JavaScript.javascriptGenerator.getAdjusted(a, \"AT2\");\n      const f = {\n        FIRST: \"First\",\n        LAST: \"Last\",\n        FROM_START: \"FromStart\",\n        FROM_END: \"FromEnd\"\n      };\n      e = module$exports$Blockly$JavaScript.javascriptGenerator.provideFunction_(\"subsequence\" + f[b] + f[c], `\nfunction ${module$exports$Blockly$JavaScript.javascriptGenerator.FUNCTION_NAME_PLACEHOLDER_}(sequence${\"FROM_END\" === b || \"FROM_START\" === b ? \", at1\" : \"\"}${\"FROM_END\" === c || \"FROM_START\" === c ? \", at2\" : \"\"}) {\n  var start = ${module$contents$Blockly$JavaScript$texts_getSubstringIndex(\"sequence\", b, \"at1\")};\n  var end = ${module$contents$Blockly$JavaScript$texts_getSubstringIndex(\"sequence\", c, \"at2\")} + 1;\n  return sequence.slice(start, end);\n}\n`) + \"(\" + e + (\"FROM_END\" === b || \"FROM_START\" === b ? \", \" + d : \"\") + (\"FROM_END\" === c || \"FROM_START\" === c ? \", \" + a : \"\") + \")\";\n    }\n    return [e, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.text_changeCase = function (a) {\n    const b = {\n      UPPERCASE: \".toUpperCase()\",\n      LOWERCASE: \".toLowerCase()\",\n      TITLECASE: null\n    }[a.getFieldValue(\"CASE\")];\n    a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"TEXT\", b ? module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER : module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"''\";\n    return [b ? a + b : module$exports$Blockly$JavaScript.javascriptGenerator.provideFunction_(\"textToTitleCase\", `\nfunction ${module$exports$Blockly$JavaScript.javascriptGenerator.FUNCTION_NAME_PLACEHOLDER_}(str) {\n  return str.replace(/\\\\S+/g,\n      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});\n}\n`) + \"(\" + a + \")\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.text_trim = function (a) {\n    const b = {\n      LEFT: \".replace(/^[\\\\s\\\\xa0]+/, '')\",\n      RIGHT: \".replace(/[\\\\s\\\\xa0]+$/, '')\",\n      BOTH: \".trim()\"\n    }[a.getFieldValue(\"MODE\")];\n    return [(module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"TEXT\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER) || \"''\") + b, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.text_print = function (a) {\n    return \"window.alert(\" + (module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"TEXT\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"''\") + \");\\n\";\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.text_prompt_ext = function (a) {\n    let b = \"window.prompt(\" + (a.getField(\"TEXT\") ? module$exports$Blockly$JavaScript.javascriptGenerator.quote_(a.getFieldValue(\"TEXT\")) : module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"TEXT\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"''\") + \")\";\n    \"NUMBER\" === a.getFieldValue(\"TYPE\") && (b = \"Number(\" + b + \")\");\n    return [b, module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.text_prompt = module$exports$Blockly$JavaScript.javascriptGenerator.text_prompt_ext;\n  module$exports$Blockly$JavaScript.javascriptGenerator.text_count = function (a) {\n    const b = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"TEXT\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"''\";\n    a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"SUB\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"''\";\n    return [module$exports$Blockly$JavaScript.javascriptGenerator.provideFunction_(\"textCount\", `\nfunction ${module$exports$Blockly$JavaScript.javascriptGenerator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle) {\n  if (needle.length === 0) {\n    return haystack.length + 1;\n  } else {\n    return haystack.split(needle).length - 1;\n  }\n}\n`) + \"(\" + b + \", \" + a + \")\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.text_replace = function (a) {\n    const b = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"TEXT\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"''\",\n      c = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"FROM\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"''\";\n    a = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"TO\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_NONE) || \"''\";\n    return [module$exports$Blockly$JavaScript.javascriptGenerator.provideFunction_(\"textReplace\", `\nfunction ${module$exports$Blockly$JavaScript.javascriptGenerator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle, replacement) {\n  needle = needle.replace(/([-()\\\\[\\\\]{}+?*.$\\\\^|,:#<!\\\\\\\\])/g, '\\\\\\\\$1')\n                 .replace(/\\\\x08/g, '\\\\\\\\x08');\n  return haystack.replace(new RegExp(needle, 'g'), replacement);\n}\n`) + \"(\" + b + \", \" + c + \", \" + a + \")\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.text_reverse = function (a) {\n    return [(module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"TEXT\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_MEMBER) || \"''\") + \".split('').reverse().join('')\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_FUNCTION_CALL];\n  };\n  var module$exports$Blockly$JavaScript$variables = {},\n    module$contents$Blockly$JavaScript$variables_NameType = $.NameType$$module$build$src$core$names;\n  module$exports$Blockly$JavaScript.javascriptGenerator.variables_get = function (a) {\n    return [module$exports$Blockly$JavaScript.javascriptGenerator.nameDB_.getName(a.getFieldValue(\"VAR\"), $.NameType$$module$build$src$core$names.VARIABLE), module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ATOMIC];\n  };\n  module$exports$Blockly$JavaScript.javascriptGenerator.variables_set = function (a) {\n    const b = module$exports$Blockly$JavaScript.javascriptGenerator.valueToCode(a, \"VALUE\", module$exports$Blockly$JavaScript.javascriptGenerator.ORDER_ASSIGNMENT) || \"0\";\n    return module$exports$Blockly$JavaScript.javascriptGenerator.nameDB_.getName(a.getFieldValue(\"VAR\"), $.NameType$$module$build$src$core$names.VARIABLE) + \" = \" + b + \";\\n\";\n  };\n  var module$exports$Blockly$JavaScript$variablesDynamic = {};\n  module$exports$Blockly$JavaScript.javascriptGenerator.variables_get_dynamic = module$exports$Blockly$JavaScript.javascriptGenerator.variables_get;\n  module$exports$Blockly$JavaScript.javascriptGenerator.variables_set_dynamic = module$exports$Blockly$JavaScript.javascriptGenerator.variables_set;\n  var module$exports$Blockly$JavaScript$all = module$exports$Blockly$JavaScript;\n  module$exports$Blockly$JavaScript.__namespace__ = $;\n  return module$exports$Blockly$JavaScript;\n});","map":{"version":3,"names":["module$exports$Blockly$JavaScript","module$contents$Blockly$JavaScript_Variables","$","module$build$src$core$variables","module$contents$Blockly$JavaScript_stringUtils","module$build$src$core$utils$string","module$contents$Blockly$JavaScript_CodeGenerator","CodeGenerator$$module$build$src$core$generator","module$contents$Blockly$JavaScript_inputTypes","module$build$src$core$input_types","inputTypes","module$contents$Blockly$JavaScript_Names","module$build$src$core$names","Names","module$contents$Blockly$JavaScript_NameType","NameType$$module$build$src$core$names","javascriptGenerator","addReservedWords","Object","getOwnPropertyNames","globalThis","join","ORDER_ATOMIC","ORDER_NEW","ORDER_MEMBER","ORDER_FUNCTION_CALL","ORDER_INCREMENT","ORDER_DECREMENT","ORDER_BITWISE_NOT","ORDER_UNARY_PLUS","ORDER_UNARY_NEGATION","ORDER_LOGICAL_NOT","ORDER_TYPEOF","ORDER_VOID","ORDER_DELETE","ORDER_AWAIT","ORDER_EXPONENTIATION","ORDER_MULTIPLICATION","ORDER_DIVISION","ORDER_MODULUS","ORDER_SUBTRACTION","ORDER_ADDITION","ORDER_BITWISE_SHIFT","ORDER_RELATIONAL","ORDER_IN","ORDER_INSTANCEOF","ORDER_EQUALITY","ORDER_BITWISE_AND","ORDER_BITWISE_XOR","ORDER_BITWISE_OR","ORDER_LOGICAL_AND","ORDER_LOGICAL_OR","ORDER_CONDITIONAL","ORDER_ASSIGNMENT","ORDER_YIELD","ORDER_COMMA","ORDER_NONE","ORDER_OVERRIDES","isInitialized","init","a","getPrototypeOf","call","nameDB_","reset","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","b","c","allDeveloperVariables","d","length","push","getName","DEVELOPER_VARIABLE","allUsedVarModels","getId","VARIABLE","definitions_","variables","finish","values","scrubNakedValue","quote_","replace","multiline_quote_","split","map","scrub_","outputConnection","targetConnection","e","getCommentText","wrap","COMMENT_WRAP","prefixLines","f","inputList","type","VALUE","connection","targetBlock","allNestedComments","nextConnection","blockToCode","getAdjusted","workspace","options","oneBasedIndex","g","h","valueToCode","isNumber","Number","Math","floor","module$exports$Blockly$JavaScript$colour","colour_picker","getFieldValue","colour_random","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","colour_rgb","colour_blend","module$exports$Blockly$JavaScript$lists","module$contents$Blockly$JavaScript$lists_NameType","lists_create_empty","lists_create_with","Array","itemCount_","lists_repeat","lists_length","lists_isEmpty","lists_indexOf","lists_getIndex","Error","lists_setIndex","cacheList","match","getDistinctName","module$contents$Blockly$JavaScript$lists_getSubstringIndex","lists_getSublist","FIRST","LAST","FROM_START","FROM_END","lists_sort","lists_split","lists_reverse","module$exports$Blockly$JavaScript$logic","controls_if","STATEMENT_PREFIX","injectId","statementToCode","STATEMENT_SUFFIX","INDENT","getInput","controls_ifelse","logic_compare","EQ","NEQ","LT","LTE","GT","GTE","logic_operation","logic_negate","logic_boolean","logic_null","logic_ternary","module$exports$Blockly$JavaScript$loops","module$contents$Blockly$JavaScript$loops_stringUtils","module$contents$Blockly$JavaScript$loops_NameType","controls_repeat_ext","getField","String","addLoopTrap","controls_repeat","controls_whileUntil","controls_for","abs","controls_forEach","controls_flow_statements","getSurroundLoop","suppressPrefixSuffix","module$exports$Blockly$JavaScript$math","module$contents$Blockly$JavaScript$math_NameType","math_number","math_arithmetic","ADD","MINUS","MULTIPLY","DIVIDE","POWER","math_single","math_constant","PI","E","GOLDEN_RATIO","SQRT2","SQRT1_2","INFINITY","math_number_property","EVEN","ODD","WHOLE","POSITIVE","NEGATIVE","DIVISIBLE_BY","PRIME","math_change","math_round","math_trig","math_on_list","math_modulo","math_constrain","math_random_int","math_random_float","math_atan2","module$exports$Blockly$JavaScript$procedures","module$contents$Blockly$JavaScript$procedures_NameType","procedures_defreturn","PROCEDURE","INFINITE_LOOP_TRAP","k","getVars","l","procedures_defnoreturn","procedures_callreturn","procedures_callnoreturn","procedures_ifreturn","hasReturnValue_","module$exports$Blockly$JavaScript$texts","module$contents$Blockly$JavaScript$texts_NameType","module$contents$Blockly$JavaScript$texts_strRegExp","module$contents$Blockly$JavaScript$texts_forceString","test","module$contents$Blockly$JavaScript$texts_getSubstringIndex","text","text_multiline","indexOf","text_join","text_append","text_length","text_isEmpty","text_indexOf","text_charAt","text_getSubstring","text_changeCase","UPPERCASE","LOWERCASE","TITLECASE","text_trim","LEFT","RIGHT","BOTH","text_print","text_prompt_ext","text_prompt","text_count","text_replace","text_reverse","module$exports$Blockly$JavaScript$variables","module$contents$Blockly$JavaScript$variables_NameType","variables_get","variables_set","module$exports$Blockly$JavaScript$variablesDynamic","variables_get_dynamic","variables_set_dynamic","module$exports$Blockly$JavaScript$all"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/blockly/generators/javascript.js","/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/blockly/generators/javascript/colour.js","/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/blockly/generators/javascript/lists.js","/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/blockly/generators/javascript/logic.js","/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/blockly/generators/javascript/loops.js","/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/blockly/generators/javascript/math.js","/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/blockly/generators/javascript/procedures.js","/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/blockly/generators/javascript/text.js","/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/blockly/generators/javascript/variables.js","/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/blockly/generators/javascript/variables_dynamic.js","/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/blockly/generators/javascript/all.js"],"sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Helper functions for generating JavaScript for blocks.\n * @suppress {checkTypes|globalThis}\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript');\n\nconst Variables = goog.require('Blockly.Variables');\nconst stringUtils = goog.require('Blockly.utils.string');\nconst {Block} = goog.requireType('Blockly.Block');\nconst {CodeGenerator} = goog.require('Blockly.CodeGenerator');\nconst {inputTypes} = goog.require('Blockly.inputTypes');\nconst {Names, NameType} = goog.require('Blockly.Names');\nconst {Workspace} = goog.requireType('Blockly.Workspace');\n\n\n/**\n * JavaScript code generator.\n * @type {!CodeGenerator}\n */\nconst JavaScript = new CodeGenerator('JavaScript');\n\n/**\n * List of illegal variable names.\n * This is not intended to be a security feature.  Blockly is 100% client-side,\n * so bypassing this list is trivial.  This is intended to prevent users from\n * accidentally clobbering a built-in object or function.\n */\nJavaScript.addReservedWords(\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords\n    'break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,in,instanceof,new,return,super,switch,this,throw,try,typeof,var,void,while,with,yield,' +\n    'enum,' +\n    'implements,interface,let,package,private,protected,public,static,' +\n    'await,' +\n    'null,true,false,' +\n    // Magic variable.\n    'arguments,' +\n    // Everything in the current environment (835 items in Chrome, 104 in Node).\n    Object.getOwnPropertyNames(globalThis).join(','));\n\n/**\n * Order of operation ENUMs.\n * https://developer.mozilla.org/en/JavaScript/Reference/Operators/Operator_Precedence\n */\nJavaScript.ORDER_ATOMIC = 0;            // 0 \"\" ...\nJavaScript.ORDER_NEW = 1.1;             // new\nJavaScript.ORDER_MEMBER = 1.2;          // . []\nJavaScript.ORDER_FUNCTION_CALL = 2;     // ()\nJavaScript.ORDER_INCREMENT = 3;         // ++\nJavaScript.ORDER_DECREMENT = 3;         // --\nJavaScript.ORDER_BITWISE_NOT = 4.1;     // ~\nJavaScript.ORDER_UNARY_PLUS = 4.2;      // +\nJavaScript.ORDER_UNARY_NEGATION = 4.3;  // -\nJavaScript.ORDER_LOGICAL_NOT = 4.4;     // !\nJavaScript.ORDER_TYPEOF = 4.5;          // typeof\nJavaScript.ORDER_VOID = 4.6;            // void\nJavaScript.ORDER_DELETE = 4.7;          // delete\nJavaScript.ORDER_AWAIT = 4.8;           // await\nJavaScript.ORDER_EXPONENTIATION = 5.0;  // **\nJavaScript.ORDER_MULTIPLICATION = 5.1;  // *\nJavaScript.ORDER_DIVISION = 5.2;        // /\nJavaScript.ORDER_MODULUS = 5.3;         // %\nJavaScript.ORDER_SUBTRACTION = 6.1;     // -\nJavaScript.ORDER_ADDITION = 6.2;        // +\nJavaScript.ORDER_BITWISE_SHIFT = 7;     // << >> >>>\nJavaScript.ORDER_RELATIONAL = 8;        // < <= > >=\nJavaScript.ORDER_IN = 8;                // in\nJavaScript.ORDER_INSTANCEOF = 8;        // instanceof\nJavaScript.ORDER_EQUALITY = 9;          // == != === !==\nJavaScript.ORDER_BITWISE_AND = 10;      // &\nJavaScript.ORDER_BITWISE_XOR = 11;      // ^\nJavaScript.ORDER_BITWISE_OR = 12;       // |\nJavaScript.ORDER_LOGICAL_AND = 13;      // &&\nJavaScript.ORDER_LOGICAL_OR = 14;       // ||\nJavaScript.ORDER_CONDITIONAL = 15;      // ?:\nJavaScript.ORDER_ASSIGNMENT = 16;       // = += -= **= *= /= %= <<= >>= ...\nJavaScript.ORDER_YIELD = 17;            // yield\nJavaScript.ORDER_COMMA = 18;            // ,\nJavaScript.ORDER_NONE = 99;             // (...)\n\n/**\n * List of outer-inner pairings that do NOT require parentheses.\n * @type {!Array<!Array<number>>}\n */\nJavaScript.ORDER_OVERRIDES = [\n  // (foo()).bar -> foo().bar\n  // (foo())[0] -> foo()[0]\n  [JavaScript.ORDER_FUNCTION_CALL, JavaScript.ORDER_MEMBER],\n  // (foo())() -> foo()()\n  [JavaScript.ORDER_FUNCTION_CALL, JavaScript.ORDER_FUNCTION_CALL],\n  // (foo.bar).baz -> foo.bar.baz\n  // (foo.bar)[0] -> foo.bar[0]\n  // (foo[0]).bar -> foo[0].bar\n  // (foo[0])[1] -> foo[0][1]\n  [JavaScript.ORDER_MEMBER, JavaScript.ORDER_MEMBER],\n  // (foo.bar)() -> foo.bar()\n  // (foo[0])() -> foo[0]()\n  [JavaScript.ORDER_MEMBER, JavaScript.ORDER_FUNCTION_CALL],\n\n  // !(!foo) -> !!foo\n  [JavaScript.ORDER_LOGICAL_NOT, JavaScript.ORDER_LOGICAL_NOT],\n  // a * (b * c) -> a * b * c\n  [JavaScript.ORDER_MULTIPLICATION, JavaScript.ORDER_MULTIPLICATION],\n  // a + (b + c) -> a + b + c\n  [JavaScript.ORDER_ADDITION, JavaScript.ORDER_ADDITION],\n  // a && (b && c) -> a && b && c\n  [JavaScript.ORDER_LOGICAL_AND, JavaScript.ORDER_LOGICAL_AND],\n  // a || (b || c) -> a || b || c\n  [JavaScript.ORDER_LOGICAL_OR, JavaScript.ORDER_LOGICAL_OR]\n];\n\n/**\n * Whether the init method has been called.\n * @type {?boolean}\n */\nJavaScript.isInitialized = false;\n\n/**\n * Initialise the database of variable names.\n * @param {!Workspace} workspace Workspace to generate code from.\n */\nJavaScript.init = function(workspace) {\n  // Call Blockly.CodeGenerator's init.\n  Object.getPrototypeOf(this).init.call(this);\n\n  if (!this.nameDB_) {\n    this.nameDB_ = new Names(this.RESERVED_WORDS_);\n  } else {\n    this.nameDB_.reset();\n  }\n\n  this.nameDB_.setVariableMap(workspace.getVariableMap());\n  this.nameDB_.populateVariables(workspace);\n  this.nameDB_.populateProcedures(workspace);\n\n  const defvars = [];\n  // Add developer variables (not created or named by the user).\n  const devVarList = Variables.allDeveloperVariables(workspace);\n  for (let i = 0; i < devVarList.length; i++) {\n    defvars.push(\n        this.nameDB_.getName(devVarList[i], NameType.DEVELOPER_VARIABLE));\n  }\n\n  // Add user variables, but only ones that are being used.\n  const variables = Variables.allUsedVarModels(workspace);\n  for (let i = 0; i < variables.length; i++) {\n    defvars.push(this.nameDB_.getName(variables[i].getId(), NameType.VARIABLE));\n  }\n\n  // Declare all of the variables.\n  if (defvars.length) {\n    this.definitions_['variables'] = 'var ' + defvars.join(', ') + ';';\n  }\n  this.isInitialized = true;\n};\n\n/**\n * Prepend the generated code with the variable definitions.\n * @param {string} code Generated code.\n * @return {string} Completed code.\n */\nJavaScript.finish = function(code) {\n  // Convert the definitions dictionary into a list.\n  const definitions = Object.values(this.definitions_);\n  // Call Blockly.CodeGenerator's finish.\n  code = Object.getPrototypeOf(this).finish.call(this, code);\n  this.isInitialized = false;\n\n  this.nameDB_.reset();\n  return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\n};\n\n/**\n * Naked values are top-level blocks with outputs that aren't plugged into\n * anything.  A trailing semicolon is needed to make this legal.\n * @param {string} line Line of generated code.\n * @return {string} Legal line of code.\n */\nJavaScript.scrubNakedValue = function(line) {\n  return line + ';\\n';\n};\n\n/**\n * Encode a string as a properly escaped JavaScript string, complete with\n * quotes.\n * @param {string} string Text to encode.\n * @return {string} JavaScript string.\n * @protected\n */\nJavaScript.quote_ = function(string) {\n  // Can't use goog.string.quote since Google's style guide recommends\n  // JS string literals use single quotes.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n               .replace(/\\n/g, '\\\\\\n')\n               .replace(/'/g, '\\\\\\'');\n  return '\\'' + string + '\\'';\n};\n\n/**\n * Encode a string as a properly escaped multiline JavaScript string, complete\n * with quotes.\n * @param {string} string Text to encode.\n * @return {string} JavaScript string.\n * @protected\n */\nJavaScript.multiline_quote_ = function(string) {\n  // Can't use goog.string.quote since Google's style guide recommends\n  // JS string literals use single quotes.\n  const lines = string.split(/\\n/g).map(this.quote_);\n  return lines.join(' + \\'\\\\n\\' +\\n');\n};\n\n/**\n * Common tasks for generating JavaScript from blocks.\n * Handles comments for the specified block and any connected value blocks.\n * Calls any statements following this block.\n * @param {!Block} block The current block.\n * @param {string} code The JavaScript code created for this block.\n * @param {boolean=} opt_thisOnly True to generate code for only this statement.\n * @return {string} JavaScript code with comments and subsequent blocks added.\n * @protected\n */\nJavaScript.scrub_ = function(block, code, opt_thisOnly) {\n  let commentCode = '';\n  // Only collect comments for blocks that aren't inline.\n  if (!block.outputConnection || !block.outputConnection.targetConnection) {\n    // Collect comment for this block.\n    let comment = block.getCommentText();\n    if (comment) {\n      comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\n      commentCode += this.prefixLines(comment + '\\n', '// ');\n    }\n    // Collect comments for all value arguments.\n    // Don't collect comments for nested statements.\n    for (let i = 0; i < block.inputList.length; i++) {\n      if (block.inputList[i].type === inputTypes.VALUE) {\n        const childBlock = block.inputList[i].connection.targetBlock();\n        if (childBlock) {\n          comment = this.allNestedComments(childBlock);\n          if (comment) {\n            commentCode += this.prefixLines(comment, '// ');\n          }\n        }\n      }\n    }\n  }\n  const nextBlock = block.nextConnection && block.nextConnection.targetBlock();\n  const nextCode = opt_thisOnly ? '' : this.blockToCode(nextBlock);\n  return commentCode + code + nextCode;\n};\n\n/**\n * Gets a property and adjusts the value while taking into account indexing.\n * @param {!Block} block The block.\n * @param {string} atId The property ID of the element to get.\n * @param {number=} opt_delta Value to add.\n * @param {boolean=} opt_negate Whether to negate the value.\n * @param {number=} opt_order The highest order acting on this value.\n * @return {string|number}\n */\nJavaScript.getAdjusted = function(\n    block, atId, opt_delta, opt_negate, opt_order) {\n  let delta = opt_delta || 0;\n  let order = opt_order || this.ORDER_NONE;\n  if (block.workspace.options.oneBasedIndex) {\n    delta--;\n  }\n  const defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\n\n  let innerOrder;\n  let outerOrder = order;\n  if (delta > 0) {\n    outerOrder = this.ORDER_ADDITION;\n    innerOrder = this.ORDER_ADDITION;\n  } else if (delta < 0) {\n    outerOrder = this.ORDER_SUBTRACTION;\n    innerOrder = this.ORDER_SUBTRACTION;\n  } else if (opt_negate) {\n    outerOrder = this.ORDER_UNARY_NEGATION;\n    innerOrder = this.ORDER_UNARY_NEGATION;\n  }\n\n  let at = this.valueToCode(block, atId, outerOrder) || defaultAtIndex;\n\n  if (stringUtils.isNumber(at)) {\n    // If the index is a naked number, adjust it right now.\n    at = Number(at) + delta;\n    if (opt_negate) {\n      at = -at;\n    }\n  } else {\n    // If the index is dynamic, adjust it in code.\n    if (delta > 0) {\n      at = at + ' + ' + delta;\n    } else if (delta < 0) {\n      at = at + ' - ' + -delta;\n    }\n    if (opt_negate) {\n      if (delta) {\n        at = '-(' + at + ')';\n      } else {\n        at = '-' + at;\n      }\n    }\n    innerOrder = Math.floor(innerOrder);\n    order = Math.floor(order);\n    if (innerOrder && order >= innerOrder) {\n      at = '(' + at + ')';\n    }\n  }\n  return at;\n};\n\nexports.javascriptGenerator = JavaScript;\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for colour blocks.\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.colour');\n\nconst {javascriptGenerator: JavaScript} = goog.require('Blockly.JavaScript');\n\n\nJavaScript['colour_picker'] = function(block) {\n  // Colour picker.\n  const code = JavaScript.quote_(block.getFieldValue('COLOUR'));\n  return [code, JavaScript.ORDER_ATOMIC];\n};\n\nJavaScript['colour_random'] = function(block) {\n  // Generate a random colour.\n  const functionName = JavaScript.provideFunction_('colourRandom', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}() {\n  var num = Math.floor(Math.random() * Math.pow(2, 24));\n  return '#' + ('00000' + num.toString(16)).substr(-6);\n}\n`);\n  const code = functionName + '()';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['colour_rgb'] = function(block) {\n  // Compose a colour from RGB components expressed as percentages.\n  const red = JavaScript.valueToCode(block, 'RED', JavaScript.ORDER_NONE) || 0;\n  const green =\n      JavaScript.valueToCode(block, 'GREEN', JavaScript.ORDER_NONE) || 0;\n  const blue =\n      JavaScript.valueToCode(block, 'BLUE', JavaScript.ORDER_NONE) || 0;\n  const functionName = JavaScript.provideFunction_('colourRgb', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(r, g, b) {\n  r = Math.max(Math.min(Number(r), 100), 0) * 2.55;\n  g = Math.max(Math.min(Number(g), 100), 0) * 2.55;\n  b = Math.max(Math.min(Number(b), 100), 0) * 2.55;\n  r = ('0' + (Math.round(r) || 0).toString(16)).slice(-2);\n  g = ('0' + (Math.round(g) || 0).toString(16)).slice(-2);\n  b = ('0' + (Math.round(b) || 0).toString(16)).slice(-2);\n  return '#' + r + g + b;\n}\n`);\n  const code = functionName + '(' + red + ', ' + green + ', ' + blue + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['colour_blend'] = function(block) {\n  // Blend two colours together.\n  const c1 = JavaScript.valueToCode(block, 'COLOUR1', JavaScript.ORDER_NONE) ||\n      \"'#000000'\";\n  const c2 = JavaScript.valueToCode(block, 'COLOUR2', JavaScript.ORDER_NONE) ||\n      \"'#000000'\";\n  const ratio =\n      JavaScript.valueToCode(block, 'RATIO', JavaScript.ORDER_NONE) || 0.5;\n  const functionName = JavaScript.provideFunction_('colourBlend', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(c1, c2, ratio) {\n  ratio = Math.max(Math.min(Number(ratio), 1), 0);\n  var r1 = parseInt(c1.substring(1, 3), 16);\n  var g1 = parseInt(c1.substring(3, 5), 16);\n  var b1 = parseInt(c1.substring(5, 7), 16);\n  var r2 = parseInt(c2.substring(1, 3), 16);\n  var g2 = parseInt(c2.substring(3, 5), 16);\n  var b2 = parseInt(c2.substring(5, 7), 16);\n  var r = Math.round(r1 * (1 - ratio) + r2 * ratio);\n  var g = Math.round(g1 * (1 - ratio) + g2 * ratio);\n  var b = Math.round(b1 * (1 - ratio) + b2 * ratio);\n  r = ('0' + (r || 0).toString(16)).slice(-2);\n  g = ('0' + (g || 0).toString(16)).slice(-2);\n  b = ('0' + (b || 0).toString(16)).slice(-2);\n  return '#' + r + g + b;\n}\n`);\n  const code = functionName + '(' + c1 + ', ' + c2 + ', ' + ratio + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for list blocks.\n * @suppress {missingRequire}\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.lists');\n\nconst {NameType} = goog.require('Blockly.Names');\nconst {javascriptGenerator: JavaScript} = goog.require('Blockly.JavaScript');\n\n\nJavaScript['lists_create_empty'] = function(block) {\n  // Create an empty list.\n  return ['[]', JavaScript.ORDER_ATOMIC];\n};\n\nJavaScript['lists_create_with'] = function(block) {\n  // Create a list with any number of elements of any type.\n  const elements = new Array(block.itemCount_);\n  for (let i = 0; i < block.itemCount_; i++) {\n    elements[i] =\n        JavaScript.valueToCode(block, 'ADD' + i, JavaScript.ORDER_NONE) ||\n        'null';\n  }\n  const code = '[' + elements.join(', ') + ']';\n  return [code, JavaScript.ORDER_ATOMIC];\n};\n\nJavaScript['lists_repeat'] = function(block) {\n  // Create a list with one element repeated.\n  const functionName = JavaScript.provideFunction_('listsRepeat', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(value, n) {\n  var array = [];\n  for (var i = 0; i < n; i++) {\n    array[i] = value;\n  }\n  return array;\n}\n`);\n  const element =\n      JavaScript.valueToCode(block, 'ITEM', JavaScript.ORDER_NONE) || 'null';\n  const repeatCount =\n      JavaScript.valueToCode(block, 'NUM', JavaScript.ORDER_NONE) || '0';\n  const code = functionName + '(' + element + ', ' + repeatCount + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['lists_length'] = function(block) {\n  // String or array length.\n  const list =\n      JavaScript.valueToCode(block, 'VALUE', JavaScript.ORDER_MEMBER) || '[]';\n  return [list + '.length', JavaScript.ORDER_MEMBER];\n};\n\nJavaScript['lists_isEmpty'] = function(block) {\n  // Is the string null or array empty?\n  const list =\n      JavaScript.valueToCode(block, 'VALUE', JavaScript.ORDER_MEMBER) || '[]';\n  return ['!' + list + '.length', JavaScript.ORDER_LOGICAL_NOT];\n};\n\nJavaScript['lists_indexOf'] = function(block) {\n  // Find an item in the list.\n  const operator =\n      block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\n  const item =\n      JavaScript.valueToCode(block, 'FIND', JavaScript.ORDER_NONE) || \"''\";\n  const list =\n      JavaScript.valueToCode(block, 'VALUE', JavaScript.ORDER_MEMBER) || '[]';\n  const code = list + '.' + operator + '(' + item + ')';\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', JavaScript.ORDER_ADDITION];\n  }\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['lists_getIndex'] = function(block) {\n  // Get element at index.\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const listOrder =\n      (where === 'RANDOM') ? JavaScript.ORDER_NONE : JavaScript.ORDER_MEMBER;\n  const list = JavaScript.valueToCode(block, 'VALUE', listOrder) || '[]';\n\n  switch (where) {\n    case ('FIRST'):\n      if (mode === 'GET') {\n        const code = list + '[0]';\n        return [code, JavaScript.ORDER_MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.shift()';\n        return [code, JavaScript.ORDER_MEMBER];\n      } else if (mode === 'REMOVE') {\n        return list + '.shift();\\n';\n      }\n      break;\n    case ('LAST'):\n      if (mode === 'GET') {\n        const code = list + '.slice(-1)[0]';\n        return [code, JavaScript.ORDER_MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop()';\n        return [code, JavaScript.ORDER_MEMBER];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop();\\n';\n      }\n      break;\n    case ('FROM_START'): {\n      const at = JavaScript.getAdjusted(block, 'AT');\n      if (mode === 'GET') {\n        const code = list + '[' + at + ']';\n        return [code, JavaScript.ORDER_MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.splice(' + at + ', 1)[0]';\n        return [code, JavaScript.ORDER_FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.splice(' + at + ', 1);\\n';\n      }\n      break;\n    }\n    case ('FROM_END'): {\n      const at = JavaScript.getAdjusted(block, 'AT', 1, true);\n      if (mode === 'GET') {\n        const code = list + '.slice(' + at + ')[0]';\n        return [code, JavaScript.ORDER_FUNCTION_CALL];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.splice(' + at + ', 1)[0]';\n        return [code, JavaScript.ORDER_FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.splice(' + at + ', 1);';\n      }\n      break;\n    }\n    case ('RANDOM'): {\n      const functionName = JavaScript.provideFunction_('listsGetRandomItem', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(list, remove) {\n  var x = Math.floor(Math.random() * list.length);\n  if (remove) {\n    return list.splice(x, 1)[0];\n  } else {\n    return list[x];\n  }\n}\n`);\n      const code = functionName + '(' + list + ', ' + (mode !== 'GET') + ')';\n      if (mode === 'GET' || mode === 'GET_REMOVE') {\n        return [code, JavaScript.ORDER_FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return code + ';\\n';\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_getIndex).');\n};\n\nJavaScript['lists_setIndex'] = function(block) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  let list =\n      JavaScript.valueToCode(block, 'LIST', JavaScript.ORDER_MEMBER) || '[]';\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const value =\n      JavaScript.valueToCode(block, 'TO', JavaScript.ORDER_ASSIGNMENT) ||\n      'null';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  // Closure, which accesses and modifies 'list'.\n  function cacheList() {\n    if (list.match(/^\\w+$/)) {\n      return '';\n    }\n    const listVar =\n        JavaScript.nameDB_.getDistinctName('tmpList', NameType.VARIABLE);\n    const code = 'var ' + listVar + ' = ' + list + ';\\n';\n    list = listVar;\n    return code;\n  }\n  switch (where) {\n    case ('FIRST'):\n      if (mode === 'SET') {\n        return list + '[0] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.unshift(' + value + ');\\n';\n      }\n      break;\n    case ('LAST'):\n      if (mode === 'SET') {\n        let code = cacheList();\n        code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        return list + '.push(' + value + ');\\n';\n      }\n      break;\n    case ('FROM_START'): {\n      const at = JavaScript.getAdjusted(block, 'AT');\n      if (mode === 'SET') {\n        return list + '[' + at + '] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.splice(' + at + ', 0, ' + value + ');\\n';\n      }\n      break;\n    }\n    case ('FROM_END'): {\n      const at = JavaScript.getAdjusted(\n          block, 'AT', 1, false, JavaScript.ORDER_SUBTRACTION);\n      let code = cacheList();\n      if (mode === 'SET') {\n        code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\n            ');\\n';\n        return code;\n      }\n      break;\n    }\n    case ('RANDOM'): {\n      let code = cacheList();\n      const xVar =\n          JavaScript.nameDB_.getDistinctName('tmpX', NameType.VARIABLE);\n      code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\n          '.length);\\n';\n      if (mode === 'SET') {\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += list + '.splice(' + xVar + ', 0, ' + value + ');\\n';\n        return code;\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_setIndex).');\n};\n\n/**\n * Returns an expression calculating the index into a list.\n * @param {string} listName Name of the list, used to calculate length.\n * @param {string} where The method of indexing, selected by dropdown in Blockly\n * @param {string=} opt_at The optional offset when indexing from start/end.\n * @return {string|undefined} Index expression.\n */\nconst getSubstringIndex = function(listName, where, opt_at) {\n  if (where === 'FIRST') {\n    return '0';\n  } else if (where === 'FROM_END') {\n    return listName + '.length - 1 - ' + opt_at;\n  } else if (where === 'LAST') {\n    return listName + '.length - 1';\n  } else {\n    return opt_at;\n  }\n};\n\nJavaScript['lists_getSublist'] = function(block) {\n  // Get sublist.\n  const list =\n      JavaScript.valueToCode(block, 'LIST', JavaScript.ORDER_MEMBER) || '[]';\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  let code;\n  if (where1 === 'FIRST' && where2 === 'LAST') {\n    code = list + '.slice(0)';\n  } else if (\n      list.match(/^\\w+$/) ||\n      (where1 !== 'FROM_END' && where2 === 'FROM_START')) {\n    // If the list is a variable or doesn't require a call for length, don't\n    // generate a helper function.\n    let at1;\n    switch (where1) {\n      case 'FROM_START':\n        at1 = JavaScript.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        at1 = JavaScript.getAdjusted(\n            block, 'AT1', 1, false, JavaScript.ORDER_SUBTRACTION);\n        at1 = list + '.length - ' + at1;\n        break;\n      case 'FIRST':\n        at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    let at2;\n    switch (where2) {\n      case 'FROM_START':\n        at2 = JavaScript.getAdjusted(block, 'AT2', 1);\n        break;\n      case 'FROM_END':\n        at2 = JavaScript.getAdjusted(\n            block, 'AT2', 0, false, JavaScript.ORDER_SUBTRACTION);\n        at2 = list + '.length - ' + at2;\n        break;\n      case 'LAST':\n        at2 = list + '.length';\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    code = list + '.slice(' + at1 + ', ' + at2 + ')';\n  } else {\n    const at1 = JavaScript.getAdjusted(block, 'AT1');\n    const at2 = JavaScript.getAdjusted(block, 'AT2');\n    const wherePascalCase = {\n      'FIRST': 'First',\n      'LAST': 'Last',\n      'FROM_START': 'FromStart',\n      'FROM_END': 'FromEnd',\n    };\n    // The value for 'FROM_END' and'FROM_START' depends on `at` so\n    // we add it as a parameter.\n    const at1Param =\n        (where1 === 'FROM_END' || where1 === 'FROM_START') ? ', at1' : '';\n    const at2Param =\n        (where2 === 'FROM_END' || where2 === 'FROM_START') ? ', at2' : '';\n    const functionName = JavaScript.provideFunction_(\n        'subsequence' + wherePascalCase[where1] + wherePascalCase[where2], `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(sequence${at1Param}${at2Param}) {\n  var start = ${getSubstringIndex('sequence', where1, 'at1')};\n  var end = ${getSubstringIndex('sequence', where2, 'at2')} + 1;\n  return sequence.slice(start, end);\n}\n`);\n    code = functionName + '(' + list +\n        // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n        // pass it.\n        ((where1 === 'FROM_END' || where1 === 'FROM_START') ? ', ' + at1 : '') +\n        ((where2 === 'FROM_END' || where2 === 'FROM_START') ? ', ' + at2 : '') +\n        ')';\n  }\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['lists_sort'] = function(block) {\n  // Block for sorting a list.\n  const list =\n      JavaScript.valueToCode(block, 'LIST', JavaScript.ORDER_FUNCTION_CALL) ||\n      '[]';\n  const direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\n  const type = block.getFieldValue('TYPE');\n  const getCompareFunctionName =\n      JavaScript.provideFunction_('listsGetSortCompare', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(type, direction) {\n  var compareFuncs = {\n    'NUMERIC': function(a, b) {\n        return Number(a) - Number(b); },\n    'TEXT': function(a, b) {\n        return String(a) > String(b) ? 1 : -1; },\n    'IGNORE_CASE': function(a, b) {\n        return String(a).toLowerCase() > String(b).toLowerCase() ? 1 : -1; },\n  };\n  var compare = compareFuncs[type];\n  return function(a, b) { return compare(a, b) * direction; };\n}\n      `);\n  return [\n    list + '.slice().sort(' + getCompareFunctionName + '(\"' + type + '\", ' +\n        direction + '))',\n    JavaScript.ORDER_FUNCTION_CALL\n  ];\n};\n\nJavaScript['lists_split'] = function(block) {\n  // Block for splitting text into a list, or joining a list into text.\n  let input = JavaScript.valueToCode(block, 'INPUT', JavaScript.ORDER_MEMBER);\n  const delimiter =\n      JavaScript.valueToCode(block, 'DELIM', JavaScript.ORDER_NONE) || \"''\";\n  const mode = block.getFieldValue('MODE');\n  let functionName;\n  if (mode === 'SPLIT') {\n    if (!input) {\n      input = \"''\";\n    }\n    functionName = 'split';\n  } else if (mode === 'JOIN') {\n    if (!input) {\n      input = '[]';\n    }\n    functionName = 'join';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  const code = input + '.' + functionName + '(' + delimiter + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['lists_reverse'] = function(block) {\n  // Block for reversing a list.\n  const list =\n      JavaScript.valueToCode(block, 'LIST', JavaScript.ORDER_FUNCTION_CALL) ||\n      '[]';\n  const code = list + '.slice().reverse()';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for logic blocks.\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.logic');\n\nconst {javascriptGenerator: JavaScript} = goog.require('Blockly.JavaScript');\n\n\nJavaScript['controls_if'] = function(block) {\n  // If/elseif/else condition.\n  let n = 0;\n  let code = '';\n  if (JavaScript.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += JavaScript.injectId(JavaScript.STATEMENT_PREFIX, block);\n  }\n  do {\n    const conditionCode =\n        JavaScript.valueToCode(block, 'IF' + n, JavaScript.ORDER_NONE) ||\n        'false';\n    let branchCode = JavaScript.statementToCode(block, 'DO' + n);\n    if (JavaScript.STATEMENT_SUFFIX) {\n      branchCode = JavaScript.prefixLines(\n                       JavaScript.injectId(JavaScript.STATEMENT_SUFFIX, block),\n                       JavaScript.INDENT) +\n          branchCode;\n    }\n    code += (n > 0 ? ' else ' : '') + 'if (' + conditionCode + ') {\\n' +\n        branchCode + '}';\n    n++;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || JavaScript.STATEMENT_SUFFIX) {\n    let branchCode = JavaScript.statementToCode(block, 'ELSE');\n    if (JavaScript.STATEMENT_SUFFIX) {\n      branchCode = JavaScript.prefixLines(\n                       JavaScript.injectId(JavaScript.STATEMENT_SUFFIX, block),\n                       JavaScript.INDENT) +\n          branchCode;\n    }\n    code += ' else {\\n' + branchCode + '}';\n  }\n  return code + '\\n';\n};\n\nJavaScript['controls_ifelse'] = JavaScript['controls_if'];\n\nJavaScript['logic_compare'] = function(block) {\n  // Comparison operator.\n  const OPERATORS =\n      {'EQ': '==', 'NEQ': '!=', 'LT': '<', 'LTE': '<=', 'GT': '>', 'GTE': '>='};\n  const operator = OPERATORS[block.getFieldValue('OP')];\n  const order = (operator === '==' || operator === '!=') ?\n      JavaScript.ORDER_EQUALITY :\n      JavaScript.ORDER_RELATIONAL;\n  const argument0 = JavaScript.valueToCode(block, 'A', order) || '0';\n  const argument1 = JavaScript.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nJavaScript['logic_operation'] = function(block) {\n  // Operations 'and', 'or'.\n  const operator = (block.getFieldValue('OP') === 'AND') ? '&&' : '||';\n  const order = (operator === '&&') ? JavaScript.ORDER_LOGICAL_AND :\n                                      JavaScript.ORDER_LOGICAL_OR;\n  let argument0 = JavaScript.valueToCode(block, 'A', order);\n  let argument1 = JavaScript.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'false';\n    argument1 = 'false';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    const defaultArgument = (operator === '&&') ? 'true' : 'false';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nJavaScript['logic_negate'] = function(block) {\n  // Negation.\n  const order = JavaScript.ORDER_LOGICAL_NOT;\n  const argument0 = JavaScript.valueToCode(block, 'BOOL', order) || 'true';\n  const code = '!' + argument0;\n  return [code, order];\n};\n\nJavaScript['logic_boolean'] = function(block) {\n  // Boolean values true and false.\n  const code = (block.getFieldValue('BOOL') === 'TRUE') ? 'true' : 'false';\n  return [code, JavaScript.ORDER_ATOMIC];\n};\n\nJavaScript['logic_null'] = function(block) {\n  // Null data type.\n  return ['null', JavaScript.ORDER_ATOMIC];\n};\n\nJavaScript['logic_ternary'] = function(block) {\n  // Ternary operator.\n  const value_if =\n      JavaScript.valueToCode(block, 'IF', JavaScript.ORDER_CONDITIONAL) ||\n      'false';\n  const value_then =\n      JavaScript.valueToCode(block, 'THEN', JavaScript.ORDER_CONDITIONAL) ||\n      'null';\n  const value_else =\n      JavaScript.valueToCode(block, 'ELSE', JavaScript.ORDER_CONDITIONAL) ||\n      'null';\n  const code = value_if + ' ? ' + value_then + ' : ' + value_else;\n  return [code, JavaScript.ORDER_CONDITIONAL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for loop blocks.\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.loops');\n\nconst stringUtils = goog.require('Blockly.utils.string');\nconst {NameType} = goog.require('Blockly.Names');\nconst {javascriptGenerator: JavaScript} = goog.require('Blockly.JavaScript');\n\n\nJavaScript['controls_repeat_ext'] = function(block) {\n  // Repeat n times.\n  let repeats;\n  if (block.getField('TIMES')) {\n    // Internal number.\n    repeats = String(Number(block.getFieldValue('TIMES')));\n  } else {\n    // External number.\n    repeats =\n        JavaScript.valueToCode(block, 'TIMES', JavaScript.ORDER_ASSIGNMENT) ||\n        '0';\n  }\n  let branch = JavaScript.statementToCode(block, 'DO');\n  branch = JavaScript.addLoopTrap(branch, block);\n  let code = '';\n  const loopVar =\n      JavaScript.nameDB_.getDistinctName('count', NameType.VARIABLE);\n  let endVar = repeats;\n  if (!repeats.match(/^\\w+$/) && !stringUtils.isNumber(repeats)) {\n    endVar =\n        JavaScript.nameDB_.getDistinctName('repeat_end', NameType.VARIABLE);\n    code += 'var ' + endVar + ' = ' + repeats + ';\\n';\n  }\n  code += 'for (var ' + loopVar + ' = 0; ' + loopVar + ' < ' + endVar + '; ' +\n      loopVar + '++) {\\n' + branch + '}\\n';\n  return code;\n};\n\nJavaScript['controls_repeat'] = JavaScript['controls_repeat_ext'];\n\nJavaScript['controls_whileUntil'] = function(block) {\n  // Do while/until loop.\n  const until = block.getFieldValue('MODE') === 'UNTIL';\n  let argument0 =\n      JavaScript.valueToCode(\n          block, 'BOOL',\n          until ? JavaScript.ORDER_LOGICAL_NOT : JavaScript.ORDER_NONE) ||\n      'false';\n  let branch = JavaScript.statementToCode(block, 'DO');\n  branch = JavaScript.addLoopTrap(branch, block);\n  if (until) {\n    argument0 = '!' + argument0;\n  }\n  return 'while (' + argument0 + ') {\\n' + branch + '}\\n';\n};\n\nJavaScript['controls_for'] = function(block) {\n  // For loop.\n  const variable0 =\n      JavaScript.nameDB_.getName(block.getFieldValue('VAR'), NameType.VARIABLE);\n  const argument0 =\n      JavaScript.valueToCode(block, 'FROM', JavaScript.ORDER_ASSIGNMENT) || '0';\n  const argument1 =\n      JavaScript.valueToCode(block, 'TO', JavaScript.ORDER_ASSIGNMENT) || '0';\n  const increment =\n      JavaScript.valueToCode(block, 'BY', JavaScript.ORDER_ASSIGNMENT) || '1';\n  let branch = JavaScript.statementToCode(block, 'DO');\n  branch = JavaScript.addLoopTrap(branch, block);\n  let code;\n  if (stringUtils.isNumber(argument0) && stringUtils.isNumber(argument1) &&\n      stringUtils.isNumber(increment)) {\n    // All arguments are simple numbers.\n    const up = Number(argument0) <= Number(argument1);\n    code = 'for (' + variable0 + ' = ' + argument0 + '; ' + variable0 +\n        (up ? ' <= ' : ' >= ') + argument1 + '; ' + variable0;\n    const step = Math.abs(Number(increment));\n    if (step === 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    let startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !stringUtils.isNumber(argument0)) {\n      startVar = JavaScript.nameDB_.getDistinctName(\n          variable0 + '_start', NameType.VARIABLE);\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\n    }\n    let endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !stringUtils.isNumber(argument1)) {\n      endVar = JavaScript.nameDB_.getDistinctName(\n          variable0 + '_end', NameType.VARIABLE);\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    const incVar = JavaScript.nameDB_.getDistinctName(\n        variable0 + '_inc', NameType.VARIABLE);\n    code += 'var ' + incVar + ' = ';\n    if (stringUtils.isNumber(increment)) {\n      code += Math.abs(increment) + ';\\n';\n    } else {\n      code += 'Math.abs(' + increment + ');\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += JavaScript.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code += 'for (' + variable0 + ' = ' + startVar + '; ' + incVar +\n        ' >= 0 ? ' + variable0 + ' <= ' + endVar + ' : ' + variable0 +\n        ' >= ' + endVar + '; ' + variable0 + ' += ' + incVar + ') {\\n' +\n        branch + '}\\n';\n  }\n  return code;\n};\n\nJavaScript['controls_forEach'] = function(block) {\n  // For each loop.\n  const variable0 =\n      JavaScript.nameDB_.getName(block.getFieldValue('VAR'), NameType.VARIABLE);\n  const argument0 =\n      JavaScript.valueToCode(block, 'LIST', JavaScript.ORDER_ASSIGNMENT) ||\n      '[]';\n  let branch = JavaScript.statementToCode(block, 'DO');\n  branch = JavaScript.addLoopTrap(branch, block);\n  let code = '';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  let listVar = argument0;\n  if (!argument0.match(/^\\w+$/)) {\n    listVar = JavaScript.nameDB_.getDistinctName(\n        variable0 + '_list', NameType.VARIABLE);\n    code += 'var ' + listVar + ' = ' + argument0 + ';\\n';\n  }\n  const indexVar = JavaScript.nameDB_.getDistinctName(\n      variable0 + '_index', NameType.VARIABLE);\n  branch = JavaScript.INDENT + variable0 + ' = ' + listVar + '[' + indexVar +\n      '];\\n' + branch;\n  code += 'for (var ' + indexVar + ' in ' + listVar + ') {\\n' + branch + '}\\n';\n  return code;\n};\n\nJavaScript['controls_flow_statements'] = function(block) {\n  // Flow statements: continue, break.\n  let xfix = '';\n  if (JavaScript.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += JavaScript.injectId(JavaScript.STATEMENT_PREFIX, block);\n  }\n  if (JavaScript.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += JavaScript.injectId(JavaScript.STATEMENT_SUFFIX, block);\n  }\n  if (JavaScript.STATEMENT_PREFIX) {\n    const loop = block.getSurroundLoop();\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += JavaScript.injectId(JavaScript.STATEMENT_PREFIX, loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break;\\n';\n    case 'CONTINUE':\n      return xfix + 'continue;\\n';\n  }\n  throw Error('Unknown flow statement.');\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for math blocks.\n * @suppress {missingRequire}\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.math');\n\nconst {NameType} = goog.require('Blockly.Names');\nconst {javascriptGenerator: JavaScript} = goog.require('Blockly.JavaScript');\n\n\nJavaScript['math_number'] = function(block) {\n  // Numeric value.\n  const code = Number(block.getFieldValue('NUM'));\n  const order = code >= 0 ? JavaScript.ORDER_ATOMIC :\n              JavaScript.ORDER_UNARY_NEGATION;\n  return [code, order];\n};\n\nJavaScript['math_arithmetic'] = function(block) {\n  // Basic arithmetic operators, and power.\n  const OPERATORS = {\n    'ADD': [' + ', JavaScript.ORDER_ADDITION],\n    'MINUS': [' - ', JavaScript.ORDER_SUBTRACTION],\n    'MULTIPLY': [' * ', JavaScript.ORDER_MULTIPLICATION],\n    'DIVIDE': [' / ', JavaScript.ORDER_DIVISION],\n    'POWER': [null, JavaScript.ORDER_NONE],  // Handle power separately.\n  };\n  const tuple = OPERATORS[block.getFieldValue('OP')];\n  const operator = tuple[0];\n  const order = tuple[1];\n  const argument0 = JavaScript.valueToCode(block, 'A', order) || '0';\n  const argument1 = JavaScript.valueToCode(block, 'B', order) || '0';\n  let code;\n  // Power in JavaScript requires a special case since it has no operator.\n  if (!operator) {\n    code = 'Math.pow(' + argument0 + ', ' + argument1 + ')';\n    return [code, JavaScript.ORDER_FUNCTION_CALL];\n  }\n  code = argument0 + operator + argument1;\n  return [code, order];\n};\n\nJavaScript['math_single'] = function(block) {\n  // Math operators with single operand.\n  const operator = block.getFieldValue('OP');\n  let code;\n  let arg;\n  if (operator === 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    arg = JavaScript.valueToCode(block, 'NUM',\n        JavaScript.ORDER_UNARY_NEGATION) || '0';\n    if (arg[0] === '-') {\n      // --3 is not legal in JS.\n      arg = ' ' + arg;\n    }\n    code = '-' + arg;\n    return [code, JavaScript.ORDER_UNARY_NEGATION];\n  }\n  if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\n    arg = JavaScript.valueToCode(block, 'NUM',\n        JavaScript.ORDER_DIVISION) || '0';\n  } else {\n    arg = JavaScript.valueToCode(block, 'NUM',\n        JavaScript.ORDER_NONE) || '0';\n  }\n  // First, handle cases which generate values that don't need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ABS':\n      code = 'Math.abs(' + arg + ')';\n      break;\n    case 'ROOT':\n      code = 'Math.sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'Math.log(' + arg + ')';\n      break;\n    case 'EXP':\n      code = 'Math.exp(' + arg + ')';\n      break;\n    case 'POW10':\n      code = 'Math.pow(10,' + arg + ')';\n      break;\n    case 'ROUND':\n      code = 'Math.round(' + arg + ')';\n      break;\n    case 'ROUNDUP':\n      code = 'Math.ceil(' + arg + ')';\n      break;\n    case 'ROUNDDOWN':\n      code = 'Math.floor(' + arg + ')';\n      break;\n    case 'SIN':\n      code = 'Math.sin(' + arg + ' / 180 * Math.PI)';\n      break;\n    case 'COS':\n      code = 'Math.cos(' + arg + ' / 180 * Math.PI)';\n      break;\n    case 'TAN':\n      code = 'Math.tan(' + arg + ' / 180 * Math.PI)';\n      break;\n  }\n  if (code) {\n    return [code, JavaScript.ORDER_FUNCTION_CALL];\n  }\n  // Second, handle cases which generate values that may need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'LOG10':\n      code = 'Math.log(' + arg + ') / Math.log(10)';\n      break;\n    case 'ASIN':\n      code = 'Math.asin(' + arg + ') / Math.PI * 180';\n      break;\n    case 'ACOS':\n      code = 'Math.acos(' + arg + ') / Math.PI * 180';\n      break;\n    case 'ATAN':\n      code = 'Math.atan(' + arg + ') / Math.PI * 180';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, JavaScript.ORDER_DIVISION];\n};\n\nJavaScript['math_constant'] = function(block) {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  const CONSTANTS = {\n    'PI': ['Math.PI', JavaScript.ORDER_MEMBER],\n    'E': ['Math.E', JavaScript.ORDER_MEMBER],\n    'GOLDEN_RATIO': ['(1 + Math.sqrt(5)) / 2', JavaScript.ORDER_DIVISION],\n    'SQRT2': ['Math.SQRT2', JavaScript.ORDER_MEMBER],\n    'SQRT1_2': ['Math.SQRT1_2', JavaScript.ORDER_MEMBER],\n    'INFINITY': ['Infinity', JavaScript.ORDER_ATOMIC],\n  };\n  return CONSTANTS[block.getFieldValue('CONSTANT')];\n};\n\nJavaScript['math_number_property'] = function(block) {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  const PROPERTIES = {\n    'EVEN': [' % 2 === 0', JavaScript.ORDER_MODULUS, JavaScript.ORDER_EQUALITY],\n    'ODD': [' % 2 === 1', JavaScript.ORDER_MODULUS, JavaScript.ORDER_EQUALITY],\n    'WHOLE': [' % 1 === 0', JavaScript.ORDER_MODULUS,\n        JavaScript.ORDER_EQUALITY],\n    'POSITIVE': [' > 0', JavaScript.ORDER_RELATIONAL,\n        JavaScript.ORDER_RELATIONAL],\n    'NEGATIVE': [' < 0', JavaScript.ORDER_RELATIONAL,\n        JavaScript.ORDER_RELATIONAL],\n    'DIVISIBLE_BY': [null, JavaScript.ORDER_MODULUS, JavaScript.ORDER_EQUALITY],\n    'PRIME': [null, JavaScript.ORDER_NONE, JavaScript.ORDER_FUNCTION_CALL],\n  };\n  const dropdownProperty = block.getFieldValue('PROPERTY');\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\n  const numberToCheck = JavaScript.valueToCode(block, 'NUMBER_TO_CHECK',\n      inputOrder) || '0';\n  let code;\n  if (dropdownProperty === 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    const functionName = JavaScript.provideFunction_('mathIsPrime', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(n) {\n  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  if (n == 2 || n == 3) {\n    return true;\n  }\n  // False if n is NaN, negative, is 1, or not whole.\n  // And false if n is divisible by 2 or 3.\n  if (isNaN(n) || n <= 1 || n % 1 !== 0 || n % 2 === 0 || n % 3 === 0) {\n    return false;\n  }\n  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {\n    if (n % (x - 1) === 0 || n % (x + 1) === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n`);\n    code = functionName + '(' + numberToCheck + ')';\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\n    const divisor = JavaScript.valueToCode(block, 'DIVISOR',\n        JavaScript.ORDER_MODULUS) || '0';\n    code = numberToCheck + ' % ' + divisor + ' === 0';\n  } else {\n    code = numberToCheck + suffix;\n  }\n  return [code, outputOrder];\n};\n\nJavaScript['math_change'] = function(block) {\n  // Add to a variable in place.\n  const argument0 = JavaScript.valueToCode(block, 'DELTA',\n      JavaScript.ORDER_ADDITION) || '0';\n  const varName = JavaScript.nameDB_.getName(\n      block.getFieldValue('VAR'), NameType.VARIABLE);\n  return varName + ' = (typeof ' + varName + ' === \\'number\\' ? ' + varName +\n      ' : 0) + ' + argument0 + ';\\n';\n};\n\n// Rounding functions have a single operand.\nJavaScript['math_round'] = JavaScript['math_single'];\n// Trigonometry functions have a single operand.\nJavaScript['math_trig'] = JavaScript['math_single'];\n\nJavaScript['math_on_list'] = function(block) {\n  // Math functions for lists.\n  const func = block.getFieldValue('OP');\n  let list;\n  let code;\n  switch (func) {\n    case 'SUM':\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_MEMBER) || '[]';\n      code = list + '.reduce(function(x, y) {return x + y;}, 0)';\n      break;\n    case 'MIN':\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_NONE) || '[]';\n      code = 'Math.min.apply(null, ' + list + ')';\n      break;\n    case 'MAX':\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_NONE) || '[]';\n      code = 'Math.max.apply(null, ' + list + ')';\n      break;\n    case 'AVERAGE': {\n      // mathMean([null,null,1,3]) === 2.0.\n      const functionName = JavaScript.provideFunction_('mathMean', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(myList) {\n  return myList.reduce(function(x, y) {return x + y;}, 0) / myList.length;\n}\n`);\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MEDIAN': {\n      // mathMedian([null,null,1,3]) === 2.0.\n      const functionName = JavaScript.provideFunction_('mathMedian', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(myList) {\n  var localList = myList.filter(function (x) {return typeof x === 'number';});\n  if (!localList.length) return null;\n  localList.sort(function(a, b) {return b - a;});\n  if (localList.length % 2 === 0) {\n    return (localList[localList.length / 2 - 1] + localList[localList.length / 2]) / 2;\n  } else {\n    return localList[(localList.length - 1) / 2];\n  }\n}\n`);\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MODE': {\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1].\n      const functionName = JavaScript.provideFunction_('mathModes', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(values) {\n  var modes = [];\n  var counts = [];\n  var maxCount = 0;\n  for (var i = 0; i < values.length; i++) {\n    var value = values[i];\n    var found = false;\n    var thisCount;\n    for (var j = 0; j < counts.length; j++) {\n      if (counts[j][0] === value) {\n        thisCount = ++counts[j][1];\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      counts.push([value, 1]);\n      thisCount = 1;\n    }\n    maxCount = Math.max(thisCount, maxCount);\n  }\n  for (var j = 0; j < counts.length; j++) {\n    if (counts[j][1] === maxCount) {\n        modes.push(counts[j][0]);\n    }\n  }\n  return modes;\n}\n`);\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'STD_DEV': {\n      const functionName = JavaScript.provideFunction_('mathStandardDeviation', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(numbers) {\n  var n = numbers.length;\n  if (!n) return null;\n  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;\n  var variance = 0;\n  for (var j = 0; j < n; j++) {\n    variance += Math.pow(numbers[j] - mean, 2);\n  }\n  variance = variance / n;\n  return Math.sqrt(variance);\n}\n`);\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'RANDOM': {\n      const functionName = JavaScript.provideFunction_('mathRandomList', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(list) {\n  var x = Math.floor(Math.random() * list.length);\n  return list[x];\n}\n`);\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['math_modulo'] = function(block) {\n  // Remainder computation.\n  const argument0 = JavaScript.valueToCode(block, 'DIVIDEND',\n      JavaScript.ORDER_MODULUS) || '0';\n  const argument1 = JavaScript.valueToCode(block, 'DIVISOR',\n      JavaScript.ORDER_MODULUS) || '0';\n  const code = argument0 + ' % ' + argument1;\n  return [code, JavaScript.ORDER_MODULUS];\n};\n\nJavaScript['math_constrain'] = function(block) {\n  // Constrain a number between two limits.\n  const argument0 = JavaScript.valueToCode(block, 'VALUE',\n      JavaScript.ORDER_NONE) || '0';\n  const argument1 = JavaScript.valueToCode(block, 'LOW',\n      JavaScript.ORDER_NONE) || '0';\n  const argument2 = JavaScript.valueToCode(block, 'HIGH',\n      JavaScript.ORDER_NONE) || 'Infinity';\n  const code = 'Math.min(Math.max(' + argument0 + ', ' + argument1 + '), ' +\n      argument2 + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['math_random_int'] = function(block) {\n  // Random integer between [X] and [Y].\n  const argument0 = JavaScript.valueToCode(block, 'FROM',\n      JavaScript.ORDER_NONE) || '0';\n  const argument1 = JavaScript.valueToCode(block, 'TO',\n      JavaScript.ORDER_NONE) || '0';\n  const functionName = JavaScript.provideFunction_('mathRandomInt', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(a, b) {\n  if (a > b) {\n    // Swap a and b to ensure a is smaller.\n    var c = a;\n    a = b;\n    b = c;\n  }\n  return Math.floor(Math.random() * (b - a + 1) + a);\n}\n`);\n  const code = functionName + '(' + argument0 + ', ' + argument1 + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['math_random_float'] = function(block) {\n  // Random fraction between 0 and 1.\n  return ['Math.random()', JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['math_atan2'] = function(block) {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  const argument0 = JavaScript.valueToCode(block, 'X',\n      JavaScript.ORDER_NONE) || '0';\n  const argument1 = JavaScript.valueToCode(block, 'Y',\n      JavaScript.ORDER_NONE) || '0';\n  return ['Math.atan2(' + argument1 + ', ' + argument0 + ') / Math.PI * 180',\n      JavaScript.ORDER_DIVISION];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for procedure blocks.\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.procedures');\n\nconst {NameType} = goog.require('Blockly.Names');\nconst {javascriptGenerator: JavaScript} = goog.require('Blockly.JavaScript');\n\n\nJavaScript['procedures_defreturn'] = function(block) {\n  // Define a procedure with a return value.\n  const funcName = JavaScript.nameDB_.getName(\n      block.getFieldValue('NAME'), NameType.PROCEDURE);\n  let xfix1 = '';\n  if (JavaScript.STATEMENT_PREFIX) {\n    xfix1 += JavaScript.injectId(JavaScript.STATEMENT_PREFIX, block);\n  }\n  if (JavaScript.STATEMENT_SUFFIX) {\n    xfix1 += JavaScript.injectId(JavaScript.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = JavaScript.prefixLines(xfix1, JavaScript.INDENT);\n  }\n  let loopTrap = '';\n  if (JavaScript.INFINITE_LOOP_TRAP) {\n    loopTrap = JavaScript.prefixLines(\n        JavaScript.injectId(JavaScript.INFINITE_LOOP_TRAP, block),\n        JavaScript.INDENT);\n  }\n  const branch = JavaScript.statementToCode(block, 'STACK');\n  let returnValue =\n      JavaScript.valueToCode(block, 'RETURN', JavaScript.ORDER_NONE) || '';\n  let xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = JavaScript.INDENT + 'return ' + returnValue + ';\\n';\n  }\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = JavaScript.nameDB_.getName(variables[i], NameType.VARIABLE);\n  }\n  let code = 'function ' + funcName + '(' + args.join(', ') + ') {\\n' + xfix1 +\n      loopTrap + branch + xfix2 + returnValue + '}';\n  code = JavaScript.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  JavaScript.definitions_['%' + funcName] = code;\n  return null;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nJavaScript['procedures_defnoreturn'] = JavaScript['procedures_defreturn'];\n\nJavaScript['procedures_callreturn'] = function(block) {\n  // Call a procedure with a return value.\n  const funcName = JavaScript.nameDB_.getName(\n      block.getFieldValue('NAME'), NameType.PROCEDURE);\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = JavaScript.valueToCode(block, 'ARG' + i, JavaScript.ORDER_NONE) ||\n        'null';\n  }\n  const code = funcName + '(' + args.join(', ') + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['procedures_callnoreturn'] = function(block) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  const tuple = JavaScript['procedures_callreturn'](block);\n  return tuple[0] + ';\\n';\n};\n\nJavaScript['procedures_ifreturn'] = function(block) {\n  // Conditionally return value from a procedure.\n  const condition =\n      JavaScript.valueToCode(block, 'CONDITION', JavaScript.ORDER_NONE) ||\n      'false';\n  let code = 'if (' + condition + ') {\\n';\n  if (JavaScript.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code += JavaScript.prefixLines(\n        JavaScript.injectId(JavaScript.STATEMENT_SUFFIX, block),\n        JavaScript.INDENT);\n  }\n  if (block.hasReturnValue_) {\n    const value =\n        JavaScript.valueToCode(block, 'VALUE', JavaScript.ORDER_NONE) || 'null';\n    code += JavaScript.INDENT + 'return ' + value + ';\\n';\n  } else {\n    code += JavaScript.INDENT + 'return;\\n';\n  }\n  code += '}\\n';\n  return code;\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for text blocks.\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.texts');\n\nconst {NameType} = goog.require('Blockly.Names');\nconst {javascriptGenerator: JavaScript} = goog.require('Blockly.JavaScript');\n\n\n/**\n * Regular expression to detect a single-quoted string literal.\n */\nconst strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/;\n\n/**\n * Enclose the provided value in 'String(...)' function.\n * Leave string literals alone.\n * @param {string} value Code evaluating to a value.\n * @return {Array<string|number>} Array containing code evaluating to a string\n *     and the order of the returned code.[string, number]\n */\nconst forceString = function(value) {\n  if (strRegExp.test(value)) {\n    return [value, JavaScript.ORDER_ATOMIC];\n  }\n  return ['String(' + value + ')', JavaScript.ORDER_FUNCTION_CALL];\n};\n\n/**\n * Returns an expression calculating the index into a string.\n * @param {string} stringName Name of the string, used to calculate length.\n * @param {string} where The method of indexing, selected by dropdown in Blockly\n * @param {string=} opt_at The optional offset when indexing from start/end.\n * @return {string|undefined} Index expression.\n */\nconst getSubstringIndex = function(stringName, where, opt_at) {\n  if (where === 'FIRST') {\n    return '0';\n  } else if (where === 'FROM_END') {\n    return stringName + '.length - 1 - ' + opt_at;\n  } else if (where === 'LAST') {\n    return stringName + '.length - 1';\n  } else {\n    return opt_at;\n  }\n};\n\nJavaScript['text'] = function(block) {\n  // Text value.\n  const code = JavaScript.quote_(block.getFieldValue('TEXT'));\n  return [code, JavaScript.ORDER_ATOMIC];\n};\n\nJavaScript['text_multiline'] = function(block) {\n  // Text value.\n  const code = JavaScript.multiline_quote_(block.getFieldValue('TEXT'));\n  const order = code.indexOf('+') !== -1 ? JavaScript.ORDER_ADDITION :\n      JavaScript.ORDER_ATOMIC;\n  return [code, order];\n};\n\nJavaScript['text_join'] = function(block) {\n  // Create a string made up of any number of elements of any type.\n  switch (block.itemCount_) {\n    case 0:\n      return [\"''\", JavaScript.ORDER_ATOMIC];\n    case 1: {\n      const element = JavaScript.valueToCode(block, 'ADD0',\n          JavaScript.ORDER_NONE) || \"''\";\n      const codeAndOrder = forceString(element);\n      return codeAndOrder;\n    }\n    case 2: {\n      const element0 = JavaScript.valueToCode(block, 'ADD0',\n          JavaScript.ORDER_NONE) || \"''\";\n      const element1 = JavaScript.valueToCode(block, 'ADD1',\n          JavaScript.ORDER_NONE) || \"''\";\n      const code = forceString(element0)[0] +\n          ' + ' + forceString(element1)[0];\n      return [code, JavaScript.ORDER_ADDITION];\n    }\n    default: {\n      const elements = new Array(block.itemCount_);\n      for (let i = 0; i < block.itemCount_; i++) {\n        elements[i] = JavaScript.valueToCode(block, 'ADD' + i,\n            JavaScript.ORDER_NONE) || \"''\";\n      }\n      const code = '[' + elements.join(',') + '].join(\\'\\')';\n      return [code, JavaScript.ORDER_FUNCTION_CALL];\n    }\n  }\n};\n\nJavaScript['text_append'] = function(block) {\n  // Append to a variable in place.\n  const varName = JavaScript.nameDB_.getName(\n      block.getFieldValue('VAR'), NameType.VARIABLE);\n  const value = JavaScript.valueToCode(block, 'TEXT',\n      JavaScript.ORDER_NONE) || \"''\";\n  const code = varName + ' += ' +\n      forceString(value)[0] + ';\\n';\n  return code;\n};\n\nJavaScript['text_length'] = function(block) {\n  // String or array length.\n  const text = JavaScript.valueToCode(block, 'VALUE',\n      JavaScript.ORDER_MEMBER) || \"''\";\n  return [text + '.length', JavaScript.ORDER_MEMBER];\n};\n\nJavaScript['text_isEmpty'] = function(block) {\n  // Is the string null or array empty?\n  const text = JavaScript.valueToCode(block, 'VALUE',\n      JavaScript.ORDER_MEMBER) || \"''\";\n  return ['!' + text + '.length', JavaScript.ORDER_LOGICAL_NOT];\n};\n\nJavaScript['text_indexOf'] = function(block) {\n  // Search the text for a substring.\n  const operator = block.getFieldValue('END') === 'FIRST' ?\n      'indexOf' : 'lastIndexOf';\n  const substring = JavaScript.valueToCode(block, 'FIND',\n      JavaScript.ORDER_NONE) || \"''\";\n  const text = JavaScript.valueToCode(block, 'VALUE',\n      JavaScript.ORDER_MEMBER) || \"''\";\n  const code = text + '.' + operator + '(' + substring + ')';\n  // Adjust index if using one-based indices.\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', JavaScript.ORDER_ADDITION];\n  }\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['text_charAt'] = function(block) {\n  // Get letter at index.\n  // Note: Until January 2013 this block did not have the WHERE input.\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const textOrder = (where === 'RANDOM') ? JavaScript.ORDER_NONE :\n      JavaScript.ORDER_MEMBER;\n  const text = JavaScript.valueToCode(block, 'VALUE', textOrder) || \"''\";\n  switch (where) {\n    case 'FIRST': {\n      const code = text + '.charAt(0)';\n      return [code, JavaScript.ORDER_FUNCTION_CALL];\n    }\n    case 'LAST': {\n      const code = text + '.slice(-1)';\n      return [code, JavaScript.ORDER_FUNCTION_CALL];\n    }\n    case 'FROM_START': {\n      const at = JavaScript.getAdjusted(block, 'AT');\n      // Adjust index if using one-based indices.\n      const code = text + '.charAt(' + at + ')';\n      return [code, JavaScript.ORDER_FUNCTION_CALL];\n    }\n    case 'FROM_END': {\n      const at = JavaScript.getAdjusted(block, 'AT', 1, true);\n      const code = text + '.slice(' + at + ').charAt(0)';\n      return [code, JavaScript.ORDER_FUNCTION_CALL];\n    }\n    case 'RANDOM': {\n      const functionName = JavaScript.provideFunction_('textRandomLetter', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(text) {\n  var x = Math.floor(Math.random() * text.length);\n  return text[x];\n}\n`);\n      const code = functionName + '(' + text + ')';\n      return [code, JavaScript.ORDER_FUNCTION_CALL];\n    }\n  }\n  throw Error('Unhandled option (text_charAt).');\n};\n\nJavaScript['text_getSubstring'] = function(block) {\n  // Get substring.\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  const requiresLengthCall = (where1 !== 'FROM_END' && where1 !== 'LAST' &&\n      where2 !== 'FROM_END' && where2 !== 'LAST');\n  const textOrder = requiresLengthCall ? JavaScript.ORDER_MEMBER :\n      JavaScript.ORDER_NONE;\n  const text = JavaScript.valueToCode(block, 'STRING', textOrder) || \"''\";\n  let code;\n  if (where1 === 'FIRST' && where2 === 'LAST') {\n    code = text;\n    return [code, JavaScript.ORDER_NONE];\n  } else if (text.match(/^'?\\w+'?$/) || requiresLengthCall) {\n    // If the text is a variable or literal or doesn't require a call for\n    // length, don't generate a helper function.\n    let at1;\n    switch (where1) {\n      case 'FROM_START':\n        at1 = JavaScript.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        at1 = JavaScript.getAdjusted(block, 'AT1', 1, false,\n            JavaScript.ORDER_SUBTRACTION);\n        at1 = text + '.length - ' + at1;\n        break;\n      case 'FIRST':\n        at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (text_getSubstring).');\n    }\n    let at2;\n    switch (where2) {\n      case 'FROM_START':\n        at2 = JavaScript.getAdjusted(block, 'AT2', 1);\n        break;\n      case 'FROM_END':\n        at2 = JavaScript.getAdjusted(block, 'AT2', 0, false,\n            JavaScript.ORDER_SUBTRACTION);\n        at2 = text + '.length - ' + at2;\n        break;\n      case 'LAST':\n        at2 = text + '.length';\n        break;\n      default:\n        throw Error('Unhandled option (text_getSubstring).');\n    }\n    code = text + '.slice(' + at1 + ', ' + at2 + ')';\n  } else {\n    const at1 = JavaScript.getAdjusted(block, 'AT1');\n    const at2 = JavaScript.getAdjusted(block, 'AT2');\n    const wherePascalCase = {'FIRST': 'First', 'LAST': 'Last',\n      'FROM_START': 'FromStart', 'FROM_END': 'FromEnd'};\n    // The value for 'FROM_END' and'FROM_START' depends on `at` so\n    // we add it as a parameter.\n    const at1Param =\n        (where1 === 'FROM_END' || where1 === 'FROM_START') ? ', at1' : '';\n    const at2Param =\n        (where2 === 'FROM_END' || where2 === 'FROM_START') ? ', at2' : '';\n    const functionName = JavaScript.provideFunction_(\n        'subsequence' + wherePascalCase[where1] + wherePascalCase[where2], `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(sequence${at1Param}${at2Param}) {\n  var start = ${getSubstringIndex('sequence', where1, 'at1')};\n  var end = ${getSubstringIndex('sequence', where2, 'at2')} + 1;\n  return sequence.slice(start, end);\n}\n`);\n    code = functionName + '(' + text +\n        // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n        // pass it.\n        ((where1 === 'FROM_END' || where1 === 'FROM_START') ? ', ' + at1 : '') +\n        ((where2 === 'FROM_END' || where2 === 'FROM_START') ? ', ' + at2 : '') +\n        ')';\n  }\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['text_changeCase'] = function(block) {\n  // Change capitalization.\n  const OPERATORS = {\n    'UPPERCASE': '.toUpperCase()',\n    'LOWERCASE': '.toLowerCase()',\n    'TITLECASE': null,\n  };\n  const operator = OPERATORS[block.getFieldValue('CASE')];\n  const textOrder = operator ? JavaScript.ORDER_MEMBER : JavaScript.ORDER_NONE;\n  const text = JavaScript.valueToCode(block, 'TEXT', textOrder) || \"''\";\n  let code;\n  if (operator) {\n    // Upper and lower case are functions built into JavaScript.\n    code = text + operator;\n  } else {\n    // Title case is not a native JavaScript function.  Define one.\n    const functionName = JavaScript.provideFunction_('textToTitleCase', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(str) {\n  return str.replace(/\\\\S+/g,\n      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});\n}\n`);\n    code = functionName + '(' + text + ')';\n  }\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['text_trim'] = function(block) {\n  // Trim spaces.\n  const OPERATORS = {\n    'LEFT': \".replace(/^[\\\\s\\\\xa0]+/, '')\",\n    'RIGHT': \".replace(/[\\\\s\\\\xa0]+$/, '')\",\n    'BOTH': '.trim()',\n  };\n  const operator = OPERATORS[block.getFieldValue('MODE')];\n  const text = JavaScript.valueToCode(block, 'TEXT',\n      JavaScript.ORDER_MEMBER) || \"''\";\n  return [text + operator, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['text_print'] = function(block) {\n  // Print statement.\n  const msg = JavaScript.valueToCode(block, 'TEXT',\n      JavaScript.ORDER_NONE) || \"''\";\n  return 'window.alert(' + msg + ');\\n';\n};\n\nJavaScript['text_prompt_ext'] = function(block) {\n  // Prompt function.\n  let msg;\n  if (block.getField('TEXT')) {\n    // Internal message.\n    msg = JavaScript.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message.\n    msg = JavaScript.valueToCode(block, 'TEXT', JavaScript.ORDER_NONE) || \"''\";\n  }\n  let code = 'window.prompt(' + msg + ')';\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\n  if (toNumber) {\n    code = 'Number(' + code + ')';\n  }\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['text_prompt'] = JavaScript['text_prompt_ext'];\n\nJavaScript['text_count'] = function(block) {\n  const text = JavaScript.valueToCode(block, 'TEXT',\n      JavaScript.ORDER_NONE) || \"''\";\n  const sub = JavaScript.valueToCode(block, 'SUB',\n      JavaScript.ORDER_NONE) || \"''\";\n  const functionName = JavaScript.provideFunction_('textCount', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle) {\n  if (needle.length === 0) {\n    return haystack.length + 1;\n  } else {\n    return haystack.split(needle).length - 1;\n  }\n}\n`);\n  const code = functionName + '(' + text + ', ' + sub + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['text_replace'] = function(block) {\n  const text = JavaScript.valueToCode(block, 'TEXT',\n      JavaScript.ORDER_NONE) || \"''\";\n  const from = JavaScript.valueToCode(block, 'FROM',\n      JavaScript.ORDER_NONE) || \"''\";\n  const to = JavaScript.valueToCode(block, 'TO', JavaScript.ORDER_NONE) || \"''\";\n  // The regex escaping code below is taken from the implementation of\n  // goog.string.regExpEscape.\n  const functionName = JavaScript.provideFunction_('textReplace', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle, replacement) {\n  needle = needle.replace(/([-()\\\\[\\\\]{}+?*.$\\\\^|,:#<!\\\\\\\\])/g, '\\\\\\\\$1')\n                 .replace(/\\\\x08/g, '\\\\\\\\x08');\n  return haystack.replace(new RegExp(needle, 'g'), replacement);\n}\n`);\n  const code = functionName + '(' + text + ', ' + from + ', ' + to + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['text_reverse'] = function(block) {\n  const text = JavaScript.valueToCode(block, 'TEXT',\n      JavaScript.ORDER_MEMBER) || \"''\";\n  const code = text + \".split('').reverse().join('')\";\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for variable blocks.\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.variables');\n\nconst {NameType} = goog.require('Blockly.Names');\nconst {javascriptGenerator: JavaScript} = goog.require('Blockly.JavaScript');\n\n\nJavaScript['variables_get'] = function(block) {\n  // Variable getter.\n  const code = JavaScript.nameDB_.getName(block.getFieldValue('VAR'),\n      NameType.VARIABLE);\n  return [code, JavaScript.ORDER_ATOMIC];\n};\n\nJavaScript['variables_set'] = function(block) {\n  // Variable setter.\n  const argument0 = JavaScript.valueToCode(\n                        block, 'VALUE', JavaScript.ORDER_ASSIGNMENT) || '0';\n  const varName = JavaScript.nameDB_.getName(\n      block.getFieldValue('VAR'), NameType.VARIABLE);\n  return varName + ' = ' + argument0 + ';\\n';\n};\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for dynamic variable blocks.\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.variablesDynamic');\n\nconst {javascriptGenerator: JavaScript} = goog.require('Blockly.JavaScript');\n/** @suppress {extraRequire} */\ngoog.require('Blockly.JavaScript.variables');\n\n\n// JavaScript is dynamically typed.\nJavaScript['variables_get_dynamic'] = JavaScript['variables_get'];\nJavaScript['variables_set_dynamic'] = JavaScript['variables_set'];\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Complete helper functions for generating JavaScript for\n *     blocks.  This is the entrypoint for javascript_compressed.js.\n * @suppress {extraRequire}\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.all');\n\nconst moduleExports = goog.require('Blockly.JavaScript');\ngoog.require('Blockly.JavaScript.colour');\ngoog.require('Blockly.JavaScript.lists');\ngoog.require('Blockly.JavaScript.logic');\ngoog.require('Blockly.JavaScript.loops');\ngoog.require('Blockly.JavaScript.math');\ngoog.require('Blockly.JavaScript.procedures');\ngoog.require('Blockly.JavaScript.texts');\ngoog.require('Blockly.JavaScript.variables');\ngoog.require('Blockly.JavaScript.variablesDynamic');\n\nexports = moduleExports;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}