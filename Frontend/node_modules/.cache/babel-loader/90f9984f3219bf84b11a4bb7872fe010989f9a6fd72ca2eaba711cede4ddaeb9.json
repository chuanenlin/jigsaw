{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst code_1 = require(\"../code\");\nconst additionalItems_1 = require(\"./additionalItems\");\nconst error = {\n  message: _ref => {\n    let {\n      params: {\n        len\n      }\n    } = _ref;\n    return (0, codegen_1.str)`must NOT have more than ${len} items`;\n  },\n  params: _ref2 => {\n    let {\n      params: {\n        len\n      }\n    } = _ref2;\n    return (0, codegen_1._)`{limit: ${len}}`;\n  }\n};\nconst def = {\n  keyword: \"items\",\n  type: \"array\",\n  schemaType: [\"object\", \"boolean\"],\n  before: \"uniqueItems\",\n  error,\n  code(cxt) {\n    const {\n      schema,\n      parentSchema,\n      it\n    } = cxt;\n    const {\n      prefixItems\n    } = parentSchema;\n    it.items = true;\n    if ((0, util_1.alwaysValidSchema)(it, schema)) return;\n    if (prefixItems) (0, additionalItems_1.validateAdditionalItems)(cxt, prefixItems);else cxt.ok((0, code_1.validateArray)(cxt));\n  }\n};\nexports.default = def;","map":{"version":3,"names":["codegen_1","require","util_1","code_1","additionalItems_1","error","message","_ref","params","len","str","_ref2","_","def","keyword","type","schemaType","before","code","cxt","schema","parentSchema","it","prefixItems","items","alwaysValidSchema","validateAdditionalItems","ok","validateArray","exports","default"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/ajv/lib/vocabularies/applicator/items2020.ts"],"sourcesContent":["import type {\n  CodeKeywordDefinition,\n  KeywordErrorDefinition,\n  ErrorObject,\n  AnySchema,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str} from \"../../compile/codegen\"\nimport {alwaysValidSchema} from \"../../compile/util\"\nimport {validateArray} from \"../code\"\nimport {validateAdditionalItems} from \"./additionalItems\"\n\nexport type ItemsError = ErrorObject<\"items\", {limit: number}, AnySchema>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {len}}) => str`must NOT have more than ${len} items`,\n  params: ({params: {len}}) => _`{limit: ${len}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"items\",\n  type: \"array\",\n  schemaType: [\"object\", \"boolean\"],\n  before: \"uniqueItems\",\n  error,\n  code(cxt: KeywordCxt) {\n    const {schema, parentSchema, it} = cxt\n    const {prefixItems} = parentSchema\n    it.items = true\n    if (alwaysValidSchema(it, schema)) return\n    if (prefixItems) validateAdditionalItems(cxt, prefixItems)\n    else cxt.ok(validateArray(cxt))\n  },\n}\n\nexport default def\n"],"mappings":";;;;;AAOA,MAAAA,SAAA,GAAAC,OAAA;AACA,MAAAC,MAAA,GAAAD,OAAA;AACA,MAAAE,MAAA,GAAAF,OAAA;AACA,MAAAG,iBAAA,GAAAH,OAAA;AAIA,MAAMI,KAAK,GAA2B;EACpCC,OAAO,EAAEC,IAAA;IAAA,IAAC;MAACC,MAAM,EAAE;QAACC;MAAG;IAAC,CAAC,GAAAF,IAAA;IAAA,OAAK,IAAAP,SAAA,CAAAU,GAAG,4BAA2BD,GAAG,QAAQ;EAAA;EACvED,MAAM,EAAEG,KAAA;IAAA,IAAC;MAACH,MAAM,EAAE;QAACC;MAAG;IAAC,CAAC,GAAAE,KAAA;IAAA,OAAK,IAAAX,SAAA,CAAAY,CAAC,YAAWH,GAAG,GAAG;EAAA;CAChD;AAED,MAAMI,GAAG,GAA0B;EACjCC,OAAO,EAAE,OAAO;EAChBC,IAAI,EAAE,OAAO;EACbC,UAAU,EAAE,CAAC,QAAQ,EAAE,SAAS,CAAC;EACjCC,MAAM,EAAE,aAAa;EACrBZ,KAAK;EACLa,IAAIA,CAACC,GAAe;IAClB,MAAM;MAACC,MAAM;MAAEC,YAAY;MAAEC;IAAE,CAAC,GAAGH,GAAG;IACtC,MAAM;MAACI;IAAW,CAAC,GAAGF,YAAY;IAClCC,EAAE,CAACE,KAAK,GAAG,IAAI;IACf,IAAI,IAAAtB,MAAA,CAAAuB,iBAAiB,EAACH,EAAE,EAAEF,MAAM,CAAC,EAAE;IACnC,IAAIG,WAAW,EAAE,IAAAnB,iBAAA,CAAAsB,uBAAuB,EAACP,GAAG,EAAEI,WAAW,CAAC,MACrDJ,GAAG,CAACQ,EAAE,CAAC,IAAAxB,MAAA,CAAAyB,aAAa,EAACT,GAAG,CAAC,CAAC;EACjC;CACD;AAEDU,OAAA,CAAAC,OAAA,GAAejB,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}