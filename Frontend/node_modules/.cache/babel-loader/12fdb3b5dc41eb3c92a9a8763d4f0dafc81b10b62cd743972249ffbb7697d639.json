{"ast":null,"code":"var _jsxFileName = \"/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/src/components/input-output/InputPanel.tsx\",\n  _s = $RefreshSig$();\nimport { useFilePicker } from 'use-file-picker';\nimport { useWorkspaceContext } from '../../context/WorkspaceContext';\nimport { useEffect, useState } from 'react';\nimport { ModalityToDataReadType, ModalityToInputType } from '../../constants';\nimport { Modality } from '../../types';\nimport { MediaViewer } from './MediaViewer';\nimport { copyToClipBoard, getInputCount, getInputModality, getModalityEmojiOrEmpty, getOutputFromResponse, hasInput, isInputBlock, isTextInput, saveFile } from './input-output.util';\nimport { PanelHeader } from './PanelHeader';\nimport { CopyAll, Save, UploadOutlined } from '@mui/icons-material';\nimport { DropZone } from './DropZone';\nimport { enqueueSnackbar } from 'notistack';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nconst MAX_ALLOWED_FILE_SIZE_MB = 200;\nconst getBlockInputContent = (index, selectedProcessableBlock) => {\n  const inputs = selectedProcessableBlock === null || selectedProcessableBlock === void 0 ? void 0 : selectedProcessableBlock.inputs;\n  if (!inputs && isInputBlock(selectedProcessableBlock)) {\n    return {\n      modality: selectedProcessableBlock === null || selectedProcessableBlock === void 0 ? void 0 : selectedProcessableBlock.blockData.outputModality,\n      content: ''\n    };\n  }\n  if (!inputs || index >= Object.values(inputs).length) {\n    return null;\n  }\n  const firstInput = Object.values(inputs)[index];\n  const modality = Object.keys(inputs)[index];\n  const content = getOutputFromResponse(firstInput);\n  return {\n    content,\n    modality: modality\n  };\n};\nconst getFilePickerType = processableBlock => {\n  if (!processableBlock) {\n    return [''];\n  }\n  return ModalityToInputType[processableBlock.blockData.outputModality];\n};\nconst getFilePickerReadType = processableBlock => {\n  if (!processableBlock) {\n    return;\n  }\n  return ModalityToDataReadType[processableBlock.blockData.outputModality];\n};\nexport const InputPanel = () => {\n  _s();\n  const {\n    selectedProcessableBlock\n  } = useWorkspaceContext();\n  const [openFileSelector, {\n    filesContent,\n    clear\n  }] = useFilePicker({\n    accept: getFilePickerType(selectedProcessableBlock),\n    readAs: getFilePickerReadType(selectedProcessableBlock),\n    maxFileSize: 200\n  });\n  const [inputPage, setInputPage] = useState(1);\n  const [selectedFile, setSelectedFile] = useState();\n  useEffect(() => {\n    if (filesContent.length > 0) {\n      const {\n        name,\n        content\n      } = filesContent[0];\n      setSelectedFile({\n        content,\n        name\n      });\n      clear();\n    }\n  }, [filesContent]);\n  const getInputAlias = block => {\n    var _block$blocklyBlock$o, _block$blocklyBlock$o2;\n    if (!block || block.blockData.blockType !== 'input') {\n      return '';\n    }\n    const check = (_block$blocklyBlock$o = block.blocklyBlock.outputConnection) === null || _block$blocklyBlock$o === void 0 ? void 0 : (_block$blocklyBlock$o2 = _block$blocklyBlock$o.targetConnection) === null || _block$blocklyBlock$o2 === void 0 ? void 0 : _block$blocklyBlock$o2.getCheck();\n    if (!(check !== null && check !== void 0 && check.length) || check.length <= 1) {\n      return '';\n    }\n    if (check.length > 1) {\n      return `( ${check[1]} )`;\n    }\n    return '';\n  };\n  const setBlockInput = selectedFile => {\n    // find the size in megabyte\n    const sizeInBytes = selectedFile.content.length * 3 / 4;\n    const sizeInMB = sizeInBytes / (1024 * 1024);\n    if (sizeInMB > MAX_ALLOWED_FILE_SIZE_MB) {\n      enqueueSnackbar('File size should be less than 200MB', {\n        variant: 'error'\n      });\n      return;\n    }\n    const outputType = selectedProcessableBlock === null || selectedProcessableBlock === void 0 ? void 0 : selectedProcessableBlock.blockData.outputModality;\n    if (outputType) {\n      selectedProcessableBlock.inputs = {\n        ...selectedProcessableBlock.inputs,\n        [outputType]: selectedFile\n      };\n    }\n    // Clear to avoid same file being selected again\n    // when another block is selected\n    clear();\n    setSelectedFile(undefined);\n  };\n  useEffect(() => {\n    if (selectedProcessableBlock) {\n      setInputPage(1);\n      if (selectedFile !== undefined) {\n        setBlockInput(selectedFile);\n      }\n    }\n  }, [selectedProcessableBlock, selectedFile]);\n  const getActionButton = pageIndex => {\n    if (!isInputBlock(selectedProcessableBlock)) {\n      const inputContent = getBlockInputContent(pageIndex - 1, selectedProcessableBlock);\n      if (!inputContent) {\n        return undefined;\n      }\n      if ((inputContent === null || inputContent === void 0 ? void 0 : inputContent.modality) === Modality.Text) {\n        return {\n          icon: /*#__PURE__*/_jsxDEV(CopyAll, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 17\n          }, this),\n          title: 'Copy',\n          label: 'Copy',\n          onClick: () => copyToClipBoard((inputContent === null || inputContent === void 0 ? void 0 : inputContent.content) || '')\n        };\n      }\n      return {\n        icon: /*#__PURE__*/_jsxDEV(Save, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }, this),\n        title: 'Save',\n        label: 'Save',\n        onClick: () => saveFile((inputContent === null || inputContent === void 0 ? void 0 : inputContent.content) || '')\n      };\n    }\n    if (isTextInput(selectedProcessableBlock)) {\n      return {\n        icon: /*#__PURE__*/_jsxDEV(CopyAll, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 15\n        }, this),\n        title: 'Copy',\n        label: 'Copy',\n        onClick: () => {\n          var _getBlockInputContent;\n          return copyToClipBoard(((_getBlockInputContent = getBlockInputContent(pageIndex - 1, selectedProcessableBlock)) === null || _getBlockInputContent === void 0 ? void 0 : _getBlockInputContent.content) || '');\n        }\n      };\n    }\n\n    // do not show upload button for text input block\n    if (isInputBlock(selectedProcessableBlock) && isTextInput(selectedProcessableBlock)) {\n      return undefined;\n    }\n    return {\n      icon: /*#__PURE__*/_jsxDEV(UploadOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }, this),\n      title: 'Upload',\n      label: 'Upload file',\n      onClick: openFileSelector\n    };\n  };\n  const showDropZone = () => selectedProcessableBlock && isInputBlock(selectedProcessableBlock) && !isTextInput(selectedProcessableBlock);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `\n        w-full\n        h-full\n        bg-white\n        rounded-2xl\n        border\n        border-solid\n        border-neutral-400\n        flex-grow-0\n        flex-shrink-0\n        flex\n        flex-col\n        justify-start\n        box-border\n        ${selectedProcessableBlock === undefined ? 'opacity-30' : ''}\n      `,\n    children: [/*#__PURE__*/_jsxDEV(PanelHeader, {\n      title: `${getModalityEmojiOrEmpty(getInputModality(inputPage - 1, selectedProcessableBlock))} Input ${getInputAlias(selectedProcessableBlock)}`,\n      pagination: {\n        currentPage: inputPage,\n        totalPages: getInputCount(selectedProcessableBlock),\n        onChange: newPage => {\n          setInputPage(newPage);\n        },\n        visible: getInputCount(selectedProcessableBlock) > 1\n      },\n      button: getActionButton(inputPage)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full box-border flex justify-center items-center overflow-hidden\",\n      children: hasInput(selectedProcessableBlock) ? /*#__PURE__*/_createElement(MediaViewer, {\n        modifiable: isInputBlock(selectedProcessableBlock),\n        ...getBlockInputContent(inputPage - 1, selectedProcessableBlock),\n        onMediaModified: newContent => {\n          setSelectedFile({\n            name: (selectedFile === null || selectedFile === void 0 ? void 0 : selectedFile.name) || '',\n            content: newContent\n          });\n          clear();\n        },\n        key: selectedProcessableBlock === null || selectedProcessableBlock === void 0 ? void 0 : selectedProcessableBlock.blocklyBlock.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }\n      }) : showDropZone() && /*#__PURE__*/_jsxDEV(DropZone, {\n        onDrop: setBlockInput,\n        modality: selectedProcessableBlock.blockData.outputModality,\n        accepted: getFilePickerType(selectedProcessableBlock)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this);\n};\n_s(InputPanel, \"y4RJFEhOmfdXVQCqjxTj/7rHAfo=\", false, function () {\n  return [useWorkspaceContext, useFilePicker];\n});\n_c = InputPanel;\nvar _c;\n$RefreshReg$(_c, \"InputPanel\");","map":{"version":3,"names":["useFilePicker","useWorkspaceContext","useEffect","useState","ModalityToDataReadType","ModalityToInputType","Modality","MediaViewer","copyToClipBoard","getInputCount","getInputModality","getModalityEmojiOrEmpty","getOutputFromResponse","hasInput","isInputBlock","isTextInput","saveFile","PanelHeader","CopyAll","Save","UploadOutlined","DropZone","enqueueSnackbar","jsxDEV","_jsxDEV","createElement","_createElement","MAX_ALLOWED_FILE_SIZE_MB","getBlockInputContent","index","selectedProcessableBlock","inputs","modality","blockData","outputModality","content","Object","values","length","firstInput","keys","getFilePickerType","processableBlock","getFilePickerReadType","InputPanel","_s","openFileSelector","filesContent","clear","accept","readAs","maxFileSize","inputPage","setInputPage","selectedFile","setSelectedFile","name","getInputAlias","block","_block$blocklyBlock$o","_block$blocklyBlock$o2","blockType","check","blocklyBlock","outputConnection","targetConnection","getCheck","setBlockInput","sizeInBytes","sizeInMB","variant","outputType","undefined","getActionButton","pageIndex","inputContent","Text","icon","fileName","_jsxFileName","lineNumber","columnNumber","title","label","onClick","_getBlockInputContent","showDropZone","className","children","pagination","currentPage","totalPages","onChange","newPage","visible","button","modifiable","onMediaModified","newContent","key","id","__self","__source","onDrop","accepted","_c","$RefreshReg$"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/src/components/input-output/InputPanel.tsx"],"sourcesContent":["import { useFilePicker } from 'use-file-picker'\nimport { ProcessableBlock, useWorkspaceContext } from '../../context/WorkspaceContext'\nimport { useEffect, useState } from 'react'\nimport { ModalityToDataReadType, ModalityToInputType } from '../../constants'\nimport { Modality } from '../../types'\nimport { MediaViewer } from './MediaViewer'\nimport {\n  copyToClipBoard,\n  getInputCount,\n  getInputModality,\n  getModalityEmojiOrEmpty,\n  getOutputFromResponse,\n  hasInput,\n  isInputBlock,\n  isTextInput,\n  saveFile,\n} from './input-output.util'\nimport { PanelHeader } from './PanelHeader'\nimport { CopyAll, Save, UploadOutlined } from '@mui/icons-material'\nimport { DropZone } from './DropZone'\nimport { SelectedFile } from '../../api'\nimport { enqueueSnackbar } from 'notistack'\n\nconst MAX_ALLOWED_FILE_SIZE_MB = 200\n\nconst getBlockInputContent = (index: number, selectedProcessableBlock?: ProcessableBlock) => {\n  const inputs = selectedProcessableBlock?.inputs\n\n  if (!inputs && isInputBlock(selectedProcessableBlock)) {\n    return {\n      modality: selectedProcessableBlock?.blockData.outputModality,\n      content: '',\n    }\n  }\n\n  if (!inputs || index >= Object.values(inputs).length) {\n    return null\n  }\n\n  const firstInput = Object.values(inputs)[index]\n  const modality = Object.keys(inputs)[index]\n\n  const content = getOutputFromResponse(firstInput)\n\n  return {\n    content,\n    modality: modality as Modality,\n  }\n}\n\nconst getFilePickerType = (processableBlock?: ProcessableBlock) => {\n  if (!processableBlock) {\n    return ['']\n  }\n\n  return ModalityToInputType[processableBlock.blockData.outputModality]\n}\n\nconst getFilePickerReadType = (processableBlock?: ProcessableBlock) => {\n  if (!processableBlock) {\n    return\n  }\n\n  return ModalityToDataReadType[processableBlock.blockData.outputModality]\n}\n\nexport const InputPanel = () => {\n  const { selectedProcessableBlock } = useWorkspaceContext()\n  const [openFileSelector, { filesContent, clear }] = useFilePicker({\n    accept: getFilePickerType(selectedProcessableBlock),\n    readAs: getFilePickerReadType(selectedProcessableBlock),\n    maxFileSize: 200,\n  })\n  const [inputPage, setInputPage] = useState(1)\n  const [selectedFile, setSelectedFile] = useState<SelectedFile>()\n\n  useEffect(() => {\n    if (filesContent.length > 0) {\n      const { name, content } = filesContent[0]\n      setSelectedFile({ content, name })\n      clear()\n    }\n  }, [filesContent])\n\n  const getInputAlias = (block?: ProcessableBlock) => {\n    if (!block || block.blockData.blockType !== 'input') {\n      return ''\n    }\n\n    const check = block.blocklyBlock.outputConnection?.targetConnection?.getCheck()\n\n    if (!check?.length || check.length <= 1) {\n      return ''\n    }\n\n    if (check.length > 1) {\n      return `( ${check[1]} )`\n    }\n\n    return ''\n  }\n\n  const setBlockInput = (selectedFile: SelectedFile) => {\n    // find the size in megabyte\n    const sizeInBytes = (selectedFile.content.length * 3) / 4\n    const sizeInMB = sizeInBytes / (1024 * 1024)\n\n    if (sizeInMB > MAX_ALLOWED_FILE_SIZE_MB) {\n      enqueueSnackbar('File size should be less than 200MB', { variant: 'error' })\n      return\n    }\n    const outputType = selectedProcessableBlock?.blockData.outputModality\n    if (outputType) {\n      selectedProcessableBlock.inputs = {\n        ...selectedProcessableBlock.inputs,\n        [outputType]: selectedFile,\n      }\n    }\n    // Clear to avoid same file being selected again\n    // when another block is selected\n    clear()\n    setSelectedFile(undefined)\n  }\n\n  useEffect(() => {\n    if (selectedProcessableBlock) {\n      setInputPage(1)\n      if (selectedFile !== undefined) {\n        setBlockInput(selectedFile)\n      }\n    }\n  }, [selectedProcessableBlock, selectedFile])\n\n  const getActionButton = (pageIndex: number) => {\n    if (!isInputBlock(selectedProcessableBlock)) {\n      const inputContent = getBlockInputContent(pageIndex - 1, selectedProcessableBlock)\n      if (!inputContent) {\n        return undefined\n      }\n      if (inputContent?.modality === Modality.Text) {\n        return {\n          icon: <CopyAll />,\n          title: 'Copy',\n          label: 'Copy',\n          onClick: () => copyToClipBoard(inputContent?.content || ''),\n        }\n      }\n\n      return {\n        icon: <Save />,\n        title: 'Save',\n        label: 'Save',\n        onClick: () => saveFile(inputContent?.content || ''),\n      }\n    }\n\n    if (isTextInput(selectedProcessableBlock)) {\n      return {\n        icon: <CopyAll />,\n        title: 'Copy',\n        label: 'Copy',\n        onClick: () =>\n          copyToClipBoard(\n            getBlockInputContent(pageIndex - 1, selectedProcessableBlock)?.content || '',\n          ),\n      }\n    }\n\n    // do not show upload button for text input block\n    if (isInputBlock(selectedProcessableBlock) && isTextInput(selectedProcessableBlock)) {\n      return undefined\n    }\n\n    return {\n      icon: <UploadOutlined />,\n      title: 'Upload',\n      label: 'Upload file',\n      onClick: openFileSelector,\n    }\n  }\n\n  const showDropZone = () =>\n    selectedProcessableBlock &&\n    isInputBlock(selectedProcessableBlock) &&\n    !isTextInput(selectedProcessableBlock)\n\n  return (\n    <div\n      className={`\n        w-full\n        h-full\n        bg-white\n        rounded-2xl\n        border\n        border-solid\n        border-neutral-400\n        flex-grow-0\n        flex-shrink-0\n        flex\n        flex-col\n        justify-start\n        box-border\n        ${selectedProcessableBlock === undefined ? 'opacity-30' : ''}\n      `}\n    >\n      <PanelHeader\n        title={`${getModalityEmojiOrEmpty(\n          getInputModality(inputPage - 1, selectedProcessableBlock),\n        )} Input ${getInputAlias(selectedProcessableBlock)}`}\n        pagination={{\n          currentPage: inputPage,\n          totalPages: getInputCount(selectedProcessableBlock),\n          onChange: (newPage) => {\n            setInputPage(newPage)\n          },\n          visible: getInputCount(selectedProcessableBlock) > 1,\n        }}\n        button={getActionButton(inputPage)}\n      />\n      <div className='w-full h-full box-border flex justify-center items-center overflow-hidden'>\n        {hasInput(selectedProcessableBlock) ? (\n          <MediaViewer\n            modifiable={isInputBlock(selectedProcessableBlock)}\n            {...getBlockInputContent(inputPage - 1, selectedProcessableBlock)}\n            onMediaModified={(newContent) => {\n              setSelectedFile({ name: selectedFile?.name || '', content: newContent })\n              clear()\n            }}\n            key={selectedProcessableBlock?.blocklyBlock.id}\n          />\n        ) : (\n          showDropZone() && (\n            <DropZone\n              onDrop={setBlockInput}\n              modality={selectedProcessableBlock!.blockData.outputModality}\n              accepted={getFilePickerType(selectedProcessableBlock)}\n            />\n          )\n        )}\n      </div>\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}