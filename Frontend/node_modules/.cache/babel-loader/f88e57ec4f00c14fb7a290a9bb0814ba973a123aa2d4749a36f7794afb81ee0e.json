{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n  message: _ref => {\n    let {\n      schemaCode\n    } = _ref;\n    return (0, codegen_1.str)`must match format \"${schemaCode}\"`;\n  },\n  params: _ref2 => {\n    let {\n      schemaCode\n    } = _ref2;\n    return (0, codegen_1._)`{format: ${schemaCode}}`;\n  }\n};\nconst def = {\n  keyword: \"format\",\n  type: [\"number\", \"string\"],\n  schemaType: \"string\",\n  $data: true,\n  error,\n  code(cxt, ruleType) {\n    const {\n      gen,\n      data,\n      $data,\n      schema,\n      schemaCode,\n      it\n    } = cxt;\n    const {\n      opts,\n      errSchemaPath,\n      schemaEnv,\n      self\n    } = it;\n    if (!opts.validateFormats) return;\n    if ($data) validate$DataFormat();else validateFormat();\n    function validate$DataFormat() {\n      const fmts = gen.scopeValue(\"formats\", {\n        ref: self.formats,\n        code: opts.code.formats\n      });\n      const fDef = gen.const(\"fDef\", (0, codegen_1._)`${fmts}[${schemaCode}]`);\n      const fType = gen.let(\"fType\");\n      const format = gen.let(\"format\");\n      // TODO simplify\n      gen.if((0, codegen_1._)`typeof ${fDef} == \"object\" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1._)`${fDef}.type || \"string\"`).assign(format, (0, codegen_1._)`${fDef}.validate`), () => gen.assign(fType, (0, codegen_1._)`\"string\"`).assign(format, fDef));\n      cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));\n      function unknownFmt() {\n        if (opts.strictSchema === false) return codegen_1.nil;\n        return (0, codegen_1._)`${schemaCode} && !${format}`;\n      }\n      function invalidFmt() {\n        const callFormat = schemaEnv.$async ? (0, codegen_1._)`(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))` : (0, codegen_1._)`${format}(${data})`;\n        const validData = (0, codegen_1._)`(typeof ${format} == \"function\" ? ${callFormat} : ${format}.test(${data}))`;\n        return (0, codegen_1._)`${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;\n      }\n    }\n    function validateFormat() {\n      const formatDef = self.formats[schema];\n      if (!formatDef) {\n        unknownFormat();\n        return;\n      }\n      if (formatDef === true) return;\n      const [fmtType, format, fmtRef] = getFormat(formatDef);\n      if (fmtType === ruleType) cxt.pass(validCondition());\n      function unknownFormat() {\n        if (opts.strictSchema === false) {\n          self.logger.warn(unknownMsg());\n          return;\n        }\n        throw new Error(unknownMsg());\n        function unknownMsg() {\n          return `unknown format \"${schema}\" ignored in schema at path \"${errSchemaPath}\"`;\n        }\n      }\n      function getFormat(fmtDef) {\n        const code = fmtDef instanceof RegExp ? (0, codegen_1.regexpCode)(fmtDef) : opts.code.formats ? (0, codegen_1._)`${opts.code.formats}${(0, codegen_1.getProperty)(schema)}` : undefined;\n        const fmt = gen.scopeValue(\"formats\", {\n          key: schema,\n          ref: fmtDef,\n          code\n        });\n        if (typeof fmtDef == \"object\" && !(fmtDef instanceof RegExp)) {\n          return [fmtDef.type || \"string\", fmtDef.validate, (0, codegen_1._)`${fmt}.validate`];\n        }\n        return [\"string\", fmtDef, fmt];\n      }\n      function validCondition() {\n        if (typeof formatDef == \"object\" && !(formatDef instanceof RegExp) && formatDef.async) {\n          if (!schemaEnv.$async) throw new Error(\"async format in sync schema\");\n          return (0, codegen_1._)`await ${fmtRef}(${data})`;\n        }\n        return typeof format == \"function\" ? (0, codegen_1._)`${fmtRef}(${data})` : (0, codegen_1._)`${fmtRef}.test(${data})`;\n      }\n    }\n  }\n};\nexports.default = def;","map":{"version":3,"names":["codegen_1","require","error","message","_ref","schemaCode","str","params","_ref2","_","def","keyword","type","schemaType","$data","code","cxt","ruleType","gen","data","schema","it","opts","errSchemaPath","schemaEnv","self","validateFormats","validate$DataFormat","validateFormat","fmts","scopeValue","ref","formats","fDef","const","fType","let","format","if","assign","fail$data","or","unknownFmt","invalidFmt","strictSchema","nil","callFormat","$async","validData","formatDef","unknownFormat","fmtType","fmtRef","getFormat","pass","validCondition","logger","warn","unknownMsg","Error","fmtDef","RegExp","regexpCode","getProperty","undefined","fmt","key","validate","async","exports","default"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/ajv/lib/vocabularies/format/format.ts"],"sourcesContent":["import type {\n  AddedFormat,\n  FormatValidator,\n  AsyncFormatValidator,\n  CodeKeywordDefinition,\n  KeywordErrorDefinition,\n  ErrorObject,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, nil, or, Code, getProperty, regexpCode} from \"../../compile/codegen\"\n\ntype FormatValidate =\n  | FormatValidator<string>\n  | FormatValidator<number>\n  | AsyncFormatValidator<string>\n  | AsyncFormatValidator<number>\n  | RegExp\n  | string\n  | true\n\nexport type FormatError = ErrorObject<\"format\", {format: string}, string | {$data: string}>\n\nconst error: KeywordErrorDefinition = {\n  message: ({schemaCode}) => str`must match format \"${schemaCode}\"`,\n  params: ({schemaCode}) => _`{format: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"format\",\n  type: [\"number\", \"string\"],\n  schemaType: \"string\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt, ruleType?: string) {\n    const {gen, data, $data, schema, schemaCode, it} = cxt\n    const {opts, errSchemaPath, schemaEnv, self} = it\n    if (!opts.validateFormats) return\n\n    if ($data) validate$DataFormat()\n    else validateFormat()\n\n    function validate$DataFormat(): void {\n      const fmts = gen.scopeValue(\"formats\", {\n        ref: self.formats,\n        code: opts.code.formats,\n      })\n      const fDef = gen.const(\"fDef\", _`${fmts}[${schemaCode}]`)\n      const fType = gen.let(\"fType\")\n      const format = gen.let(\"format\")\n      // TODO simplify\n      gen.if(\n        _`typeof ${fDef} == \"object\" && !(${fDef} instanceof RegExp)`,\n        () => gen.assign(fType, _`${fDef}.type || \"string\"`).assign(format, _`${fDef}.validate`),\n        () => gen.assign(fType, _`\"string\"`).assign(format, fDef)\n      )\n      cxt.fail$data(or(unknownFmt(), invalidFmt()))\n\n      function unknownFmt(): Code {\n        if (opts.strictSchema === false) return nil\n        return _`${schemaCode} && !${format}`\n      }\n\n      function invalidFmt(): Code {\n        const callFormat = schemaEnv.$async\n          ? _`(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))`\n          : _`${format}(${data})`\n        const validData = _`(typeof ${format} == \"function\" ? ${callFormat} : ${format}.test(${data}))`\n        return _`${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`\n      }\n    }\n\n    function validateFormat(): void {\n      const formatDef: AddedFormat | undefined = self.formats[schema]\n      if (!formatDef) {\n        unknownFormat()\n        return\n      }\n      if (formatDef === true) return\n      const [fmtType, format, fmtRef] = getFormat(formatDef)\n      if (fmtType === ruleType) cxt.pass(validCondition())\n\n      function unknownFormat(): void {\n        if (opts.strictSchema === false) {\n          self.logger.warn(unknownMsg())\n          return\n        }\n        throw new Error(unknownMsg())\n\n        function unknownMsg(): string {\n          return `unknown format \"${schema as string}\" ignored in schema at path \"${errSchemaPath}\"`\n        }\n      }\n\n      function getFormat(fmtDef: AddedFormat): [string, FormatValidate, Code] {\n        const code =\n          fmtDef instanceof RegExp\n            ? regexpCode(fmtDef)\n            : opts.code.formats\n            ? _`${opts.code.formats}${getProperty(schema)}`\n            : undefined\n        const fmt = gen.scopeValue(\"formats\", {key: schema, ref: fmtDef, code})\n        if (typeof fmtDef == \"object\" && !(fmtDef instanceof RegExp)) {\n          return [fmtDef.type || \"string\", fmtDef.validate, _`${fmt}.validate`]\n        }\n\n        return [\"string\", fmtDef, fmt]\n      }\n\n      function validCondition(): Code {\n        if (typeof formatDef == \"object\" && !(formatDef instanceof RegExp) && formatDef.async) {\n          if (!schemaEnv.$async) throw new Error(\"async format in sync schema\")\n          return _`await ${fmtRef}(${data})`\n        }\n        return typeof format == \"function\" ? _`${fmtRef}(${data})` : _`${fmtRef}.test(${data})`\n      }\n    }\n  },\n}\n\nexport default def\n"],"mappings":";;;;;AASA,MAAAA,SAAA,GAAAC,OAAA;AAaA,MAAMC,KAAK,GAA2B;EACpCC,OAAO,EAAEC,IAAA;IAAA,IAAC;MAACC;IAAU,CAAC,GAAAD,IAAA;IAAA,OAAK,IAAAJ,SAAA,CAAAM,GAAG,uBAAsBD,UAAU,GAAG;EAAA;EACjEE,MAAM,EAAEC,KAAA;IAAA,IAAC;MAACH;IAAU,CAAC,GAAAG,KAAA;IAAA,OAAK,IAAAR,SAAA,CAAAS,CAAC,aAAYJ,UAAU,GAAG;EAAA;CACrD;AAED,MAAMK,GAAG,GAA0B;EACjCC,OAAO,EAAE,QAAQ;EACjBC,IAAI,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC;EAC1BC,UAAU,EAAE,QAAQ;EACpBC,KAAK,EAAE,IAAI;EACXZ,KAAK;EACLa,IAAIA,CAACC,GAAe,EAAEC,QAAiB;IACrC,MAAM;MAACC,GAAG;MAAEC,IAAI;MAAEL,KAAK;MAAEM,MAAM;MAAEf,UAAU;MAAEgB;IAAE,CAAC,GAAGL,GAAG;IACtD,MAAM;MAACM,IAAI;MAAEC,aAAa;MAAEC,SAAS;MAAEC;IAAI,CAAC,GAAGJ,EAAE;IACjD,IAAI,CAACC,IAAI,CAACI,eAAe,EAAE;IAE3B,IAAIZ,KAAK,EAAEa,mBAAmB,EAAE,MAC3BC,cAAc,EAAE;IAErB,SAASD,mBAAmBA,CAAA;MAC1B,MAAME,IAAI,GAAGX,GAAG,CAACY,UAAU,CAAC,SAAS,EAAE;QACrCC,GAAG,EAAEN,IAAI,CAACO,OAAO;QACjBjB,IAAI,EAAEO,IAAI,CAACP,IAAI,CAACiB;OACjB,CAAC;MACF,MAAMC,IAAI,GAAGf,GAAG,CAACgB,KAAK,CAAC,MAAM,EAAE,IAAAlC,SAAA,CAAAS,CAAC,IAAGoB,IAAI,IAAIxB,UAAU,GAAG,CAAC;MACzD,MAAM8B,KAAK,GAAGjB,GAAG,CAACkB,GAAG,CAAC,OAAO,CAAC;MAC9B,MAAMC,MAAM,GAAGnB,GAAG,CAACkB,GAAG,CAAC,QAAQ,CAAC;MAChC;MACAlB,GAAG,CAACoB,EAAE,CACJ,IAAAtC,SAAA,CAAAS,CAAC,WAAUwB,IAAI,qBAAqBA,IAAI,qBAAqB,EAC7D,MAAMf,GAAG,CAACqB,MAAM,CAACJ,KAAK,EAAE,IAAAnC,SAAA,CAAAS,CAAC,IAAGwB,IAAI,mBAAmB,CAAC,CAACM,MAAM,CAACF,MAAM,EAAE,IAAArC,SAAA,CAAAS,CAAC,IAAGwB,IAAI,WAAW,CAAC,EACxF,MAAMf,GAAG,CAACqB,MAAM,CAACJ,KAAK,EAAE,IAAAnC,SAAA,CAAAS,CAAC,WAAU,CAAC,CAAC8B,MAAM,CAACF,MAAM,EAAEJ,IAAI,CAAC,CAC1D;MACDjB,GAAG,CAACwB,SAAS,CAAC,IAAAxC,SAAA,CAAAyC,EAAE,EAACC,UAAU,EAAE,EAAEC,UAAU,EAAE,CAAC,CAAC;MAE7C,SAASD,UAAUA,CAAA;QACjB,IAAIpB,IAAI,CAACsB,YAAY,KAAK,KAAK,EAAE,OAAO5C,SAAA,CAAA6C,GAAG;QAC3C,OAAO,IAAA7C,SAAA,CAAAS,CAAC,IAAGJ,UAAU,QAAQgC,MAAM,EAAE;MACvC;MAEA,SAASM,UAAUA,CAAA;QACjB,MAAMG,UAAU,GAAGtB,SAAS,CAACuB,MAAM,GAC/B,IAAA/C,SAAA,CAAAS,CAAC,KAAIwB,IAAI,kBAAkBI,MAAM,IAAIlB,IAAI,OAAOkB,MAAM,IAAIlB,IAAI,IAAI,GAClE,IAAAnB,SAAA,CAAAS,CAAC,IAAG4B,MAAM,IAAIlB,IAAI,GAAG;QACzB,MAAM6B,SAAS,GAAG,IAAAhD,SAAA,CAAAS,CAAC,YAAW4B,MAAM,oBAAoBS,UAAU,MAAMT,MAAM,SAASlB,IAAI,IAAI;QAC/F,OAAO,IAAAnB,SAAA,CAAAS,CAAC,IAAG4B,MAAM,OAAOA,MAAM,gBAAgBF,KAAK,QAAQlB,QAAQ,QAAQ+B,SAAS,EAAE;MACxF;IACF;IAEA,SAASpB,cAAcA,CAAA;MACrB,MAAMqB,SAAS,GAA4BxB,IAAI,CAACO,OAAO,CAACZ,MAAM,CAAC;MAC/D,IAAI,CAAC6B,SAAS,EAAE;QACdC,aAAa,EAAE;QACf;;MAEF,IAAID,SAAS,KAAK,IAAI,EAAE;MACxB,MAAM,CAACE,OAAO,EAAEd,MAAM,EAAEe,MAAM,CAAC,GAAGC,SAAS,CAACJ,SAAS,CAAC;MACtD,IAAIE,OAAO,KAAKlC,QAAQ,EAAED,GAAG,CAACsC,IAAI,CAACC,cAAc,EAAE,CAAC;MAEpD,SAASL,aAAaA,CAAA;QACpB,IAAI5B,IAAI,CAACsB,YAAY,KAAK,KAAK,EAAE;UAC/BnB,IAAI,CAAC+B,MAAM,CAACC,IAAI,CAACC,UAAU,EAAE,CAAC;UAC9B;;QAEF,MAAM,IAAIC,KAAK,CAACD,UAAU,EAAE,CAAC;QAE7B,SAASA,UAAUA,CAAA;UACjB,OAAO,mBAAmBtC,MAAgB,gCAAgCG,aAAa,GAAG;QAC5F;MACF;MAEA,SAAS8B,SAASA,CAACO,MAAmB;QACpC,MAAM7C,IAAI,GACR6C,MAAM,YAAYC,MAAM,GACpB,IAAA7D,SAAA,CAAA8D,UAAU,EAACF,MAAM,CAAC,GAClBtC,IAAI,CAACP,IAAI,CAACiB,OAAO,GACjB,IAAAhC,SAAA,CAAAS,CAAC,IAAGa,IAAI,CAACP,IAAI,CAACiB,OAAO,GAAG,IAAAhC,SAAA,CAAA+D,WAAW,EAAC3C,MAAM,CAAC,EAAE,GAC7C4C,SAAS;QACf,MAAMC,GAAG,GAAG/C,GAAG,CAACY,UAAU,CAAC,SAAS,EAAE;UAACoC,GAAG,EAAE9C,MAAM;UAAEW,GAAG,EAAE6B,MAAM;UAAE7C;QAAI,CAAC,CAAC;QACvE,IAAI,OAAO6C,MAAM,IAAI,QAAQ,IAAI,EAAEA,MAAM,YAAYC,MAAM,CAAC,EAAE;UAC5D,OAAO,CAACD,MAAM,CAAChD,IAAI,IAAI,QAAQ,EAAEgD,MAAM,CAACO,QAAQ,EAAE,IAAAnE,SAAA,CAAAS,CAAC,IAAGwD,GAAG,WAAW,CAAC;;QAGvE,OAAO,CAAC,QAAQ,EAAEL,MAAM,EAAEK,GAAG,CAAC;MAChC;MAEA,SAASV,cAAcA,CAAA;QACrB,IAAI,OAAON,SAAS,IAAI,QAAQ,IAAI,EAAEA,SAAS,YAAYY,MAAM,CAAC,IAAIZ,SAAS,CAACmB,KAAK,EAAE;UACrF,IAAI,CAAC5C,SAAS,CAACuB,MAAM,EAAE,MAAM,IAAIY,KAAK,CAAC,6BAA6B,CAAC;UACrE,OAAO,IAAA3D,SAAA,CAAAS,CAAC,UAAS2C,MAAM,IAAIjC,IAAI,GAAG;;QAEpC,OAAO,OAAOkB,MAAM,IAAI,UAAU,GAAG,IAAArC,SAAA,CAAAS,CAAC,IAAG2C,MAAM,IAAIjC,IAAI,GAAG,GAAG,IAAAnB,SAAA,CAAAS,CAAC,IAAG2C,MAAM,SAASjC,IAAI,GAAG;MACzF;IACF;EACF;CACD;AAEDkD,OAAA,CAAAC,OAAA,GAAe5D,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}