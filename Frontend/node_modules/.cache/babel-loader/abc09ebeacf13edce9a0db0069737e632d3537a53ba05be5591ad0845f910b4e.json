{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport { useTooltipContext } from '../context';\nexport const useTooltip = () => {\n  _s();\n  const {\n    tooltipInfo,\n    setTooltipInfo\n  } = useTooltipContext();\n\n  // We need these refs to be able to access tooltipInfo in the mouseenter and mouseleave\n  // listeners, otherwise they will be undefined because of the closure of tooltipInfo.\n  const tooltipInfoRef = useRef(tooltipInfo);\n  const setTooltipInfoRef = useRef(setTooltipInfo);\n  useEffect(() => {\n    tooltipInfoRef.current = tooltipInfo;\n    setTooltipInfoRef.current = setTooltipInfo;\n  }, [tooltipInfo, setTooltipInfo]);\n  const setupTooltipListeners = workspace => {\n    if (!workspace) return;\n    Blockly.Tooltip.HOVER_MS = 400; // Reduce hover time to 400ms\n\n    workspace.addChangeListener(event => {\n      if (event.type === Blockly.Events.BLOCK_MOVE) {\n        const block = workspace.getBlockById(event.blockId);\n        if (!block || !block.data) return;\n        const tooltipContent = createTooltipContent(block);\n        block.setTooltip(() => tooltipContent);\n      }\n    });\n  };\n  const onMouseOverTooltipComponent = () => {\n    setTooltipInfoRef.current({\n      ...tooltipInfo,\n      tooltipHovered: true\n    });\n  };\n  const onMouseLeaveTooltipComponent = () => {\n    setTooltipInfoRef.current(undefined);\n  };\n  return {\n    setupTooltipListeners,\n    onMouseLeaveTooltipComponent,\n    onMouseOverTooltipComponent,\n    tooltipInfo: tooltipInfoRef.current,\n    setTooltipInfo: setTooltipInfoRef.current\n  };\n};\n_s(useTooltip, \"s7+CkJalA0OIvlEe4+Ubqbq9sug=\", false, function () {\n  return [useTooltipContext];\n});","map":{"version":3,"names":["useEffect","useRef","useTooltipContext","useTooltip","_s","tooltipInfo","setTooltipInfo","tooltipInfoRef","setTooltipInfoRef","current","setupTooltipListeners","workspace","Blockly","Tooltip","HOVER_MS","addChangeListener","event","type","Events","BLOCK_MOVE","block","getBlockById","blockId","data","tooltipContent","createTooltipContent","setTooltip","onMouseOverTooltipComponent","tooltipHovered","onMouseLeaveTooltipComponent","undefined"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/src/hooks/useTooltip.ts"],"sourcesContent":["import { useEffect, useRef } from 'react'\nimport { BlockSvg, WorkspaceSvg } from 'blockly/core'\nimport { useTooltipContext } from '../context'\n\nexport const useTooltip = () => {\n  const { tooltipInfo, setTooltipInfo } = useTooltipContext()\n\n  // We need these refs to be able to access tooltipInfo in the mouseenter and mouseleave\n  // listeners, otherwise they will be undefined because of the closure of tooltipInfo.\n  const tooltipInfoRef = useRef(tooltipInfo)\n  const setTooltipInfoRef = useRef(setTooltipInfo)\n\n  useEffect(() => {\n    tooltipInfoRef.current = tooltipInfo\n    setTooltipInfoRef.current = setTooltipInfo\n  }, [tooltipInfo, setTooltipInfo])\n\n  const setupTooltipListeners = (workspace: Blockly.WorkspaceSvg | undefined) => {\n    if (!workspace) return;\n    \n    Blockly.Tooltip.HOVER_MS = 400; // Reduce hover time to 400ms\n    \n    workspace.addChangeListener((event: any) => {\n      if (event.type === Blockly.Events.BLOCK_MOVE) {\n        const block = workspace.getBlockById(event.blockId);\n        if (!block || !block.data) return;\n        \n        const tooltipContent = createTooltipContent(block);\n        block.setTooltip(() => tooltipContent);\n      }\n    });\n  }\n\n  const onMouseOverTooltipComponent = () => {\n    setTooltipInfoRef.current({ ...tooltipInfo, tooltipHovered: true })\n  }\n\n  const onMouseLeaveTooltipComponent = () => {\n    setTooltipInfoRef.current(undefined)\n  }\n\n  return {\n    setupTooltipListeners,\n    onMouseLeaveTooltipComponent,\n    onMouseOverTooltipComponent,\n    tooltipInfo: tooltipInfoRef.current,\n    setTooltipInfo: setTooltipInfoRef.current,\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEzC,SAASC,iBAAiB,QAAQ,YAAY;AAE9C,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM;IAAEC,WAAW;IAAEC;EAAe,CAAC,GAAGJ,iBAAiB,CAAC,CAAC;;EAE3D;EACA;EACA,MAAMK,cAAc,GAAGN,MAAM,CAACI,WAAW,CAAC;EAC1C,MAAMG,iBAAiB,GAAGP,MAAM,CAACK,cAAc,CAAC;EAEhDN,SAAS,CAAC,MAAM;IACdO,cAAc,CAACE,OAAO,GAAGJ,WAAW;IACpCG,iBAAiB,CAACC,OAAO,GAAGH,cAAc;EAC5C,CAAC,EAAE,CAACD,WAAW,EAAEC,cAAc,CAAC,CAAC;EAEjC,MAAMI,qBAAqB,GAAIC,SAA2C,IAAK;IAC7E,IAAI,CAACA,SAAS,EAAE;IAEhBC,OAAO,CAACC,OAAO,CAACC,QAAQ,GAAG,GAAG,CAAC,CAAC;;IAEhCH,SAAS,CAACI,iBAAiB,CAAEC,KAAU,IAAK;MAC1C,IAAIA,KAAK,CAACC,IAAI,KAAKL,OAAO,CAACM,MAAM,CAACC,UAAU,EAAE;QAC5C,MAAMC,KAAK,GAAGT,SAAS,CAACU,YAAY,CAACL,KAAK,CAACM,OAAO,CAAC;QACnD,IAAI,CAACF,KAAK,IAAI,CAACA,KAAK,CAACG,IAAI,EAAE;QAE3B,MAAMC,cAAc,GAAGC,oBAAoB,CAACL,KAAK,CAAC;QAClDA,KAAK,CAACM,UAAU,CAAC,MAAMF,cAAc,CAAC;MACxC;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMG,2BAA2B,GAAGA,CAAA,KAAM;IACxCnB,iBAAiB,CAACC,OAAO,CAAC;MAAE,GAAGJ,WAAW;MAAEuB,cAAc,EAAE;IAAK,CAAC,CAAC;EACrE,CAAC;EAED,MAAMC,4BAA4B,GAAGA,CAAA,KAAM;IACzCrB,iBAAiB,CAACC,OAAO,CAACqB,SAAS,CAAC;EACtC,CAAC;EAED,OAAO;IACLpB,qBAAqB;IACrBmB,4BAA4B;IAC5BF,2BAA2B;IAC3BtB,WAAW,EAAEE,cAAc,CAACE,OAAO;IACnCH,cAAc,EAAEE,iBAAiB,CAACC;EACpC,CAAC;AACH,CAAC;AAAAL,EAAA,CA5CYD,UAAU;EAAA,QACmBD,iBAAiB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}