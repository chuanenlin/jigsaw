{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MissingRefError = exports.ValidationError = exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;\nconst core_1 = require(\"./core\");\nconst draft7_1 = require(\"./vocabularies/draft7\");\nconst discriminator_1 = require(\"./vocabularies/discriminator\");\nconst draft7MetaSchema = require(\"./refs/json-schema-draft-07.json\");\nconst META_SUPPORT_DATA = [\"/properties\"];\nconst META_SCHEMA_ID = \"http://json-schema.org/draft-07/schema\";\nclass Ajv extends core_1.default {\n  _addVocabularies() {\n    super._addVocabularies();\n    draft7_1.default.forEach(v => this.addVocabulary(v));\n    if (this.opts.discriminator) this.addKeyword(discriminator_1.default);\n  }\n  _addDefaultMetaSchema() {\n    super._addDefaultMetaSchema();\n    if (!this.opts.meta) return;\n    const metaSchema = this.opts.$data ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA) : draft7MetaSchema;\n    this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);\n    this.refs[\"http://json-schema.org/schema\"] = META_SCHEMA_ID;\n  }\n  defaultMeta() {\n    return this.opts.defaultMeta = super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined);\n  }\n}\nmodule.exports = exports = Ajv;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Ajv;\nvar validate_1 = require(\"./compile/validate\");\nObject.defineProperty(exports, \"KeywordCxt\", {\n  enumerable: true,\n  get: function () {\n    return validate_1.KeywordCxt;\n  }\n});\nvar codegen_1 = require(\"./compile/codegen\");\nObject.defineProperty(exports, \"_\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1._;\n  }\n});\nObject.defineProperty(exports, \"str\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.str;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.stringify;\n  }\n});\nObject.defineProperty(exports, \"nil\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.nil;\n  }\n});\nObject.defineProperty(exports, \"Name\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.Name;\n  }\n});\nObject.defineProperty(exports, \"CodeGen\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.CodeGen;\n  }\n});\nvar validation_error_1 = require(\"./runtime/validation_error\");\nObject.defineProperty(exports, \"ValidationError\", {\n  enumerable: true,\n  get: function () {\n    return validation_error_1.default;\n  }\n});\nvar ref_error_1 = require(\"./compile/ref_error\");\nObject.defineProperty(exports, \"MissingRefError\", {\n  enumerable: true,\n  get: function () {\n    return ref_error_1.default;\n  }\n});","map":{"version":3,"names":["core_1","require","draft7_1","discriminator_1","draft7MetaSchema","META_SUPPORT_DATA","META_SCHEMA_ID","Ajv","default","_addVocabularies","forEach","v","addVocabulary","opts","discriminator","addKeyword","_addDefaultMetaSchema","meta","metaSchema","$data","$dataMetaSchema","addMetaSchema","refs","defaultMeta","getSchema","undefined","module","exports","Object","defineProperty","value","validate_1","enumerable","get","KeywordCxt","codegen_1","_","str","stringify","nil","Name","CodeGen","validation_error_1","ref_error_1"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/ajv/lib/ajv.ts"],"sourcesContent":["import type {AnySchemaObject} from \"./types\"\nimport AjvCore from \"./core\"\nimport draft7Vocabularies from \"./vocabularies/draft7\"\nimport discriminator from \"./vocabularies/discriminator\"\nimport * as draft7MetaSchema from \"./refs/json-schema-draft-07.json\"\n\nconst META_SUPPORT_DATA = [\"/properties\"]\n\nconst META_SCHEMA_ID = \"http://json-schema.org/draft-07/schema\"\n\nclass Ajv extends AjvCore {\n  _addVocabularies(): void {\n    super._addVocabularies()\n    draft7Vocabularies.forEach((v) => this.addVocabulary(v))\n    if (this.opts.discriminator) this.addKeyword(discriminator)\n  }\n\n  _addDefaultMetaSchema(): void {\n    super._addDefaultMetaSchema()\n    if (!this.opts.meta) return\n    const metaSchema = this.opts.$data\n      ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA)\n      : draft7MetaSchema\n    this.addMetaSchema(metaSchema, META_SCHEMA_ID, false)\n    this.refs[\"http://json-schema.org/schema\"] = META_SCHEMA_ID\n  }\n\n  defaultMeta(): string | AnySchemaObject | undefined {\n    return (this.opts.defaultMeta =\n      super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined))\n  }\n}\n\nmodule.exports = exports = Ajv\nObject.defineProperty(exports, \"__esModule\", {value: true})\n\nexport default Ajv\n\nexport {\n  Format,\n  FormatDefinition,\n  AsyncFormatDefinition,\n  KeywordDefinition,\n  KeywordErrorDefinition,\n  CodeKeywordDefinition,\n  MacroKeywordDefinition,\n  FuncKeywordDefinition,\n  Vocabulary,\n  Schema,\n  SchemaObject,\n  AnySchemaObject,\n  AsyncSchema,\n  AnySchema,\n  ValidateFunction,\n  AsyncValidateFunction,\n  SchemaValidateFunction,\n  ErrorObject,\n  ErrorNoParams,\n} from \"./types\"\n\nexport {Plugin, Options, CodeOptions, InstanceOptions, Logger, ErrorsTextOptions} from \"./core\"\nexport {SchemaCxt, SchemaObjCxt} from \"./compile\"\nexport {KeywordCxt} from \"./compile/validate\"\nexport {DefinedError} from \"./vocabularies/errors\"\nexport {JSONType} from \"./compile/rules\"\nexport {JSONSchemaType} from \"./types/json-schema\"\nexport {_, str, stringify, nil, Name, Code, CodeGen, CodeGenOptions} from \"./compile/codegen\"\nexport {default as ValidationError} from \"./runtime/validation_error\"\nexport {default as MissingRefError} from \"./compile/ref_error\"\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}