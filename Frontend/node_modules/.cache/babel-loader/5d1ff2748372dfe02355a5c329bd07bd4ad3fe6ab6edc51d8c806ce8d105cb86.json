{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.callRef = exports.getValidate = void 0;\nconst ref_error_1 = require(\"../../compile/ref_error\");\nconst code_1 = require(\"../code\");\nconst codegen_1 = require(\"../../compile/codegen\");\nconst names_1 = require(\"../../compile/names\");\nconst compile_1 = require(\"../../compile\");\nconst util_1 = require(\"../../compile/util\");\nconst def = {\n  keyword: \"$ref\",\n  schemaType: \"string\",\n  code(cxt) {\n    const {\n      gen,\n      schema: $ref,\n      it\n    } = cxt;\n    const {\n      baseId,\n      schemaEnv: env,\n      validateName,\n      opts,\n      self\n    } = it;\n    const {\n      root\n    } = env;\n    if (($ref === \"#\" || $ref === \"#/\") && baseId === root.baseId) return callRootRef();\n    const schOrEnv = compile_1.resolveRef.call(self, root, baseId, $ref);\n    if (schOrEnv === undefined) throw new ref_error_1.default(it.opts.uriResolver, baseId, $ref);\n    if (schOrEnv instanceof compile_1.SchemaEnv) return callValidate(schOrEnv);\n    return inlineRefSchema(schOrEnv);\n    function callRootRef() {\n      if (env === root) return callRef(cxt, validateName, env, env.$async);\n      const rootName = gen.scopeValue(\"root\", {\n        ref: root\n      });\n      return callRef(cxt, (0, codegen_1._)`${rootName}.validate`, root, root.$async);\n    }\n    function callValidate(sch) {\n      const v = getValidate(cxt, sch);\n      callRef(cxt, v, sch, sch.$async);\n    }\n    function inlineRefSchema(sch) {\n      const schName = gen.scopeValue(\"schema\", opts.code.source === true ? {\n        ref: sch,\n        code: (0, codegen_1.stringify)(sch)\n      } : {\n        ref: sch\n      });\n      const valid = gen.name(\"valid\");\n      const schCxt = cxt.subschema({\n        schema: sch,\n        dataTypes: [],\n        schemaPath: codegen_1.nil,\n        topSchemaRef: schName,\n        errSchemaPath: $ref\n      }, valid);\n      cxt.mergeEvaluated(schCxt);\n      cxt.ok(valid);\n    }\n  }\n};\nfunction getValidate(cxt, sch) {\n  const {\n    gen\n  } = cxt;\n  return sch.validate ? gen.scopeValue(\"validate\", {\n    ref: sch.validate\n  }) : (0, codegen_1._)`${gen.scopeValue(\"wrapper\", {\n    ref: sch\n  })}.validate`;\n}\nexports.getValidate = getValidate;\nfunction callRef(cxt, v, sch, $async) {\n  const {\n    gen,\n    it\n  } = cxt;\n  const {\n    allErrors,\n    schemaEnv: env,\n    opts\n  } = it;\n  const passCxt = opts.passContext ? names_1.default.this : codegen_1.nil;\n  if ($async) callAsyncRef();else callSyncRef();\n  function callAsyncRef() {\n    if (!env.$async) throw new Error(\"async schema referenced by sync schema\");\n    const valid = gen.let(\"valid\");\n    gen.try(() => {\n      gen.code((0, codegen_1._)`await ${(0, code_1.callValidateCode)(cxt, v, passCxt)}`);\n      addEvaluatedFrom(v); // TODO will not work with async, it has to be returned with the result\n      if (!allErrors) gen.assign(valid, true);\n    }, e => {\n      gen.if((0, codegen_1._)`!(${e} instanceof ${it.ValidationError})`, () => gen.throw(e));\n      addErrorsFrom(e);\n      if (!allErrors) gen.assign(valid, false);\n    });\n    cxt.ok(valid);\n  }\n  function callSyncRef() {\n    cxt.result((0, code_1.callValidateCode)(cxt, v, passCxt), () => addEvaluatedFrom(v), () => addErrorsFrom(v));\n  }\n  function addErrorsFrom(source) {\n    const errs = (0, codegen_1._)`${source}.errors`;\n    gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`); // TODO tagged\n    gen.assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);\n  }\n  function addEvaluatedFrom(source) {\n    var _a;\n    if (!it.opts.unevaluated) return;\n    const schEvaluated = (_a = sch === null || sch === void 0 ? void 0 : sch.validate) === null || _a === void 0 ? void 0 : _a.evaluated;\n    // TODO refactor\n    if (it.props !== true) {\n      if (schEvaluated && !schEvaluated.dynamicProps) {\n        if (schEvaluated.props !== undefined) {\n          it.props = util_1.mergeEvaluated.props(gen, schEvaluated.props, it.props);\n        }\n      } else {\n        const props = gen.var(\"props\", (0, codegen_1._)`${source}.evaluated.props`);\n        it.props = util_1.mergeEvaluated.props(gen, props, it.props, codegen_1.Name);\n      }\n    }\n    if (it.items !== true) {\n      if (schEvaluated && !schEvaluated.dynamicItems) {\n        if (schEvaluated.items !== undefined) {\n          it.items = util_1.mergeEvaluated.items(gen, schEvaluated.items, it.items);\n        }\n      } else {\n        const items = gen.var(\"items\", (0, codegen_1._)`${source}.evaluated.items`);\n        it.items = util_1.mergeEvaluated.items(gen, items, it.items, codegen_1.Name);\n      }\n    }\n  }\n}\nexports.callRef = callRef;\nexports.default = def;","map":{"version":3,"names":["ref_error_1","require","code_1","codegen_1","names_1","compile_1","util_1","def","keyword","schemaType","code","cxt","gen","schema","$ref","it","baseId","schemaEnv","env","validateName","opts","self","root","callRootRef","schOrEnv","resolveRef","call","undefined","default","uriResolver","SchemaEnv","callValidate","inlineRefSchema","callRef","$async","rootName","scopeValue","ref","_","sch","v","getValidate","schName","source","stringify","valid","name","schCxt","subschema","dataTypes","schemaPath","nil","topSchemaRef","errSchemaPath","mergeEvaluated","ok","validate","exports","allErrors","passCxt","passContext","this","callAsyncRef","callSyncRef","Error","let","try","callValidateCode","addEvaluatedFrom","assign","e","if","ValidationError","throw","addErrorsFrom","result","errs","vErrors","errors","unevaluated","schEvaluated","_a","evaluated","props","dynamicProps","var","Name","items","dynamicItems"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/ajv/lib/vocabularies/core/ref.ts"],"sourcesContent":["import type {CodeKeywordDefinition, AnySchema} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport MissingRefError from \"../../compile/ref_error\"\nimport {callValidateCode} from \"../code\"\nimport {_, nil, stringify, Code, Name} from \"../../compile/codegen\"\nimport N from \"../../compile/names\"\nimport {SchemaEnv, resolveRef} from \"../../compile\"\nimport {mergeEvaluated} from \"../../compile/util\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"$ref\",\n  schemaType: \"string\",\n  code(cxt: KeywordCxt): void {\n    const {gen, schema: $ref, it} = cxt\n    const {baseId, schemaEnv: env, validateName, opts, self} = it\n    const {root} = env\n    if (($ref === \"#\" || $ref === \"#/\") && baseId === root.baseId) return callRootRef()\n    const schOrEnv = resolveRef.call(self, root, baseId, $ref)\n    if (schOrEnv === undefined) throw new MissingRefError(it.opts.uriResolver, baseId, $ref)\n    if (schOrEnv instanceof SchemaEnv) return callValidate(schOrEnv)\n    return inlineRefSchema(schOrEnv)\n\n    function callRootRef(): void {\n      if (env === root) return callRef(cxt, validateName, env, env.$async)\n      const rootName = gen.scopeValue(\"root\", {ref: root})\n      return callRef(cxt, _`${rootName}.validate`, root, root.$async)\n    }\n\n    function callValidate(sch: SchemaEnv): void {\n      const v = getValidate(cxt, sch)\n      callRef(cxt, v, sch, sch.$async)\n    }\n\n    function inlineRefSchema(sch: AnySchema): void {\n      const schName = gen.scopeValue(\n        \"schema\",\n        opts.code.source === true ? {ref: sch, code: stringify(sch)} : {ref: sch}\n      )\n      const valid = gen.name(\"valid\")\n      const schCxt = cxt.subschema(\n        {\n          schema: sch,\n          dataTypes: [],\n          schemaPath: nil,\n          topSchemaRef: schName,\n          errSchemaPath: $ref,\n        },\n        valid\n      )\n      cxt.mergeEvaluated(schCxt)\n      cxt.ok(valid)\n    }\n  },\n}\n\nexport function getValidate(cxt: KeywordCxt, sch: SchemaEnv): Code {\n  const {gen} = cxt\n  return sch.validate\n    ? gen.scopeValue(\"validate\", {ref: sch.validate})\n    : _`${gen.scopeValue(\"wrapper\", {ref: sch})}.validate`\n}\n\nexport function callRef(cxt: KeywordCxt, v: Code, sch?: SchemaEnv, $async?: boolean): void {\n  const {gen, it} = cxt\n  const {allErrors, schemaEnv: env, opts} = it\n  const passCxt = opts.passContext ? N.this : nil\n  if ($async) callAsyncRef()\n  else callSyncRef()\n\n  function callAsyncRef(): void {\n    if (!env.$async) throw new Error(\"async schema referenced by sync schema\")\n    const valid = gen.let(\"valid\")\n    gen.try(\n      () => {\n        gen.code(_`await ${callValidateCode(cxt, v, passCxt)}`)\n        addEvaluatedFrom(v) // TODO will not work with async, it has to be returned with the result\n        if (!allErrors) gen.assign(valid, true)\n      },\n      (e) => {\n        gen.if(_`!(${e} instanceof ${it.ValidationError as Name})`, () => gen.throw(e))\n        addErrorsFrom(e)\n        if (!allErrors) gen.assign(valid, false)\n      }\n    )\n    cxt.ok(valid)\n  }\n\n  function callSyncRef(): void {\n    cxt.result(\n      callValidateCode(cxt, v, passCxt),\n      () => addEvaluatedFrom(v),\n      () => addErrorsFrom(v)\n    )\n  }\n\n  function addErrorsFrom(source: Code): void {\n    const errs = _`${source}.errors`\n    gen.assign(N.vErrors, _`${N.vErrors} === null ? ${errs} : ${N.vErrors}.concat(${errs})`) // TODO tagged\n    gen.assign(N.errors, _`${N.vErrors}.length`)\n  }\n\n  function addEvaluatedFrom(source: Code): void {\n    if (!it.opts.unevaluated) return\n    const schEvaluated = sch?.validate?.evaluated\n    // TODO refactor\n    if (it.props !== true) {\n      if (schEvaluated && !schEvaluated.dynamicProps) {\n        if (schEvaluated.props !== undefined) {\n          it.props = mergeEvaluated.props(gen, schEvaluated.props, it.props)\n        }\n      } else {\n        const props = gen.var(\"props\", _`${source}.evaluated.props`)\n        it.props = mergeEvaluated.props(gen, props, it.props, Name)\n      }\n    }\n    if (it.items !== true) {\n      if (schEvaluated && !schEvaluated.dynamicItems) {\n        if (schEvaluated.items !== undefined) {\n          it.items = mergeEvaluated.items(gen, schEvaluated.items, it.items)\n        }\n      } else {\n        const items = gen.var(\"items\", _`${source}.evaluated.items`)\n        it.items = mergeEvaluated.items(gen, items, it.items, Name)\n      }\n    }\n  }\n}\n\nexport default def\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}