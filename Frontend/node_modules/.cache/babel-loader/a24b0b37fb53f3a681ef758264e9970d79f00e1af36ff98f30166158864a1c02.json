{"ast":null,"code":"import { Modality } from '../types';\nimport { makeApiCall } from './api';\nimport { UploadEndpoint } from '../constants';\nimport { AxiosHeaders } from 'axios';\nconst headers = new AxiosHeaders();\nheaders.set('accept', 'application/json');\nheaders.set('Content-Type', 'multipart/form-data');\nexport const uploadImage = async formData => makeApiCall(UploadEndpoint.UploadImage, formData, headers);\nexport const uploadAudio = async formData => makeApiCall(UploadEndpoint.UploadAudio, formData, headers);\nexport const uploadVideo = async formData => makeApiCall(UploadEndpoint.UploadVideo, formData, headers);\nexport const upload3D = async formData => makeApiCall(UploadEndpoint.Upload3D, formData, headers);\nexport const uploadFile = async (data, type) => {\n  // Convert DataUrl to Blob to be used in FormData\n  const fetchResponse = await fetch(data.content);\n  const blob = await fetchResponse.blob();\n  const formData = new FormData();\n  formData.append('file', blob, data.name);\n  if (type === Modality.Image) {\n    return uploadImage(formData);\n  } else if (type === Modality.Audio) {\n    return uploadAudio(formData);\n  } else if (type === Modality.Video) {\n    return uploadVideo(formData);\n  } else if (type === Modality.ThreeDimentional) {\n    return upload3D(formData);\n  }\n  throw new Error(`Unsupported file type: ${type}`);\n};","map":{"version":3,"names":["Modality","makeApiCall","UploadEndpoint","AxiosHeaders","headers","set","uploadImage","formData","UploadImage","uploadAudio","UploadAudio","uploadVideo","UploadVideo","upload3D","Upload3D","uploadFile","data","type","fetchResponse","fetch","content","blob","FormData","append","name","Image","Audio","Video","ThreeDimentional","Error"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/src/api/upload.ts"],"sourcesContent":["import { Modality } from '../types'\nimport { makeApiCall } from './api'\nimport { UploadEndpoint } from '../constants'\nimport { AxiosHeaders } from 'axios'\nimport { SelectedFile } from './types'\n\ninterface UploadResponse {\n  file_url: string\n}\n\nconst headers = new AxiosHeaders()\nheaders.set('accept', 'application/json')\nheaders.set('Content-Type', 'multipart/form-data')\n\nexport const uploadImage = async (formData: FormData): Promise<UploadResponse> =>\n  makeApiCall(UploadEndpoint.UploadImage, formData, headers)\n\nexport const uploadAudio = async (formData: FormData): Promise<UploadResponse> =>\n  makeApiCall(UploadEndpoint.UploadAudio, formData, headers)\n\nexport const uploadVideo = async (formData: FormData): Promise<UploadResponse> =>\n  makeApiCall(UploadEndpoint.UploadVideo, formData, headers)\n\nexport const upload3D = async (formData: FormData): Promise<UploadResponse> =>\n  makeApiCall(UploadEndpoint.Upload3D, formData, headers)\n\nexport const uploadFile = async (data: SelectedFile, type: Modality) => {\n  // Convert DataUrl to Blob to be used in FormData\n  const fetchResponse = await fetch(data.content)\n  const blob = await fetchResponse.blob()\n\n  const formData = new FormData()\n\n  formData.append('file', blob, data.name)\n\n  if (type === Modality.Image) {\n    return uploadImage(formData)\n  } else if (type === Modality.Audio) {\n    return uploadAudio(formData)\n  } else if (type === Modality.Video) {\n    return uploadVideo(formData)\n  } else if (type === Modality.ThreeDimentional) {\n    return upload3D(formData)\n  }\n\n  throw new Error(`Unsupported file type: ${type}`)\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,UAAU;AACnC,SAASC,WAAW,QAAQ,OAAO;AACnC,SAASC,cAAc,QAAQ,cAAc;AAC7C,SAASC,YAAY,QAAQ,OAAO;AAOpC,MAAMC,OAAO,GAAG,IAAID,YAAY,CAAC,CAAC;AAClCC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAE,kBAAkB,CAAC;AACzCD,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,qBAAqB,CAAC;AAElD,OAAO,MAAMC,WAAW,GAAG,MAAOC,QAAkB,IAClDN,WAAW,CAACC,cAAc,CAACM,WAAW,EAAED,QAAQ,EAAEH,OAAO,CAAC;AAE5D,OAAO,MAAMK,WAAW,GAAG,MAAOF,QAAkB,IAClDN,WAAW,CAACC,cAAc,CAACQ,WAAW,EAAEH,QAAQ,EAAEH,OAAO,CAAC;AAE5D,OAAO,MAAMO,WAAW,GAAG,MAAOJ,QAAkB,IAClDN,WAAW,CAACC,cAAc,CAACU,WAAW,EAAEL,QAAQ,EAAEH,OAAO,CAAC;AAE5D,OAAO,MAAMS,QAAQ,GAAG,MAAON,QAAkB,IAC/CN,WAAW,CAACC,cAAc,CAACY,QAAQ,EAAEP,QAAQ,EAAEH,OAAO,CAAC;AAEzD,OAAO,MAAMW,UAAU,GAAG,MAAAA,CAAOC,IAAkB,EAAEC,IAAc,KAAK;EACtE;EACA,MAAMC,aAAa,GAAG,MAAMC,KAAK,CAACH,IAAI,CAACI,OAAO,CAAC;EAC/C,MAAMC,IAAI,GAAG,MAAMH,aAAa,CAACG,IAAI,CAAC,CAAC;EAEvC,MAAMd,QAAQ,GAAG,IAAIe,QAAQ,CAAC,CAAC;EAE/Bf,QAAQ,CAACgB,MAAM,CAAC,MAAM,EAAEF,IAAI,EAAEL,IAAI,CAACQ,IAAI,CAAC;EAExC,IAAIP,IAAI,KAAKjB,QAAQ,CAACyB,KAAK,EAAE;IAC3B,OAAOnB,WAAW,CAACC,QAAQ,CAAC;EAC9B,CAAC,MAAM,IAAIU,IAAI,KAAKjB,QAAQ,CAAC0B,KAAK,EAAE;IAClC,OAAOjB,WAAW,CAACF,QAAQ,CAAC;EAC9B,CAAC,MAAM,IAAIU,IAAI,KAAKjB,QAAQ,CAAC2B,KAAK,EAAE;IAClC,OAAOhB,WAAW,CAACJ,QAAQ,CAAC;EAC9B,CAAC,MAAM,IAAIU,IAAI,KAAKjB,QAAQ,CAAC4B,gBAAgB,EAAE;IAC7C,OAAOf,QAAQ,CAACN,QAAQ,CAAC;EAC3B;EAEA,MAAM,IAAIsB,KAAK,CAAE,0BAAyBZ,IAAK,EAAC,CAAC;AACnD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}