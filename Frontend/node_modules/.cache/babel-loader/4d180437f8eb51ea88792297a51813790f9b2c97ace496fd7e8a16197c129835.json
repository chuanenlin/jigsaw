{"ast":null,"code":"import clone from 'lodash/clone';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\nimport setWith from 'lodash/setWith';\nimport { ValidatedQuickForm } from './ValidatedQuickForm';\nexport function Auto(Base) {\n  // @ts-expect-error: Mixin class problem.\n  class AutoForm extends Base {\n    constructor(props) {\n      super(props);\n      this.state = Object.assign(Object.assign({}, this.state), {\n        model: props.model\n      });\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n      const {\n        model\n      } = this.props;\n      if (!isEqual(model, prevProps.model)) {\n        this.setState({\n          model\n        });\n      }\n      super.componentDidUpdate(prevProps, prevState, snapshot);\n    }\n    getNativeFormProps() {\n      const props = super.getNativeFormProps();\n      return omit(props, ['onChangeModel']);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getModel(mode) {\n      return this.state.model;\n    }\n    onChange(key, value) {\n      super.onChange(key, value);\n      this.setState(state => ({\n        model: setWith(clone(state.model), key, value, clone)\n      }), () => {\n        if (this.props.onChangeModel) {\n          this.props.onChangeModel(this.state.model);\n        }\n      });\n    }\n    __reset(state) {\n      return Object.assign(Object.assign({}, super.__reset(state)), {\n        model: this.props.model\n      });\n    }\n  }\n  AutoForm.Auto = Auto;\n  AutoForm.displayName = `Auto${Base.displayName}`;\n  return AutoForm;\n}\nexport const AutoForm = Auto(ValidatedQuickForm);","map":{"version":3,"names":["clone","isEqual","omit","setWith","ValidatedQuickForm","Auto","Base","AutoForm","constructor","props","state","Object","assign","model","componentDidUpdate","prevProps","prevState","snapshot","setState","getNativeFormProps","getModel","mode","onChange","key","value","onChangeModel","__reset","displayName"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/uniforms/esm/AutoForm.js"],"sourcesContent":["import clone from 'lodash/clone';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\nimport setWith from 'lodash/setWith';\nimport { ValidatedQuickForm, } from './ValidatedQuickForm';\nexport function Auto(Base) {\n    // @ts-expect-error: Mixin class problem.\n    class AutoForm extends Base {\n        constructor(props) {\n            super(props);\n            this.state = Object.assign(Object.assign({}, this.state), { model: props.model });\n        }\n        componentDidUpdate(prevProps, prevState, snapshot) {\n            const { model } = this.props;\n            if (!isEqual(model, prevProps.model)) {\n                this.setState({ model });\n            }\n            super.componentDidUpdate(prevProps, prevState, snapshot);\n        }\n        getNativeFormProps() {\n            const props = super.getNativeFormProps();\n            return omit(props, ['onChangeModel']);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        getModel(mode) {\n            return this.state.model;\n        }\n        onChange(key, value) {\n            super.onChange(key, value);\n            this.setState(state => ({ model: setWith(clone(state.model), key, value, clone) }), () => {\n                if (this.props.onChangeModel) {\n                    this.props.onChangeModel(this.state.model);\n                }\n            });\n        }\n        __reset(state) {\n            return Object.assign(Object.assign({}, super.__reset(state)), { model: this.props.model });\n        }\n    }\n    AutoForm.Auto = Auto;\n    AutoForm.displayName = `Auto${Base.displayName}`;\n    return AutoForm;\n}\nexport const AutoForm = Auto(ValidatedQuickForm);\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,cAAc;AAChC,OAAOC,OAAO,MAAM,gBAAgB;AACpC,OAAOC,IAAI,MAAM,aAAa;AAC9B,OAAOC,OAAO,MAAM,gBAAgB;AACpC,SAASC,kBAAkB,QAAS,sBAAsB;AAC1D,OAAO,SAASC,IAAIA,CAACC,IAAI,EAAE;EACvB;EACA,MAAMC,QAAQ,SAASD,IAAI,CAAC;IACxBE,WAAWA,CAACC,KAAK,EAAE;MACf,KAAK,CAACA,KAAK,CAAC;MACZ,IAAI,CAACC,KAAK,GAAGC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACF,KAAK,CAAC,EAAE;QAAEG,KAAK,EAAEJ,KAAK,CAACI;MAAM,CAAC,CAAC;IACrF;IACAC,kBAAkBA,CAACC,SAAS,EAAEC,SAAS,EAAEC,QAAQ,EAAE;MAC/C,MAAM;QAAEJ;MAAM,CAAC,GAAG,IAAI,CAACJ,KAAK;MAC5B,IAAI,CAACR,OAAO,CAACY,KAAK,EAAEE,SAAS,CAACF,KAAK,CAAC,EAAE;QAClC,IAAI,CAACK,QAAQ,CAAC;UAAEL;QAAM,CAAC,CAAC;MAC5B;MACA,KAAK,CAACC,kBAAkB,CAACC,SAAS,EAAEC,SAAS,EAAEC,QAAQ,CAAC;IAC5D;IACAE,kBAAkBA,CAAA,EAAG;MACjB,MAAMV,KAAK,GAAG,KAAK,CAACU,kBAAkB,CAAC,CAAC;MACxC,OAAOjB,IAAI,CAACO,KAAK,EAAE,CAAC,eAAe,CAAC,CAAC;IACzC;IACA;IACAW,QAAQA,CAACC,IAAI,EAAE;MACX,OAAO,IAAI,CAACX,KAAK,CAACG,KAAK;IAC3B;IACAS,QAAQA,CAACC,GAAG,EAAEC,KAAK,EAAE;MACjB,KAAK,CAACF,QAAQ,CAACC,GAAG,EAAEC,KAAK,CAAC;MAC1B,IAAI,CAACN,QAAQ,CAACR,KAAK,KAAK;QAAEG,KAAK,EAAEV,OAAO,CAACH,KAAK,CAACU,KAAK,CAACG,KAAK,CAAC,EAAEU,GAAG,EAAEC,KAAK,EAAExB,KAAK;MAAE,CAAC,CAAC,EAAE,MAAM;QACtF,IAAI,IAAI,CAACS,KAAK,CAACgB,aAAa,EAAE;UAC1B,IAAI,CAAChB,KAAK,CAACgB,aAAa,CAAC,IAAI,CAACf,KAAK,CAACG,KAAK,CAAC;QAC9C;MACJ,CAAC,CAAC;IACN;IACAa,OAAOA,CAAChB,KAAK,EAAE;MACX,OAAOC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,CAACc,OAAO,CAAChB,KAAK,CAAC,CAAC,EAAE;QAAEG,KAAK,EAAE,IAAI,CAACJ,KAAK,CAACI;MAAM,CAAC,CAAC;IAC9F;EACJ;EACAN,QAAQ,CAACF,IAAI,GAAGA,IAAI;EACpBE,QAAQ,CAACoB,WAAW,GAAI,OAAMrB,IAAI,CAACqB,WAAY,EAAC;EAChD,OAAOpB,QAAQ;AACnB;AACA,OAAO,MAAMA,QAAQ,GAAGF,IAAI,CAACD,kBAAkB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}