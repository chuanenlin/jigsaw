{"ast":null,"code":"var _jsxFileName = \"/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/src/components/input-output/OutputPanel.tsx\",\n  _s = $RefreshSig$();\nimport { CircularProgress, Typography } from '@mui/material';\nimport { BlockProcessStatus, useWorkspaceContext } from '../../context/WorkspaceContext';\nimport { copyToClipBoard, getModalityEmojiOrEmpty, getOutputFromResponse, hasOutput, isInputBlock, isTextOutput, saveFile } from './input-output.util';\nimport { MediaViewer } from './MediaViewer';\nimport { PanelHeader } from './PanelHeader';\nimport { CopyAll, Save } from '@mui/icons-material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const OutputPanel = () => {\n  _s();\n  const {\n    selectedProcessableBlock\n  } = useWorkspaceContext();\n  const extractBlockOutput = () => {\n    if (!selectedProcessableBlock) {\n      // TODO: show output of the last block in the chain\n      return null;\n    }\n    if (isInputBlock(selectedProcessableBlock)) {\n      return /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 14\n      }, this);\n    }\n    const getBlockOutput = () => {\n      if (!hasOutput(selectedProcessableBlock)) {\n        return /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          children: \"Processed with no output!!!!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 16\n        }, this);\n      }\n      const output = selectedProcessableBlock.output;\n      const content = getOutputFromResponse(output);\n      const modality = selectedProcessableBlock.blockData.outputModality;\n      return /*#__PURE__*/_jsxDEV(MediaViewer, {\n        content: content,\n        modality: modality\n      }, selectedProcessableBlock === null || selectedProcessableBlock === void 0 ? void 0 : selectedProcessableBlock.blocklyBlock.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this);\n    };\n    switch (selectedProcessableBlock === null || selectedProcessableBlock === void 0 ? void 0 : selectedProcessableBlock.processStatus) {\n      case BlockProcessStatus.STARTED:\n        return /*#__PURE__*/_jsxDEV(CircularProgress, {\n          color: \"secondary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 16\n        }, this);\n      case BlockProcessStatus.FINISHED:\n        return getBlockOutput();\n      case BlockProcessStatus.FAILED:\n        return /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          children: \"Failed to process block\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 16\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  const onActionButtonClicked = async () => {\n    const output = selectedProcessableBlock === null || selectedProcessableBlock === void 0 ? void 0 : selectedProcessableBlock.output;\n    if (!output) {\n      return;\n    }\n    const content = getOutputFromResponse(output);\n    if (!content) {\n      throw new Error('No content to save');\n    }\n    if (isTextOutput(selectedProcessableBlock)) {\n      return copyToClipBoard(content);\n    }\n    saveFile(content);\n  };\n  const getActionButton = () => {\n    const icon = isTextOutput(selectedProcessableBlock) ? /*#__PURE__*/_jsxDEV(CopyAll, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 59\n    }, this) : /*#__PURE__*/_jsxDEV(Save, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 73\n    }, this);\n    const title = isTextOutput(selectedProcessableBlock) ? 'Copy' : 'Save';\n    return {\n      icon,\n      title,\n      label: title,\n      onClick: onActionButtonClicked\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `\n        w-full\n        h-full\n        bg-white\n        rounded-2xl\n        border\n        border-solid\n        border-neutral-400\n        flex-grow-0\n        flex-shrink-0\n        flex\n        flex-col\n        justify-start\n        box-border\n        ${selectedProcessableBlock === undefined || (selectedProcessableBlock === null || selectedProcessableBlock === void 0 ? void 0 : selectedProcessableBlock.blockData.blockType) === 'input' ? 'opacity-30' : ''}\n      `,\n    children: [/*#__PURE__*/_jsxDEV(PanelHeader, {\n      title: `${getModalityEmojiOrEmpty(selectedProcessableBlock === null || selectedProcessableBlock === void 0 ? void 0 : selectedProcessableBlock.blockData.outputModality)} Output`,\n      button: hasOutput(selectedProcessableBlock) && getActionButton()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full box-border flex justify-center items-center overflow-hidden\",\n      children: extractBlockOutput()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(OutputPanel, \"tPmys6b6bhTuTyWLY+orKlgIoJY=\", false, function () {\n  return [useWorkspaceContext];\n});\n_c = OutputPanel;\nvar _c;\n$RefreshReg$(_c, \"OutputPanel\");","map":{"version":3,"names":["CircularProgress","Typography","BlockProcessStatus","useWorkspaceContext","copyToClipBoard","getModalityEmojiOrEmpty","getOutputFromResponse","hasOutput","isInputBlock","isTextOutput","saveFile","MediaViewer","PanelHeader","CopyAll","Save","jsxDEV","_jsxDEV","OutputPanel","_s","selectedProcessableBlock","extractBlockOutput","variant","fileName","_jsxFileName","lineNumber","columnNumber","getBlockOutput","children","output","content","modality","blockData","outputModality","blocklyBlock","id","processStatus","STARTED","color","FINISHED","FAILED","onActionButtonClicked","Error","getActionButton","icon","title","label","onClick","className","undefined","blockType","button","_c","$RefreshReg$"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/src/components/input-output/OutputPanel.tsx"],"sourcesContent":["import { CircularProgress, Typography } from '@mui/material'\nimport { BlockProcessStatus, useWorkspaceContext } from '../../context/WorkspaceContext'\nimport {\n  copyToClipBoard,\n  getModalityEmojiOrEmpty,\n  getOutputFromResponse,\n  hasOutput,\n  isInputBlock,\n  isTextOutput,\n  saveFile,\n} from './input-output.util'\nimport { MediaViewer } from './MediaViewer'\nimport { PanelHeader } from './PanelHeader'\nimport { CopyAll, Save } from '@mui/icons-material'\n\nexport const OutputPanel = () => {\n  const { selectedProcessableBlock } = useWorkspaceContext()\n\n  const extractBlockOutput = () => {\n    if (!selectedProcessableBlock) {\n      // TODO: show output of the last block in the chain\n      return null\n    }\n\n    if (isInputBlock(selectedProcessableBlock)) {\n      return <Typography variant='h5'></Typography>\n    }\n\n    const getBlockOutput = () => {\n      if (!hasOutput(selectedProcessableBlock)) {\n        return <Typography variant='h5'>Processed with no output!!!!</Typography>\n      }\n\n      const output = selectedProcessableBlock.output!\n      const content = getOutputFromResponse(output)\n      const modality = selectedProcessableBlock.blockData.outputModality\n\n      return (\n        <MediaViewer\n          content={content}\n          modality={modality}\n          key={selectedProcessableBlock?.blocklyBlock.id}\n        />\n      )\n    }\n\n    switch (selectedProcessableBlock?.processStatus) {\n      case BlockProcessStatus.STARTED:\n        return <CircularProgress color='secondary' />\n      case BlockProcessStatus.FINISHED:\n        return getBlockOutput()\n      case BlockProcessStatus.FAILED:\n        return <Typography variant='h5'>Failed to process block</Typography>\n      default:\n        return <Typography variant='h5'></Typography>\n    }\n  }\n\n  const onActionButtonClicked = async () => {\n    const output = selectedProcessableBlock?.output\n    if (!output) {\n      return\n    }\n\n    const content = getOutputFromResponse(output)\n\n    if (!content) {\n      throw new Error('No content to save')\n    }\n\n    if (isTextOutput(selectedProcessableBlock)) {\n      return copyToClipBoard(content)\n    }\n\n    saveFile(content)\n  }\n\n  const getActionButton = () => {\n    const icon = isTextOutput(selectedProcessableBlock) ? <CopyAll /> : <Save />\n    const title = isTextOutput(selectedProcessableBlock) ? 'Copy' : 'Save'\n\n    return {\n      icon,\n      title,\n      label: title,\n      onClick: onActionButtonClicked,\n    }\n  }\n\n  return (\n    <div\n      className={`\n        w-full\n        h-full\n        bg-white\n        rounded-2xl\n        border\n        border-solid\n        border-neutral-400\n        flex-grow-0\n        flex-shrink-0\n        flex\n        flex-col\n        justify-start\n        box-border\n        ${\n          selectedProcessableBlock === undefined ||\n          selectedProcessableBlock?.blockData.blockType === 'input'\n            ? 'opacity-30'\n            : ''\n        }\n      `}\n    >\n      <PanelHeader\n        title={`${getModalityEmojiOrEmpty(\n          selectedProcessableBlock?.blockData.outputModality,\n        )} Output`}\n        button={hasOutput(selectedProcessableBlock) && getActionButton()}\n      />\n      <div className='w-full h-full box-border flex justify-center items-center overflow-hidden'>\n        {extractBlockOutput()}\n      </div>\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}