{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRules = exports.isJSONType = void 0;\nconst _jsonTypes = [\"string\", \"number\", \"integer\", \"boolean\", \"null\", \"object\", \"array\"];\nconst jsonTypes = new Set(_jsonTypes);\nfunction isJSONType(x) {\n  return typeof x == \"string\" && jsonTypes.has(x);\n}\nexports.isJSONType = isJSONType;\nfunction getRules() {\n  const groups = {\n    number: {\n      type: \"number\",\n      rules: []\n    },\n    string: {\n      type: \"string\",\n      rules: []\n    },\n    array: {\n      type: \"array\",\n      rules: []\n    },\n    object: {\n      type: \"object\",\n      rules: []\n    }\n  };\n  return {\n    types: {\n      ...groups,\n      integer: true,\n      boolean: true,\n      null: true\n    },\n    rules: [{\n      rules: []\n    }, groups.number, groups.string, groups.array, groups.object],\n    post: {\n      rules: []\n    },\n    all: {},\n    keywords: {}\n  };\n}\nexports.getRules = getRules;","map":{"version":3,"names":["_jsonTypes","jsonTypes","Set","isJSONType","x","has","exports","getRules","groups","number","type","rules","string","array","object","types","integer","boolean","null","post","all","keywords"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/ajv/lib/compile/rules.ts"],"sourcesContent":["import type {AddedKeywordDefinition} from \"../types\"\n\nconst _jsonTypes = [\"string\", \"number\", \"integer\", \"boolean\", \"null\", \"object\", \"array\"] as const\n\nexport type JSONType = typeof _jsonTypes[number]\n\nconst jsonTypes: Set<string> = new Set(_jsonTypes)\n\nexport function isJSONType(x: unknown): x is JSONType {\n  return typeof x == \"string\" && jsonTypes.has(x)\n}\n\ntype ValidationTypes = {\n  [K in JSONType]: boolean | RuleGroup | undefined\n}\n\nexport interface ValidationRules {\n  rules: RuleGroup[]\n  post: RuleGroup\n  all: {[Key in string]?: boolean | Rule} // rules that have to be validated\n  keywords: {[Key in string]?: boolean} // all known keywords (superset of \"all\")\n  types: ValidationTypes\n}\n\nexport interface RuleGroup {\n  type?: JSONType\n  rules: Rule[]\n}\n\n// This interface wraps KeywordDefinition because definition can have multiple keywords\nexport interface Rule {\n  keyword: string\n  definition: AddedKeywordDefinition\n}\n\nexport function getRules(): ValidationRules {\n  const groups: Record<\"number\" | \"string\" | \"array\" | \"object\", RuleGroup> = {\n    number: {type: \"number\", rules: []},\n    string: {type: \"string\", rules: []},\n    array: {type: \"array\", rules: []},\n    object: {type: \"object\", rules: []},\n  }\n  return {\n    types: {...groups, integer: true, boolean: true, null: true},\n    rules: [{rules: []}, groups.number, groups.string, groups.array, groups.object],\n    post: {rules: []},\n    all: {},\n    keywords: {},\n  }\n}\n"],"mappings":";;;;;;AAEA,MAAMA,UAAU,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAU;AAIjG,MAAMC,SAAS,GAAgB,IAAIC,GAAG,CAACF,UAAU,CAAC;AAElD,SAAgBG,UAAUA,CAACC,CAAU;EACnC,OAAO,OAAOA,CAAC,IAAI,QAAQ,IAAIH,SAAS,CAACI,GAAG,CAACD,CAAC,CAAC;AACjD;AAFAE,OAAA,CAAAH,UAAA,GAAAA,UAAA;AA2BA,SAAgBI,QAAQA,CAAA;EACtB,MAAMC,MAAM,GAAgE;IAC1EC,MAAM,EAAE;MAACC,IAAI,EAAE,QAAQ;MAAEC,KAAK,EAAE;IAAE,CAAC;IACnCC,MAAM,EAAE;MAACF,IAAI,EAAE,QAAQ;MAAEC,KAAK,EAAE;IAAE,CAAC;IACnCE,KAAK,EAAE;MAACH,IAAI,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAE,CAAC;IACjCG,MAAM,EAAE;MAACJ,IAAI,EAAE,QAAQ;MAAEC,KAAK,EAAE;IAAE;GACnC;EACD,OAAO;IACLI,KAAK,EAAE;MAAC,GAAGP,MAAM;MAAEQ,OAAO,EAAE,IAAI;MAAEC,OAAO,EAAE,IAAI;MAAEC,IAAI,EAAE;IAAI,CAAC;IAC5DP,KAAK,EAAE,CAAC;MAACA,KAAK,EAAE;IAAE,CAAC,EAAEH,MAAM,CAACC,MAAM,EAAED,MAAM,CAACI,MAAM,EAAEJ,MAAM,CAACK,KAAK,EAAEL,MAAM,CAACM,MAAM,CAAC;IAC/EK,IAAI,EAAE;MAACR,KAAK,EAAE;IAAE,CAAC;IACjBS,GAAG,EAAE,EAAE;IACPC,QAAQ,EAAE;GACX;AACH;AAdAf,OAAA,CAAAC,QAAA,GAAAA,QAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}