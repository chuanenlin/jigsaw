{"ast":null,"code":"var _jsxFileName = \"/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/src/components/blockly/BlocklyComponent.tsx\",\n  _s = $RefreshSig$();\nimport { Box } from '@mui/material';\nimport 'blockly/blocks';\nimport Blockly from 'blockly/core';\nimport { useEffect, useMemo, useRef } from 'react';\nimport { initCustomBlocks } from './blocks/init-custom-blocks';\nimport { blocksList, modalityColors } from '../../constants';\nimport { Modality } from '../../types';\nimport { ChildBasedDragger, registerCustomClasses } from './custom';\nimport { overrideBlockly } from './blockly-overrides';\nimport { useWorkspaceContext } from '../../context';\nimport { ContinuousFlyout, ContinuousMetrics, ContinuousToolbox } from './continuous-toolbox';\nimport { useTooltip } from '../../hooks/useTooltip';\nimport { extractBlockRuntimeValueAndUnit } from './util';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst modalityValues = Object.values(Modality);\nconst getBlocks = (modalityFilter, visibleBlockIds, blockFilter) => {\n  return blocksList.filter(block => block.inputModality.some(inputModality => inputModality.modality === modalityFilter) && visibleBlockIds.includes(block.id)).filter(block => {\n    var _block$meta, _block$meta$propertie;\n    const blockRuntime = extractBlockRuntimeValueAndUnit((_block$meta = block.meta) === null || _block$meta === void 0 ? void 0 : (_block$meta$propertie = _block$meta.properties) === null || _block$meta$propertie === void 0 ? void 0 : _block$meta$propertie.maxRuntime).runtime;\n    const allowedMaxRuntime = blockFilter === null || blockFilter === void 0 ? void 0 : blockFilter.maxRuntine;\n    if (!allowedMaxRuntime) return true;\n    return blockRuntime <= allowedMaxRuntime;\n  }).map(block => {\n    const b = {\n      kind: 'block',\n      type: block.name\n    };\n    return [b /* , blockLabel */];\n  }).flat();\n};\nexport const BlocklyComponent = () => {\n  _s();\n  const primaryWorkSpace = useRef();\n  const ref = useRef('');\n  const workspaceXml = useRef('<xml xmlns=\"http://www.w3.org/1999/xhtml\"></xml>');\n  const {\n    setWorkspace,\n    onSelectedWorkspaceBlockChanged,\n    onBlocksChanged,\n    setSelectedBlocklyBlockId,\n    blockFilter,\n    visibleBlockIds\n  } = useWorkspaceContext();\n  const {\n    setupTooltipListeners\n  } = useTooltip();\n  const toolboxContent = useMemo(() => ({\n    contents: modalityValues.map(modality => ({\n      kind: 'category',\n      name: modality,\n      colour: modalityColors[modality],\n      contents: getBlocks(modality, visibleBlockIds, blockFilter)\n    }))\n  }), [visibleBlockIds, blockFilter]);\n  useEffect(() => {\n    var _primaryWorkSpace$cur, _primaryWorkSpace$cur2;\n    (_primaryWorkSpace$cur = primaryWorkSpace.current) === null || _primaryWorkSpace$cur === void 0 ? void 0 : _primaryWorkSpace$cur.updateToolbox(toolboxContent);\n    (_primaryWorkSpace$cur2 = primaryWorkSpace.current) === null || _primaryWorkSpace$cur2 === void 0 ? void 0 : _primaryWorkSpace$cur2.refreshToolboxSelection();\n    // Has to update the listeners when the toolbox content is changed\n    setupTooltipListeners(primaryWorkSpace.current);\n  }, [toolboxContent]);\n  const options = {\n    renderer: 'custom_renderer',\n    rtl: false,\n    toolboxPosition: 'start',\n    toolbox: toolboxContent,\n    move: {\n      scrollbars: true,\n      drag: true\n    },\n    theme: 'custom_theme',\n    trashcan: true,\n    disable: true,\n    zoom: {\n      wheel: true,\n      controls: false\n    },\n    plugins: {\n      toolbox: ContinuousToolbox,\n      flyoutsVerticalToolbox: ContinuousFlyout,\n      metricsManager: ContinuousMetrics,\n      blockDragger: ChildBasedDragger\n    }\n  };\n  useEffect(() => {\n    initCustomBlocks();\n    overrideBlockly();\n    const unregisterCustomClasses = registerCustomClasses();\n    return () => {\n      unregisterCustomClasses();\n    };\n  });\n  useEffect(() => {\n    primaryWorkSpace.current = Blockly.inject(ref.current, options);\n    setupTooltipListeners(primaryWorkSpace.current);\n    const handleChangeEvent = event => {\n      if (!primaryWorkSpace.current) {\n        return;\n      }\n      const workspace = primaryWorkSpace.current;\n      if (event.type === Blockly.Events.SELECTED) {\n        const selectedBlocklyBlock = event.newElementId ? workspace.getBlockById(event.newElementId) : undefined;\n        onSelectedWorkspaceBlockChanged(selectedBlocklyBlock);\n        setSelectedBlocklyBlockId(selectedBlocklyBlock === null || selectedBlocklyBlock === void 0 ? void 0 : selectedBlocklyBlock.id);\n      }\n      if (event.type === Blockly.Events.BLOCK_CREATE || event.type === Blockly.Events.BLOCK_DELETE) {\n        onBlocksChanged(workspace.getAllBlocks(false));\n      }\n\n      /**\n       * Somehow the custom dragger messes up setting the selected class on blocks\n       * so we have to do it manually.\n       */\n      if (event.type === Blockly.Events.CLICK) {\n        // Remove selected class from all blocks\n        workspace.getAllBlocks(false).forEach(block => {\n          block.getSvgRoot().classList.remove('blocklySelected');\n        });\n\n        // Add selected class only if a block is clicked (not the workspace)\n        if (event.targetType === 'block') {\n          var _workspace$getBlockBy;\n          (_workspace$getBlockBy = workspace.getBlockById(event.blockId)) === null || _workspace$getBlockBy === void 0 ? void 0 : _workspace$getBlockBy.getSvgRoot().classList.add('blocklySelected');\n          Blockly.Events.fire(new Blockly.Events.Selected(null, event.blockId, workspace.id));\n        }\n      }\n    };\n    if (primaryWorkSpace.current) {\n      primaryWorkSpace.current.addChangeListener(handleChangeEvent);\n\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      primaryWorkSpace.current.showContextMenu = () => {};\n      setWorkspace(primaryWorkSpace.current);\n      if (workspaceXml.current) {\n        Blockly.Xml.domToWorkspace(Blockly.utils.xml.textToDom(workspaceXml.current), primaryWorkSpace.current);\n      }\n    }\n    return () => {\n      if (primaryWorkSpace.current) {\n        primaryWorkSpace.current.removeChangeListener(handleChangeEvent);\n      }\n    };\n  }, [workspaceXml]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: \"h-full w-full\",\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 10\n  }, this);\n};\n_s(BlocklyComponent, \"edg1U08FBbZbyIanuUiNsCWI4eA=\", false, function () {\n  return [useWorkspaceContext, useTooltip];\n});\n_c = BlocklyComponent;\nvar _c;\n$RefreshReg$(_c, \"BlocklyComponent\");","map":{"version":3,"names":["Box","Blockly","useEffect","useMemo","useRef","initCustomBlocks","blocksList","modalityColors","Modality","ChildBasedDragger","registerCustomClasses","overrideBlockly","useWorkspaceContext","ContinuousFlyout","ContinuousMetrics","ContinuousToolbox","useTooltip","extractBlockRuntimeValueAndUnit","jsxDEV","_jsxDEV","modalityValues","Object","values","getBlocks","modalityFilter","visibleBlockIds","blockFilter","filter","block","inputModality","some","modality","includes","id","_block$meta","_block$meta$propertie","blockRuntime","meta","properties","maxRuntime","runtime","allowedMaxRuntime","maxRuntine","map","b","kind","type","name","flat","BlocklyComponent","_s","primaryWorkSpace","ref","workspaceXml","setWorkspace","onSelectedWorkspaceBlockChanged","onBlocksChanged","setSelectedBlocklyBlockId","setupTooltipListeners","toolboxContent","contents","colour","_primaryWorkSpace$cur","_primaryWorkSpace$cur2","current","updateToolbox","refreshToolboxSelection","options","renderer","rtl","toolboxPosition","toolbox","move","scrollbars","drag","theme","trashcan","disable","zoom","wheel","controls","plugins","flyoutsVerticalToolbox","metricsManager","blockDragger","unregisterCustomClasses","inject","handleChangeEvent","event","workspace","Events","SELECTED","selectedBlocklyBlock","newElementId","getBlockById","undefined","BLOCK_CREATE","BLOCK_DELETE","getAllBlocks","CLICK","forEach","getSvgRoot","classList","remove","targetType","_workspace$getBlockBy","blockId","add","fire","Selected","addChangeListener","showContextMenu","Xml","domToWorkspace","utils","xml","textToDom","removeChangeListener","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/src/components/blockly/BlocklyComponent.tsx"],"sourcesContent":["import { Box } from '@mui/material'\nimport 'blockly/blocks'\nimport Blockly from 'blockly/core'\nimport { useEffect, useMemo, useRef } from 'react'\nimport { initCustomBlocks } from './blocks/init-custom-blocks'\nimport { blocksList, modalityColors } from '../../constants'\nimport { Modality } from '../../types'\nimport { ChildBasedDragger, registerCustomClasses } from './custom'\nimport { overrideBlockly } from './blockly-overrides'\nimport { useWorkspaceContext } from '../../context'\nimport { BlocklistFilter } from '../block-search'\nimport { ContinuousFlyout, ContinuousMetrics, ContinuousToolbox } from './continuous-toolbox'\nimport { useTooltip } from '../../hooks/useTooltip'\nimport { extractBlockRuntimeValueAndUnit } from './util'\n\nconst modalityValues = Object.values(Modality)\n\nconst getBlocks = (\n  modalityFilter: Modality,\n  visibleBlockIds: Array<string>,\n  blockFilter: BlocklistFilter | undefined,\n) => {\n  return blocksList\n    .filter(\n      (block) =>\n        block.inputModality.some((inputModality) => inputModality.modality === modalityFilter) &&\n        visibleBlockIds.includes(block.id),\n    )\n    .filter((block) => {\n      const blockRuntime = extractBlockRuntimeValueAndUnit(\n        block.meta?.properties?.maxRuntime,\n      ).runtime\n      const allowedMaxRuntime = blockFilter?.maxRuntine\n\n      if (!allowedMaxRuntime) return true\n\n      return blockRuntime <= allowedMaxRuntime\n    })\n    .map((block) => {\n      const b = {\n        kind: 'block',\n        type: block.name,\n      }\n\n      return [b /* , blockLabel */]\n    })\n    .flat()\n}\n\nexport const BlocklyComponent = () => {\n  const primaryWorkSpace = useRef<Blockly.WorkspaceSvg>()\n  const ref = useRef<Element | string>('')\n  const workspaceXml = useRef('<xml xmlns=\"http://www.w3.org/1999/xhtml\"></xml>')\n\n  const {\n    setWorkspace,\n    onSelectedWorkspaceBlockChanged,\n    onBlocksChanged,\n    setSelectedBlocklyBlockId,\n    blockFilter,\n    visibleBlockIds,\n  } = useWorkspaceContext()\n\n  const { setupTooltipListeners } = useTooltip()\n\n  const toolboxContent: Blockly.utils.toolbox.ToolboxDefinition = useMemo(\n    () => ({\n      contents: modalityValues.map((modality) => ({\n        kind: 'category',\n        name: modality,\n        colour: modalityColors[modality],\n        contents: getBlocks(modality, visibleBlockIds, blockFilter),\n      })),\n    }),\n    [visibleBlockIds, blockFilter],\n  )\n\n  useEffect(() => {\n    primaryWorkSpace.current?.updateToolbox(toolboxContent)\n    primaryWorkSpace.current?.refreshToolboxSelection()\n    // Has to update the listeners when the toolbox content is changed\n    setupTooltipListeners(primaryWorkSpace.current)\n  }, [toolboxContent])\n\n  const options: Blockly.BlocklyOptions = {\n    renderer: 'custom_renderer',\n    rtl: false,\n    toolboxPosition: 'start',\n    toolbox: toolboxContent,\n    move: {\n      scrollbars: true,\n      drag: true,\n    },\n    theme: 'custom_theme',\n    trashcan: true,\n    disable: true,\n    zoom: {\n      wheel: true,\n      controls: false,\n    },\n    plugins: {\n      toolbox: ContinuousToolbox,\n      flyoutsVerticalToolbox: ContinuousFlyout,\n      metricsManager: ContinuousMetrics,\n      blockDragger: ChildBasedDragger,\n    },\n  }\n\n  useEffect(() => {\n    initCustomBlocks()\n    overrideBlockly()\n    const unregisterCustomClasses = registerCustomClasses()\n    return () => {\n      unregisterCustomClasses()\n    }\n  })\n\n  useEffect(() => {\n    primaryWorkSpace.current = Blockly.inject(ref.current, options)\n    setupTooltipListeners(primaryWorkSpace.current)\n\n    const handleChangeEvent = (event: {\n      type: string\n      newElementId: string | undefined\n      blockId: string\n      targetType: string\n    }) => {\n      if (!primaryWorkSpace.current) {\n        return\n      }\n\n      const workspace = primaryWorkSpace.current\n\n      if (event.type === Blockly.Events.SELECTED) {\n        const selectedBlocklyBlock = event.newElementId\n          ? workspace.getBlockById(event.newElementId)\n          : undefined\n\n        onSelectedWorkspaceBlockChanged(selectedBlocklyBlock)\n        setSelectedBlocklyBlockId(selectedBlocklyBlock?.id)\n      }\n\n      if (\n        event.type === Blockly.Events.BLOCK_CREATE ||\n        event.type === Blockly.Events.BLOCK_DELETE\n      ) {\n        onBlocksChanged(workspace.getAllBlocks(false))\n      }\n\n      /**\n       * Somehow the custom dragger messes up setting the selected class on blocks\n       * so we have to do it manually.\n       */\n      if (event.type === Blockly.Events.CLICK) {\n        // Remove selected class from all blocks\n        workspace.getAllBlocks(false).forEach((block) => {\n          block.getSvgRoot().classList.remove('blocklySelected')\n        })\n\n        // Add selected class only if a block is clicked (not the workspace)\n        if (event.targetType === 'block') {\n          workspace.getBlockById(event.blockId)?.getSvgRoot().classList.add('blocklySelected')\n          Blockly.Events.fire(new Blockly.Events.Selected(null, event.blockId, workspace.id))\n        }\n      }\n    }\n\n    if (primaryWorkSpace.current) {\n      primaryWorkSpace.current.addChangeListener(handleChangeEvent)\n\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      primaryWorkSpace.current.showContextMenu = () => {}\n      setWorkspace(primaryWorkSpace.current)\n\n      if (workspaceXml.current) {\n        Blockly.Xml.domToWorkspace(\n          Blockly.utils.xml.textToDom(workspaceXml.current),\n          primaryWorkSpace.current,\n        )\n      }\n    }\n\n    return () => {\n      if (primaryWorkSpace.current) {\n        primaryWorkSpace.current.removeChangeListener(handleChangeEvent)\n      }\n    }\n  }, [workspaceXml])\n\n  return <Box className='h-full w-full' ref={ref}></Box>\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}