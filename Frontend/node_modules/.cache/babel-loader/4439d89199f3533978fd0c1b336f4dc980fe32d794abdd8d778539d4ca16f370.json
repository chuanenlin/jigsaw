{"ast":null,"code":"export const text2ImageParams = {\n  model: {},\n  schema: {\n    type: 'object',\n    properties: {\n      seed: {\n        type: 'integer',\n        title: 'Seed',\n        default: 0,\n        minimum: 0,\n        maximum: 1000000,\n        uniforms: {\n          help: 'The seed is used to initialize the image generator. Change the seed to generate different results. Save the seed if you want to reproduce the results later.'\n        }\n      },\n      // eslint-disable-next-line camelcase\n      num_inference_steps: {\n        type: 'integer',\n        title: 'Number of Inference Steps',\n        default: 50,\n        minimum: 1,\n        maximum: 100,\n        uniforms: {\n          help: 'Some explanation of what this parameter actually does'\n        }\n      },\n      // eslint-disable-next-line camelcase\n      guidance_scale: {\n        type: 'number',\n        title: 'Guidance Scale',\n        default: 7.5,\n        minimum: 0.0,\n        uniforms: {\n          help: 'Some explanation of what this parameter actually does'\n        }\n      },\n      width: {\n        type: 'integer',\n        title: 'Width',\n        default: 1024,\n        minimum: 1,\n        maximum: 2048,\n        uniforms: {\n          help: 'Some explanation of what this parameter actually does'\n        }\n      },\n      height: {\n        type: 'integer',\n        title: 'Height',\n        default: 1024,\n        minimum: 1,\n        maximum: 2048,\n        uniforms: {\n          help: 'Some explanation of what this parameter actually does'\n        }\n      }\n      // uploadImage: {\n      //   ...uploadFileSchema('Upload Image', Modality.Image),\n      // },\n      // uploadVideo: {\n      //   ...uploadFileSchema('Upload Video', Modality.Video),\n      // },\n      // uploadAudio: {\n      //   ...uploadFileSchema('Upload Audio', Modality.Audio),\n      // },\n      // upload3d: {\n      //   ...uploadFileSchema('Upload 3D', Modality.ThreeDimentional),\n      // },\n    },\n\n    required: ['num_inference_steps', 'guidance_scale', 'width', 'height']\n  }\n};","map":{"version":3,"names":["text2ImageParams","model","schema","type","properties","seed","title","default","minimum","maximum","uniforms","help","num_inference_steps","guidance_scale","width","height","required"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/src/constants/block-list/text2image/text2image.params.ts"],"sourcesContent":["import { JSONSchemaType } from 'ajv'\nimport { BlockParameters, Modality } from '../../../types'\nimport { uploadFileSchema } from '../common'\n\nexport interface Text2ImageParams {\n  num_inference_steps: number\n  guidance_scale: number\n  width: number\n  height: number\n  prompt: string\n}\n\nexport const text2ImageParams: BlockParameters = {\n  model: {},\n  schema: {\n    type: 'object',\n    properties: {\n      seed: {\n        type: 'integer',\n        title: 'Seed',\n        default: 0,\n        minimum: 0,\n        maximum: 1000000,\n        uniforms: {\n          help: 'The seed is used to initialize the image generator. Change the seed to generate different results. Save the seed if you want to reproduce the results later.',\n        },\n      },\n      // eslint-disable-next-line camelcase\n      num_inference_steps: {\n        type: 'integer',\n        title: 'Number of Inference Steps',\n        default: 50,\n        minimum: 1,\n        maximum: 100,\n        uniforms: {\n          help: 'Some explanation of what this parameter actually does',\n        },\n      },\n      // eslint-disable-next-line camelcase\n      guidance_scale: {\n        type: 'number',\n        title: 'Guidance Scale',\n        default: 7.5,\n        minimum: 0.0,\n        uniforms: {\n          help: 'Some explanation of what this parameter actually does',\n        },\n      },\n      width: {\n        type: 'integer',\n        title: 'Width',\n        default: 1024,\n        minimum: 1,\n        maximum: 2048,\n        uniforms: {\n          help: 'Some explanation of what this parameter actually does',\n        },\n      },\n      height: {\n        type: 'integer',\n        title: 'Height',\n        default: 1024,\n        minimum: 1,\n        maximum: 2048,\n        uniforms: {\n          help: 'Some explanation of what this parameter actually does',\n        },\n      },\n      // uploadImage: {\n      //   ...uploadFileSchema('Upload Image', Modality.Image),\n      // },\n      // uploadVideo: {\n      //   ...uploadFileSchema('Upload Video', Modality.Video),\n      // },\n      // uploadAudio: {\n      //   ...uploadFileSchema('Upload Audio', Modality.Audio),\n      // },\n      // upload3d: {\n      //   ...uploadFileSchema('Upload 3D', Modality.ThreeDimentional),\n      // },\n    },\n    required: ['num_inference_steps', 'guidance_scale', 'width', 'height'],\n  } as JSONSchemaType<Omit<Text2ImageParams, 'prompt'>>,\n}\n"],"mappings":"AAYA,OAAO,MAAMA,gBAAiC,GAAG;EAC/CC,KAAK,EAAE,CAAC,CAAC;EACTC,MAAM,EAAE;IACNC,IAAI,EAAE,QAAQ;IACdC,UAAU,EAAE;MACVC,IAAI,EAAE;QACJF,IAAI,EAAE,SAAS;QACfG,KAAK,EAAE,MAAM;QACbC,OAAO,EAAE,CAAC;QACVC,OAAO,EAAE,CAAC;QACVC,OAAO,EAAE,OAAO;QAChBC,QAAQ,EAAE;UACRC,IAAI,EAAE;QACR;MACF,CAAC;MACD;MACAC,mBAAmB,EAAE;QACnBT,IAAI,EAAE,SAAS;QACfG,KAAK,EAAE,2BAA2B;QAClCC,OAAO,EAAE,EAAE;QACXC,OAAO,EAAE,CAAC;QACVC,OAAO,EAAE,GAAG;QACZC,QAAQ,EAAE;UACRC,IAAI,EAAE;QACR;MACF,CAAC;MACD;MACAE,cAAc,EAAE;QACdV,IAAI,EAAE,QAAQ;QACdG,KAAK,EAAE,gBAAgB;QACvBC,OAAO,EAAE,GAAG;QACZC,OAAO,EAAE,GAAG;QACZE,QAAQ,EAAE;UACRC,IAAI,EAAE;QACR;MACF,CAAC;MACDG,KAAK,EAAE;QACLX,IAAI,EAAE,SAAS;QACfG,KAAK,EAAE,OAAO;QACdC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE,CAAC;QACVC,OAAO,EAAE,IAAI;QACbC,QAAQ,EAAE;UACRC,IAAI,EAAE;QACR;MACF,CAAC;MACDI,MAAM,EAAE;QACNZ,IAAI,EAAE,SAAS;QACfG,KAAK,EAAE,QAAQ;QACfC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE,CAAC;QACVC,OAAO,EAAE,IAAI;QACbC,QAAQ,EAAE;UACRC,IAAI,EAAE;QACR;MACF;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACF,CAAC;;IACDK,QAAQ,EAAE,CAAC,qBAAqB,EAAE,gBAAgB,EAAE,OAAO,EAAE,QAAQ;EACvE;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}