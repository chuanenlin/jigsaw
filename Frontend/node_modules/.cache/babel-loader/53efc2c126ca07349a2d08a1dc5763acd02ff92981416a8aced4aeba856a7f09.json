{"ast":null,"code":"var _jsxFileName = \"/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/src/components/input-output/OutputPanel.tsx\",\n  _s = $RefreshSig$();\nimport { Typography } from '@mui/material';\nimport { BlockProcessStatus, useWorkspaceContext } from '../../context/WorkspaceContext';\nimport { copyToClipBoard, getModalityEmojiOrEmpty, getOutputFromResponse, hasOutput, isInputBlock, isTextOutput, saveFile } from './input-output.util';\nimport { MediaViewer } from './MediaViewer';\nimport { PanelHeader } from './PanelHeader';\nimport { CopyAll, Save } from '@mui/icons-material';\nimport { LoadingIndicator } from '../atoms/LoadingIndicator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const OutputPanel = () => {\n  _s();\n  const {\n    selectedProcessableBlock\n  } = useWorkspaceContext();\n  const extractBlockOutput = () => {\n    if (!selectedProcessableBlock) {\n      // TODO: show output of the last block in the chain\n      return null;\n    }\n    if (isInputBlock(selectedProcessableBlock)) {\n      return /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 14\n      }, this);\n    }\n    const getBlockOutput = () => {\n      if (!hasOutput(selectedProcessableBlock)) {\n        return /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          children: \"Processed with no output!!!!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 16\n        }, this);\n      }\n      const output = selectedProcessableBlock.output;\n      const content = getOutputFromResponse(output);\n      const modality = selectedProcessableBlock.blockData.outputModality;\n      return /*#__PURE__*/_jsxDEV(MediaViewer, {\n        content: content,\n        modality: modality\n      }, selectedProcessableBlock === null || selectedProcessableBlock === void 0 ? void 0 : selectedProcessableBlock.blocklyBlock.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this);\n    };\n    switch (selectedProcessableBlock === null || selectedProcessableBlock === void 0 ? void 0 : selectedProcessableBlock.processStatus) {\n      case BlockProcessStatus.STARTED:\n        return /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n          modality: selectedProcessableBlock.blockData.outputModality,\n          message: `Processing ${selectedProcessableBlock.blockData.blockType}...`,\n          tips: ['AI models are working their magic...', 'This might take a minute...', 'Creating something amazing...', 'Almost there...', `Generating ${selectedProcessableBlock.blockData.outputModality}...`, 'Processing your request...']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this);\n      case BlockProcessStatus.FINISHED:\n        return getBlockOutput();\n      case BlockProcessStatus.FAILED:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col items-center justify-center p-8 space-y-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-4xl\",\n            children: \"\\u274C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            color: \"error\",\n            children: \"Failed to process block\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"textSecondary\",\n            className: \"text-center\",\n            children: \"Please check your inputs and try again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  const onActionButtonClicked = async () => {\n    const output = selectedProcessableBlock === null || selectedProcessableBlock === void 0 ? void 0 : selectedProcessableBlock.output;\n    if (!output) {\n      return;\n    }\n    const content = getOutputFromResponse(output);\n    if (!content) {\n      throw new Error('No content to save');\n    }\n    if (isTextOutput(selectedProcessableBlock)) {\n      return copyToClipBoard(content);\n    }\n    saveFile(content);\n  };\n  const getActionButton = () => {\n    const icon = isTextOutput(selectedProcessableBlock) ? /*#__PURE__*/_jsxDEV(CopyAll, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 59\n    }, this) : /*#__PURE__*/_jsxDEV(Save, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 73\n    }, this);\n    const title = isTextOutput(selectedProcessableBlock) ? 'Copy' : 'Save';\n    return {\n      icon,\n      title,\n      label: title,\n      onClick: onActionButtonClicked\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `\n        w-full\n        h-full\n        bg-white\n        rounded-2xl\n        border\n        border-solid\n        border-neutral-400\n        flex-grow-0\n        flex-shrink-0\n        flex\n        flex-col\n        justify-start\n        box-border\n        ${selectedProcessableBlock === undefined || (selectedProcessableBlock === null || selectedProcessableBlock === void 0 ? void 0 : selectedProcessableBlock.blockData.blockType) === 'input' ? 'opacity-30' : ''}\n      `,\n    children: [/*#__PURE__*/_jsxDEV(PanelHeader, {\n      title: `${getModalityEmojiOrEmpty(selectedProcessableBlock === null || selectedProcessableBlock === void 0 ? void 0 : selectedProcessableBlock.blockData.outputModality)} Output`,\n      button: hasOutput(selectedProcessableBlock) && getActionButton()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full box-border flex justify-center items-center overflow-hidden\",\n      children: extractBlockOutput()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(OutputPanel, \"tPmys6b6bhTuTyWLY+orKlgIoJY=\", false, function () {\n  return [useWorkspaceContext];\n});\n_c = OutputPanel;\nvar _c;\n$RefreshReg$(_c, \"OutputPanel\");","map":{"version":3,"names":["Typography","BlockProcessStatus","useWorkspaceContext","copyToClipBoard","getModalityEmojiOrEmpty","getOutputFromResponse","hasOutput","isInputBlock","isTextOutput","saveFile","MediaViewer","PanelHeader","CopyAll","Save","LoadingIndicator","jsxDEV","_jsxDEV","OutputPanel","_s","selectedProcessableBlock","extractBlockOutput","variant","fileName","_jsxFileName","lineNumber","columnNumber","getBlockOutput","children","output","content","modality","blockData","outputModality","blocklyBlock","id","processStatus","STARTED","message","blockType","tips","FINISHED","FAILED","className","color","onActionButtonClicked","Error","getActionButton","icon","title","label","onClick","undefined","button","_c","$RefreshReg$"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/src/components/input-output/OutputPanel.tsx"],"sourcesContent":["import { Typography } from '@mui/material'\nimport { BlockProcessStatus, useWorkspaceContext } from '../../context/WorkspaceContext'\nimport {\n  copyToClipBoard,\n  getModalityEmojiOrEmpty,\n  getOutputFromResponse,\n  hasOutput,\n  isInputBlock,\n  isTextOutput,\n  saveFile,\n} from './input-output.util'\nimport { MediaViewer } from './MediaViewer'\nimport { PanelHeader } from './PanelHeader'\nimport { CopyAll, Save } from '@mui/icons-material'\nimport { LoadingIndicator } from '../atoms/LoadingIndicator'\n\nexport const OutputPanel = () => {\n  const { selectedProcessableBlock } = useWorkspaceContext()\n\n  const extractBlockOutput = () => {\n    if (!selectedProcessableBlock) {\n      // TODO: show output of the last block in the chain\n      return null\n    }\n\n    if (isInputBlock(selectedProcessableBlock)) {\n      return <Typography variant='h5'></Typography>\n    }\n\n    const getBlockOutput = () => {\n      if (!hasOutput(selectedProcessableBlock)) {\n        return <Typography variant='h5'>Processed with no output!!!!</Typography>\n      }\n\n      const output = selectedProcessableBlock.output!\n      const content = getOutputFromResponse(output)\n      const modality = selectedProcessableBlock.blockData.outputModality\n\n      return (\n        <MediaViewer\n          content={content}\n          modality={modality}\n          key={selectedProcessableBlock?.blocklyBlock.id}\n        />\n      )\n    }\n\n    switch (selectedProcessableBlock?.processStatus) {\n      case BlockProcessStatus.STARTED:\n        return (\n          <LoadingIndicator \n            modality={selectedProcessableBlock.blockData.outputModality}\n            message={`Processing ${selectedProcessableBlock.blockData.blockType}...`}\n            tips={[\n              'AI models are working their magic...',\n              'This might take a minute...',\n              'Creating something amazing...',\n              'Almost there...',\n              `Generating ${selectedProcessableBlock.blockData.outputModality}...`,\n              'Processing your request...',\n            ]}\n          />\n        )\n      case BlockProcessStatus.FINISHED:\n        return getBlockOutput()\n      case BlockProcessStatus.FAILED:\n        return (\n          <div className=\"flex flex-col items-center justify-center p-8 space-y-4\">\n            <div className=\"text-4xl\">❌</div>\n            <Typography variant='h6' color=\"error\">Failed to process block</Typography>\n            <Typography variant='body2' color=\"textSecondary\" className=\"text-center\">\n              Please check your inputs and try again\n            </Typography>\n          </div>\n        )\n      default:\n        return <Typography variant='h5'></Typography>\n    }\n  }\n\n  const onActionButtonClicked = async () => {\n    const output = selectedProcessableBlock?.output\n    if (!output) {\n      return\n    }\n\n    const content = getOutputFromResponse(output)\n\n    if (!content) {\n      throw new Error('No content to save')\n    }\n\n    if (isTextOutput(selectedProcessableBlock)) {\n      return copyToClipBoard(content)\n    }\n\n    saveFile(content)\n  }\n\n  const getActionButton = () => {\n    const icon = isTextOutput(selectedProcessableBlock) ? <CopyAll /> : <Save />\n    const title = isTextOutput(selectedProcessableBlock) ? 'Copy' : 'Save'\n\n    return {\n      icon,\n      title,\n      label: title,\n      onClick: onActionButtonClicked,\n    }\n  }\n\n  return (\n    <div\n      className={`\n        w-full\n        h-full\n        bg-white\n        rounded-2xl\n        border\n        border-solid\n        border-neutral-400\n        flex-grow-0\n        flex-shrink-0\n        flex\n        flex-col\n        justify-start\n        box-border\n        ${\n          selectedProcessableBlock === undefined ||\n          selectedProcessableBlock?.blockData.blockType === 'input'\n            ? 'opacity-30'\n            : ''\n        }\n      `}\n    >\n      <PanelHeader\n        title={`${getModalityEmojiOrEmpty(\n          selectedProcessableBlock?.blockData.outputModality,\n        )} Output`}\n        button={hasOutput(selectedProcessableBlock) && getActionButton()}\n      />\n      <div className='w-full h-full box-border flex justify-center items-center overflow-hidden'>\n        {extractBlockOutput()}\n      </div>\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}