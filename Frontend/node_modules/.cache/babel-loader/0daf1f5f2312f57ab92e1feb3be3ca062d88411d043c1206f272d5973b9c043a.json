{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Overrides metrics to exclude the flyout from the viewport.\n */\n\nimport * as Blockly from 'blockly/core';\n\n/** Computes metrics for a toolbox with an always open flyout. */\nexport class ContinuousMetrics extends Blockly.MetricsManager {\n  /** @override */\n  constructor(workspace) {\n    super(workspace);\n  }\n  /**\n   * Computes the viewport size to not include the toolbox and the flyout.\n   * The default viewport includes the flyout.\n   * @override\n   */\n  getViewMetrics() {\n    let getWorkspaceCoordinates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n    const scale = getWorkspaceCoordinates ? this.workspace_.scale : 1;\n    const svgMetrics = this.getSvgMetrics();\n    const toolboxMetrics = this.getToolboxMetrics();\n    const flyoutMetrics = this.getFlyoutMetrics(false);\n    const toolboxPosition = toolboxMetrics.position;\n    if (this.workspace_.getToolbox()) {\n      // Note: Not actually supported at this time due to ContinunousToolbox\n      // only supporting a vertical flyout. But included for completeness.\n      if (toolboxPosition == Blockly.TOOLBOX_AT_TOP || toolboxPosition == Blockly.TOOLBOX_AT_BOTTOM) {\n        svgMetrics.height -= toolboxMetrics.height + flyoutMetrics.height;\n      } else if (toolboxPosition == Blockly.TOOLBOX_AT_LEFT || toolboxPosition == Blockly.TOOLBOX_AT_RIGHT) {\n        svgMetrics.width -= toolboxMetrics.width + flyoutMetrics.width;\n      }\n    }\n    return {\n      height: svgMetrics.height / scale,\n      width: svgMetrics.width / scale,\n      top: -this.workspace_.scrollY / scale,\n      left: -this.workspace_.scrollX / scale\n    };\n  }\n\n  /**\n   * Moves the absoluteLeft and absoluteTop so they no longer include the\n   * flyout.\n   * @override\n   */\n  getAbsoluteMetrics() {\n    const toolboxMetrics = this.getToolboxMetrics();\n    const flyoutMetrics = this.getFlyoutMetrics(false);\n    const toolboxPosition = toolboxMetrics.position;\n    let absoluteLeft = 0;\n    if (this.workspace_.getToolbox() && toolboxPosition == Blockly.TOOLBOX_AT_LEFT) {\n      absoluteLeft = toolboxMetrics.width + flyoutMetrics.width;\n    }\n    let absoluteTop = 0;\n    if (this.workspace_.getToolbox() && toolboxPosition == Blockly.TOOLBOX_AT_TOP) {\n      absoluteTop = toolboxMetrics.height + flyoutMetrics.height;\n    }\n    return {\n      top: absoluteTop,\n      left: absoluteLeft\n    };\n  }\n}\nBlockly.registry.register(Blockly.registry.Type.METRICS_MANAGER, 'CustomMetricsManager', ContinuousMetrics);","map":{"version":3,"names":["Blockly","ContinuousMetrics","MetricsManager","constructor","workspace","getViewMetrics","getWorkspaceCoordinates","arguments","length","undefined","scale","workspace_","svgMetrics","getSvgMetrics","toolboxMetrics","getToolboxMetrics","flyoutMetrics","getFlyoutMetrics","toolboxPosition","position","getToolbox","TOOLBOX_AT_TOP","TOOLBOX_AT_BOTTOM","height","TOOLBOX_AT_LEFT","TOOLBOX_AT_RIGHT","width","top","scrollY","left","scrollX","getAbsoluteMetrics","absoluteLeft","absoluteTop","registry","register","Type","METRICS_MANAGER"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/src/components/blockly/continuous-toolbox/ContinuousMetrics.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Overrides metrics to exclude the flyout from the viewport.\n */\n\nimport * as Blockly from 'blockly/core'\n\n/** Computes metrics for a toolbox with an always open flyout. */\nexport class ContinuousMetrics extends Blockly.MetricsManager {\n  /** @override */\n  constructor(workspace) {\n    super(workspace)\n  }\n  /**\n   * Computes the viewport size to not include the toolbox and the flyout.\n   * The default viewport includes the flyout.\n   * @override\n   */\n  getViewMetrics(getWorkspaceCoordinates = undefined) {\n    const scale = getWorkspaceCoordinates ? this.workspace_.scale : 1\n    const svgMetrics = this.getSvgMetrics()\n    const toolboxMetrics = this.getToolboxMetrics()\n    const flyoutMetrics = this.getFlyoutMetrics(false)\n    const toolboxPosition = toolboxMetrics.position\n\n    if (this.workspace_.getToolbox()) {\n      // Note: Not actually supported at this time due to ContinunousToolbox\n      // only supporting a vertical flyout. But included for completeness.\n      if (\n        toolboxPosition == Blockly.TOOLBOX_AT_TOP ||\n        toolboxPosition == Blockly.TOOLBOX_AT_BOTTOM\n      ) {\n        svgMetrics.height -= toolboxMetrics.height + flyoutMetrics.height\n      } else if (\n        toolboxPosition == Blockly.TOOLBOX_AT_LEFT ||\n        toolboxPosition == Blockly.TOOLBOX_AT_RIGHT\n      ) {\n        svgMetrics.width -= toolboxMetrics.width + flyoutMetrics.width\n      }\n    }\n    return {\n      height: svgMetrics.height / scale,\n      width: svgMetrics.width / scale,\n      top: -this.workspace_.scrollY / scale,\n      left: -this.workspace_.scrollX / scale,\n    }\n  }\n\n  /**\n   * Moves the absoluteLeft and absoluteTop so they no longer include the\n   * flyout.\n   * @override\n   */\n  getAbsoluteMetrics() {\n    const toolboxMetrics = this.getToolboxMetrics()\n    const flyoutMetrics = this.getFlyoutMetrics(false)\n    const toolboxPosition = toolboxMetrics.position\n    let absoluteLeft = 0\n\n    if (this.workspace_.getToolbox() && toolboxPosition == Blockly.TOOLBOX_AT_LEFT) {\n      absoluteLeft = toolboxMetrics.width + flyoutMetrics.width\n    }\n    let absoluteTop = 0\n    if (this.workspace_.getToolbox() && toolboxPosition == Blockly.TOOLBOX_AT_TOP) {\n      absoluteTop = toolboxMetrics.height + flyoutMetrics.height\n    }\n    return {\n      top: absoluteTop,\n      left: absoluteLeft,\n    }\n  }\n}\n\nBlockly.registry.register(\n  Blockly.registry.Type.METRICS_MANAGER,\n  'CustomMetricsManager',\n  ContinuousMetrics,\n)\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,OAAO,KAAKA,OAAO,MAAM,cAAc;;AAEvC;AACA,OAAO,MAAMC,iBAAiB,SAASD,OAAO,CAACE,cAAc,CAAC;EAC5D;EACAC,WAAWA,CAACC,SAAS,EAAE;IACrB,KAAK,CAACA,SAAS,CAAC;EAClB;EACA;AACF;AACA;AACA;AACA;EACEC,cAAcA,CAAA,EAAsC;IAAA,IAArCC,uBAAuB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGE,SAAS;IAChD,MAAMC,KAAK,GAAGJ,uBAAuB,GAAG,IAAI,CAACK,UAAU,CAACD,KAAK,GAAG,CAAC;IACjE,MAAME,UAAU,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC;IACvC,MAAMC,cAAc,GAAG,IAAI,CAACC,iBAAiB,CAAC,CAAC;IAC/C,MAAMC,aAAa,GAAG,IAAI,CAACC,gBAAgB,CAAC,KAAK,CAAC;IAClD,MAAMC,eAAe,GAAGJ,cAAc,CAACK,QAAQ;IAE/C,IAAI,IAAI,CAACR,UAAU,CAACS,UAAU,CAAC,CAAC,EAAE;MAChC;MACA;MACA,IACEF,eAAe,IAAIlB,OAAO,CAACqB,cAAc,IACzCH,eAAe,IAAIlB,OAAO,CAACsB,iBAAiB,EAC5C;QACAV,UAAU,CAACW,MAAM,IAAIT,cAAc,CAACS,MAAM,GAAGP,aAAa,CAACO,MAAM;MACnE,CAAC,MAAM,IACLL,eAAe,IAAIlB,OAAO,CAACwB,eAAe,IAC1CN,eAAe,IAAIlB,OAAO,CAACyB,gBAAgB,EAC3C;QACAb,UAAU,CAACc,KAAK,IAAIZ,cAAc,CAACY,KAAK,GAAGV,aAAa,CAACU,KAAK;MAChE;IACF;IACA,OAAO;MACLH,MAAM,EAAEX,UAAU,CAACW,MAAM,GAAGb,KAAK;MACjCgB,KAAK,EAAEd,UAAU,CAACc,KAAK,GAAGhB,KAAK;MAC/BiB,GAAG,EAAE,CAAC,IAAI,CAAChB,UAAU,CAACiB,OAAO,GAAGlB,KAAK;MACrCmB,IAAI,EAAE,CAAC,IAAI,CAAClB,UAAU,CAACmB,OAAO,GAAGpB;IACnC,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;EACEqB,kBAAkBA,CAAA,EAAG;IACnB,MAAMjB,cAAc,GAAG,IAAI,CAACC,iBAAiB,CAAC,CAAC;IAC/C,MAAMC,aAAa,GAAG,IAAI,CAACC,gBAAgB,CAAC,KAAK,CAAC;IAClD,MAAMC,eAAe,GAAGJ,cAAc,CAACK,QAAQ;IAC/C,IAAIa,YAAY,GAAG,CAAC;IAEpB,IAAI,IAAI,CAACrB,UAAU,CAACS,UAAU,CAAC,CAAC,IAAIF,eAAe,IAAIlB,OAAO,CAACwB,eAAe,EAAE;MAC9EQ,YAAY,GAAGlB,cAAc,CAACY,KAAK,GAAGV,aAAa,CAACU,KAAK;IAC3D;IACA,IAAIO,WAAW,GAAG,CAAC;IACnB,IAAI,IAAI,CAACtB,UAAU,CAACS,UAAU,CAAC,CAAC,IAAIF,eAAe,IAAIlB,OAAO,CAACqB,cAAc,EAAE;MAC7EY,WAAW,GAAGnB,cAAc,CAACS,MAAM,GAAGP,aAAa,CAACO,MAAM;IAC5D;IACA,OAAO;MACLI,GAAG,EAAEM,WAAW;MAChBJ,IAAI,EAAEG;IACR,CAAC;EACH;AACF;AAEAhC,OAAO,CAACkC,QAAQ,CAACC,QAAQ,CACvBnC,OAAO,CAACkC,QAAQ,CAACE,IAAI,CAACC,eAAe,EACrC,sBAAsB,EACtBpC,iBACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}