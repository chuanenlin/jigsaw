{"ast":null,"code":"var _jsxFileName = \"/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/src/components/blockly/BlocklyComponent.tsx\",\n  _s = $RefreshSig$();\nimport { Box } from '@mui/material';\nimport 'blockly/blocks';\nimport Blockly from 'blockly/core';\nimport { useEffect, useMemo, useRef } from 'react';\nimport { initCustomBlocks } from './blocks/init-custom-blocks';\nimport { blocksList, modalityColors } from '../../constants';\nimport { Modality } from '../../types';\nimport { ChildBasedDragger, registerCustomClasses } from './custom';\nimport { overrideBlockly } from './blockly-overrides';\nimport { useWorkspaceContext } from '../../context';\nimport { ContinuousFlyout, ContinuousMetrics, ContinuousToolbox } from './continuous-toolbox';\nimport { useTooltip } from '../../hooks/useTooltip';\nimport { extractBlockRuntimeValueAndUnit } from './util';\nimport styled from '@emotion/styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst modalityValues = Object.values(Modality);\nconst getBlocks = (modalityFilter, visibleBlockIds, blockFilter) => {\n  return blocksList.filter(block => block.inputModality.some(inputModality => inputModality.modality === modalityFilter) && visibleBlockIds.includes(block.id)).filter(block => {\n    var _block$meta, _block$meta$propertie;\n    const blockRuntime = extractBlockRuntimeValueAndUnit((_block$meta = block.meta) === null || _block$meta === void 0 ? void 0 : (_block$meta$propertie = _block$meta.properties) === null || _block$meta$propertie === void 0 ? void 0 : _block$meta$propertie.maxRuntime).runtime;\n    const allowedMaxRuntime = blockFilter === null || blockFilter === void 0 ? void 0 : blockFilter.maxRuntine;\n    if (!allowedMaxRuntime) return true;\n    return blockRuntime <= allowedMaxRuntime;\n  }).map(block => {\n    const b = {\n      kind: 'block',\n      type: block.name\n    };\n    return [b /* , blockLabel */];\n  }).flat();\n};\nconst BlocklyContainer = styled(Box)(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    '& .blocklyMainBackground': {\n      stroke: 'none',\n      fill: '#f8fafc'\n    },\n    '& .blocklyToolboxDiv': {\n      backgroundColor: '#ffffff',\n      borderRight: '1px solid #e2e8f0',\n      boxShadow: '4px 0 6px rgba(0, 0, 0, 0.05)'\n    },\n    '& .blocklyTreeRow': {\n      padding: '8px 16px',\n      margin: '4px 0',\n      borderRadius: '8px',\n      transition: 'background-color 0.2s ease',\n      '&:hover': {\n        backgroundColor: '#f1f5f9'\n      }\n    }\n  };\n});\nconst createTooltipContent = block => {\n  var _meta$properties;\n  const blockData = JSON.parse(block.data);\n  const {\n    meta,\n    inputModality,\n    outputModality\n  } = blockData.block;\n  const tooltipContent = document.createElement('div');\n  tooltipContent.className = 'blockly-tooltip';\n\n  // Title\n  const title = document.createElement('div');\n  title.className = 'blockly-tooltip-title';\n  title.textContent = meta.name || block.type;\n  tooltipContent.appendChild(title);\n\n  // Description\n  if (meta.description) {\n    const description = document.createElement('div');\n    description.className = 'blockly-tooltip-description';\n    description.textContent = meta.description;\n    tooltipContent.appendChild(description);\n  }\n\n  // Modalities\n  const modalitiesContainer = document.createElement('div');\n\n  // Input modalities\n  inputModality.forEach(mod => {\n    const modality = document.createElement('span');\n    modality.className = 'blockly-tooltip-modality';\n    modality.textContent = `📥 ${mod.modality}`;\n    modalitiesContainer.appendChild(modality);\n  });\n\n  // Output modality\n  const outModality = document.createElement('span');\n  outModality.className = 'blockly-tooltip-modality';\n  outModality.textContent = `📤 ${outputModality}`;\n  modalitiesContainer.appendChild(outModality);\n  tooltipContent.appendChild(modalitiesContainer);\n\n  // Runtime info\n  if (meta !== null && meta !== void 0 && (_meta$properties = meta.properties) !== null && _meta$properties !== void 0 && _meta$properties.maxRuntime) {\n    const runtime = document.createElement('div');\n    runtime.className = 'blockly-tooltip-runtime';\n    runtime.innerHTML = `⏱️ Expected runtime: ${meta.properties.maxRuntime}`;\n    tooltipContent.appendChild(runtime);\n  }\n  return tooltipContent;\n};\nexport const BlocklyComponent = () => {\n  _s();\n  const primaryWorkSpace = useRef();\n  const ref = useRef('');\n  const workspaceXml = useRef('<xml xmlns=\"http://www.w3.org/1999/xhtml\"></xml>');\n  const {\n    setWorkspace,\n    onSelectedWorkspaceBlockChanged,\n    onBlocksChanged,\n    setSelectedBlocklyBlockId,\n    blockFilter,\n    visibleBlockIds\n  } = useWorkspaceContext();\n  const {\n    setupTooltipListeners\n  } = useTooltip();\n  const toolboxContent = useMemo(() => ({\n    contents: modalityValues.map(modality => ({\n      kind: 'category',\n      name: modality,\n      colour: modalityColors[modality],\n      contents: getBlocks(modality, visibleBlockIds, blockFilter)\n    }))\n  }), [visibleBlockIds, blockFilter]);\n  useEffect(() => {\n    var _primaryWorkSpace$cur, _primaryWorkSpace$cur2;\n    (_primaryWorkSpace$cur = primaryWorkSpace.current) === null || _primaryWorkSpace$cur === void 0 ? void 0 : _primaryWorkSpace$cur.updateToolbox(toolboxContent);\n    (_primaryWorkSpace$cur2 = primaryWorkSpace.current) === null || _primaryWorkSpace$cur2 === void 0 ? void 0 : _primaryWorkSpace$cur2.refreshToolboxSelection();\n    // Has to update the listeners when the toolbox content is changed\n    setupTooltipListeners(primaryWorkSpace.current);\n  }, [toolboxContent]);\n  const options = {\n    renderer: 'custom_renderer',\n    rtl: false,\n    toolboxPosition: 'start',\n    toolbox: toolboxContent,\n    move: {\n      scrollbars: true,\n      drag: true\n    },\n    theme: 'custom_theme',\n    trashcan: true,\n    disable: true,\n    zoom: {\n      wheel: true,\n      controls: false\n    },\n    plugins: {\n      toolbox: ContinuousToolbox,\n      flyoutsVerticalToolbox: ContinuousFlyout,\n      metricsManager: ContinuousMetrics,\n      blockDragger: ChildBasedDragger\n    }\n  };\n  useEffect(() => {\n    initCustomBlocks();\n    overrideBlockly();\n    const unregisterCustomClasses = registerCustomClasses();\n    return () => {\n      unregisterCustomClasses();\n    };\n  });\n  useEffect(() => {\n    primaryWorkSpace.current = Blockly.inject(ref.current, options);\n    setupTooltipListeners(primaryWorkSpace.current);\n    const handleChangeEvent = event => {\n      if (!primaryWorkSpace.current) {\n        return;\n      }\n      const workspace = primaryWorkSpace.current;\n      if (event.type === Blockly.Events.SELECTED) {\n        const selectedBlocklyBlock = event.newElementId ? workspace.getBlockById(event.newElementId) : undefined;\n        onSelectedWorkspaceBlockChanged(selectedBlocklyBlock);\n        setSelectedBlocklyBlockId(selectedBlocklyBlock === null || selectedBlocklyBlock === void 0 ? void 0 : selectedBlocklyBlock.id);\n      }\n      if (event.type === Blockly.Events.BLOCK_CREATE || event.type === Blockly.Events.BLOCK_DELETE) {\n        onBlocksChanged(workspace.getAllBlocks(false));\n      }\n\n      /**\n       * Somehow the custom dragger messes up setting the selected class on blocks\n       * so we have to do it manually.\n       */\n      if (event.type === Blockly.Events.CLICK) {\n        // Remove selected class from all blocks\n        workspace.getAllBlocks(false).forEach(block => {\n          block.getSvgRoot().classList.remove('blocklySelected');\n        });\n\n        // Add selected class only if a block is clicked (not the workspace)\n        if (event.targetType === 'block') {\n          var _workspace$getBlockBy;\n          (_workspace$getBlockBy = workspace.getBlockById(event.blockId)) === null || _workspace$getBlockBy === void 0 ? void 0 : _workspace$getBlockBy.getSvgRoot().classList.add('blocklySelected');\n          Blockly.Events.fire(new Blockly.Events.Selected(null, event.blockId, workspace.id));\n        }\n      }\n    };\n    if (primaryWorkSpace.current) {\n      primaryWorkSpace.current.addChangeListener(handleChangeEvent);\n\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      primaryWorkSpace.current.showContextMenu = () => {};\n      setWorkspace(primaryWorkSpace.current);\n      if (workspaceXml.current) {\n        Blockly.Xml.domToWorkspace(Blockly.utils.xml.textToDom(workspaceXml.current), primaryWorkSpace.current);\n      }\n    }\n    return () => {\n      if (primaryWorkSpace.current) {\n        primaryWorkSpace.current.removeChangeListener(handleChangeEvent);\n      }\n    };\n  }, [workspaceXml]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: \"h-full w-full\",\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 10\n  }, this);\n};\n_s(BlocklyComponent, \"edg1U08FBbZbyIanuUiNsCWI4eA=\", false, function () {\n  return [useWorkspaceContext, useTooltip];\n});\n_c = BlocklyComponent;\nvar _c;\n$RefreshReg$(_c, \"BlocklyComponent\");","map":{"version":3,"names":["Box","Blockly","useEffect","useMemo","useRef","initCustomBlocks","blocksList","modalityColors","Modality","ChildBasedDragger","registerCustomClasses","overrideBlockly","useWorkspaceContext","ContinuousFlyout","ContinuousMetrics","ContinuousToolbox","useTooltip","extractBlockRuntimeValueAndUnit","styled","jsxDEV","_jsxDEV","modalityValues","Object","values","getBlocks","modalityFilter","visibleBlockIds","blockFilter","filter","block","inputModality","some","modality","includes","id","_block$meta","_block$meta$propertie","blockRuntime","meta","properties","maxRuntime","runtime","allowedMaxRuntime","maxRuntine","map","b","kind","type","name","flat","BlocklyContainer","_ref","theme","stroke","fill","backgroundColor","borderRight","boxShadow","padding","margin","borderRadius","transition","createTooltipContent","_meta$properties","blockData","JSON","parse","data","outputModality","tooltipContent","document","createElement","className","title","textContent","appendChild","description","modalitiesContainer","forEach","mod","outModality","innerHTML","BlocklyComponent","_s","primaryWorkSpace","ref","workspaceXml","setWorkspace","onSelectedWorkspaceBlockChanged","onBlocksChanged","setSelectedBlocklyBlockId","setupTooltipListeners","toolboxContent","contents","colour","_primaryWorkSpace$cur","_primaryWorkSpace$cur2","current","updateToolbox","refreshToolboxSelection","options","renderer","rtl","toolboxPosition","toolbox","move","scrollbars","drag","trashcan","disable","zoom","wheel","controls","plugins","flyoutsVerticalToolbox","metricsManager","blockDragger","unregisterCustomClasses","inject","handleChangeEvent","event","workspace","Events","SELECTED","selectedBlocklyBlock","newElementId","getBlockById","undefined","BLOCK_CREATE","BLOCK_DELETE","getAllBlocks","CLICK","getSvgRoot","classList","remove","targetType","_workspace$getBlockBy","blockId","add","fire","Selected","addChangeListener","showContextMenu","Xml","domToWorkspace","utils","xml","textToDom","removeChangeListener","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/src/components/blockly/BlocklyComponent.tsx"],"sourcesContent":["import { Box } from '@mui/material'\nimport 'blockly/blocks'\nimport Blockly from 'blockly/core'\nimport { useEffect, useMemo, useRef } from 'react'\nimport { initCustomBlocks } from './blocks/init-custom-blocks'\nimport { blocksList, modalityColors } from '../../constants'\nimport { Modality } from '../../types'\nimport { ChildBasedDragger, registerCustomClasses } from './custom'\nimport { overrideBlockly } from './blockly-overrides'\nimport { useWorkspaceContext } from '../../context'\nimport { BlocklistFilter } from '../block-search'\nimport { ContinuousFlyout, ContinuousMetrics, ContinuousToolbox } from './continuous-toolbox'\nimport { useTooltip } from '../../hooks/useTooltip'\nimport { extractBlockRuntimeValueAndUnit } from './util'\nimport styled from '@emotion/styled'\n\nconst modalityValues = Object.values(Modality)\n\nconst getBlocks = (\n  modalityFilter: Modality,\n  visibleBlockIds: Array<string>,\n  blockFilter: BlocklistFilter | undefined,\n) => {\n  return blocksList\n    .filter(\n      (block) =>\n        block.inputModality.some((inputModality) => inputModality.modality === modalityFilter) &&\n        visibleBlockIds.includes(block.id),\n    )\n    .filter((block) => {\n      const blockRuntime = extractBlockRuntimeValueAndUnit(\n        block.meta?.properties?.maxRuntime,\n      ).runtime\n      const allowedMaxRuntime = blockFilter?.maxRuntine\n\n      if (!allowedMaxRuntime) return true\n\n      return blockRuntime <= allowedMaxRuntime\n    })\n    .map((block) => {\n      const b = {\n        kind: 'block',\n        type: block.name,\n      }\n\n      return [b /* , blockLabel */]\n    })\n    .flat()\n}\n\nconst BlocklyContainer = styled(Box)(({ theme }) => ({\n  '& .blocklyMainBackground': {\n    stroke: 'none',\n    fill: '#f8fafc',\n  },\n  '& .blocklyToolboxDiv': {\n    backgroundColor: '#ffffff',\n    borderRight: '1px solid #e2e8f0',\n    boxShadow: '4px 0 6px rgba(0, 0, 0, 0.05)',\n  },\n  '& .blocklyTreeRow': {\n    padding: '8px 16px',\n    margin: '4px 0',\n    borderRadius: '8px',\n    transition: 'background-color 0.2s ease',\n    '&:hover': {\n      backgroundColor: '#f1f5f9',\n    }\n  }\n}));\n\nconst createTooltipContent = (block: any) => {\n  const blockData = JSON.parse(block.data);\n  const { meta, inputModality, outputModality } = blockData.block;\n  \n  const tooltipContent = document.createElement('div');\n  tooltipContent.className = 'blockly-tooltip';\n  \n  // Title\n  const title = document.createElement('div');\n  title.className = 'blockly-tooltip-title';\n  title.textContent = meta.name || block.type;\n  tooltipContent.appendChild(title);\n  \n  // Description\n  if (meta.description) {\n    const description = document.createElement('div');\n    description.className = 'blockly-tooltip-description';\n    description.textContent = meta.description;\n    tooltipContent.appendChild(description);\n  }\n  \n  // Modalities\n  const modalitiesContainer = document.createElement('div');\n  \n  // Input modalities\n  inputModality.forEach(mod => {\n    const modality = document.createElement('span');\n    modality.className = 'blockly-tooltip-modality';\n    modality.textContent = `📥 ${mod.modality}`;\n    modalitiesContainer.appendChild(modality);\n  });\n  \n  // Output modality\n  const outModality = document.createElement('span');\n  outModality.className = 'blockly-tooltip-modality';\n  outModality.textContent = `📤 ${outputModality}`;\n  modalitiesContainer.appendChild(outModality);\n  \n  tooltipContent.appendChild(modalitiesContainer);\n  \n  // Runtime info\n  if (meta?.properties?.maxRuntime) {\n    const runtime = document.createElement('div');\n    runtime.className = 'blockly-tooltip-runtime';\n    runtime.innerHTML = `⏱️ Expected runtime: ${meta.properties.maxRuntime}`;\n    tooltipContent.appendChild(runtime);\n  }\n  \n  return tooltipContent;\n};\n\nexport const BlocklyComponent = () => {\n  const primaryWorkSpace = useRef<Blockly.WorkspaceSvg>()\n  const ref = useRef<Element | string>('')\n  const workspaceXml = useRef('<xml xmlns=\"http://www.w3.org/1999/xhtml\"></xml>')\n\n  const {\n    setWorkspace,\n    onSelectedWorkspaceBlockChanged,\n    onBlocksChanged,\n    setSelectedBlocklyBlockId,\n    blockFilter,\n    visibleBlockIds,\n  } = useWorkspaceContext()\n\n  const { setupTooltipListeners } = useTooltip()\n\n  const toolboxContent: Blockly.utils.toolbox.ToolboxDefinition = useMemo(\n    () => ({\n      contents: modalityValues.map((modality) => ({\n        kind: 'category',\n        name: modality,\n        colour: modalityColors[modality],\n        contents: getBlocks(modality, visibleBlockIds, blockFilter),\n      })),\n    }),\n    [visibleBlockIds, blockFilter],\n  )\n\n  useEffect(() => {\n    primaryWorkSpace.current?.updateToolbox(toolboxContent)\n    primaryWorkSpace.current?.refreshToolboxSelection()\n    // Has to update the listeners when the toolbox content is changed\n    setupTooltipListeners(primaryWorkSpace.current)\n  }, [toolboxContent])\n\n  const options: Blockly.BlocklyOptions = {\n    renderer: 'custom_renderer',\n    rtl: false,\n    toolboxPosition: 'start',\n    toolbox: toolboxContent,\n    move: {\n      scrollbars: true,\n      drag: true,\n    },\n    theme: 'custom_theme',\n    trashcan: true,\n    disable: true,\n    zoom: {\n      wheel: true,\n      controls: false,\n    },\n    plugins: {\n      toolbox: ContinuousToolbox,\n      flyoutsVerticalToolbox: ContinuousFlyout,\n      metricsManager: ContinuousMetrics,\n      blockDragger: ChildBasedDragger,\n    },\n  }\n\n  useEffect(() => {\n    initCustomBlocks()\n    overrideBlockly()\n    const unregisterCustomClasses = registerCustomClasses()\n    return () => {\n      unregisterCustomClasses()\n    }\n  })\n\n  useEffect(() => {\n    primaryWorkSpace.current = Blockly.inject(ref.current, options)\n    setupTooltipListeners(primaryWorkSpace.current)\n\n    const handleChangeEvent = (event: {\n      type: string\n      newElementId: string | undefined\n      blockId: string\n      targetType: string\n    }) => {\n      if (!primaryWorkSpace.current) {\n        return\n      }\n\n      const workspace = primaryWorkSpace.current\n\n      if (event.type === Blockly.Events.SELECTED) {\n        const selectedBlocklyBlock = event.newElementId\n          ? workspace.getBlockById(event.newElementId)\n          : undefined\n\n        onSelectedWorkspaceBlockChanged(selectedBlocklyBlock)\n        setSelectedBlocklyBlockId(selectedBlocklyBlock?.id)\n      }\n\n      if (\n        event.type === Blockly.Events.BLOCK_CREATE ||\n        event.type === Blockly.Events.BLOCK_DELETE\n      ) {\n        onBlocksChanged(workspace.getAllBlocks(false))\n      }\n\n      /**\n       * Somehow the custom dragger messes up setting the selected class on blocks\n       * so we have to do it manually.\n       */\n      if (event.type === Blockly.Events.CLICK) {\n        // Remove selected class from all blocks\n        workspace.getAllBlocks(false).forEach((block) => {\n          block.getSvgRoot().classList.remove('blocklySelected')\n        })\n\n        // Add selected class only if a block is clicked (not the workspace)\n        if (event.targetType === 'block') {\n          workspace.getBlockById(event.blockId)?.getSvgRoot().classList.add('blocklySelected')\n          Blockly.Events.fire(new Blockly.Events.Selected(null, event.blockId, workspace.id))\n        }\n      }\n    }\n\n    if (primaryWorkSpace.current) {\n      primaryWorkSpace.current.addChangeListener(handleChangeEvent)\n\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      primaryWorkSpace.current.showContextMenu = () => {}\n      setWorkspace(primaryWorkSpace.current)\n\n      if (workspaceXml.current) {\n        Blockly.Xml.domToWorkspace(\n          Blockly.utils.xml.textToDom(workspaceXml.current),\n          primaryWorkSpace.current,\n        )\n      }\n    }\n\n    return () => {\n      if (primaryWorkSpace.current) {\n        primaryWorkSpace.current.removeChangeListener(handleChangeEvent)\n      }\n    }\n  }, [workspaceXml])\n\n  return <Box className='h-full w-full' ref={ref}></Box>\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}