{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n  message: _ref => {\n    let {\n      schemaCode\n    } = _ref;\n    return (0, codegen_1.str)`must be multiple of ${schemaCode}`;\n  },\n  params: _ref2 => {\n    let {\n      schemaCode\n    } = _ref2;\n    return (0, codegen_1._)`{multipleOf: ${schemaCode}}`;\n  }\n};\nconst def = {\n  keyword: \"multipleOf\",\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt) {\n    const {\n      gen,\n      data,\n      schemaCode,\n      it\n    } = cxt;\n    // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)\n    const prec = it.opts.multipleOfPrecision;\n    const res = gen.let(\"res\");\n    const invalid = prec ? (0, codegen_1._)`Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}` : (0, codegen_1._)`${res} !== parseInt(${res})`;\n    cxt.fail$data((0, codegen_1._)`(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);\n  }\n};\nexports.default = def;","map":{"version":3,"names":["codegen_1","require","error","message","_ref","schemaCode","str","params","_ref2","_","def","keyword","type","schemaType","$data","code","cxt","gen","data","it","prec","opts","multipleOfPrecision","res","let","invalid","fail$data","exports","default"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/ajv/lib/vocabularies/validation/multipleOf.ts"],"sourcesContent":["import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str} from \"../../compile/codegen\"\n\nexport type MultipleOfError = ErrorObject<\n  \"multipleOf\",\n  {multipleOf: number},\n  number | {$data: string}\n>\n\nconst error: KeywordErrorDefinition = {\n  message: ({schemaCode}) => str`must be multiple of ${schemaCode}`,\n  params: ({schemaCode}) => _`{multipleOf: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"multipleOf\",\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, data, schemaCode, it} = cxt\n    // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)\n    const prec = it.opts.multipleOfPrecision\n    const res = gen.let(\"res\")\n    const invalid = prec\n      ? _`Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}`\n      : _`${res} !== parseInt(${res})`\n    cxt.fail$data(_`(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`)\n  },\n}\n\nexport default def\n"],"mappings":";;;;;AAEA,MAAAA,SAAA,GAAAC,OAAA;AAQA,MAAMC,KAAK,GAA2B;EACpCC,OAAO,EAAEC,IAAA;IAAA,IAAC;MAACC;IAAU,CAAC,GAAAD,IAAA;IAAA,OAAK,IAAAJ,SAAA,CAAAM,GAAG,wBAAuBD,UAAU,EAAE;EAAA;EACjEE,MAAM,EAAEC,KAAA;IAAA,IAAC;MAACH;IAAU,CAAC,GAAAG,KAAA;IAAA,OAAK,IAAAR,SAAA,CAAAS,CAAC,iBAAgBJ,UAAU,GAAG;EAAA;CACzD;AAED,MAAMK,GAAG,GAA0B;EACjCC,OAAO,EAAE,YAAY;EACrBC,IAAI,EAAE,QAAQ;EACdC,UAAU,EAAE,QAAQ;EACpBC,KAAK,EAAE,IAAI;EACXZ,KAAK;EACLa,IAAIA,CAACC,GAAe;IAClB,MAAM;MAACC,GAAG;MAAEC,IAAI;MAAEb,UAAU;MAAEc;IAAE,CAAC,GAAGH,GAAG;IACvC;IACA,MAAMI,IAAI,GAAGD,EAAE,CAACE,IAAI,CAACC,mBAAmB;IACxC,MAAMC,GAAG,GAAGN,GAAG,CAACO,GAAG,CAAC,KAAK,CAAC;IAC1B,MAAMC,OAAO,GAAGL,IAAI,GAChB,IAAApB,SAAA,CAAAS,CAAC,wBAAuBc,GAAG,OAAOA,GAAG,UAAUH,IAAI,EAAE,GACrD,IAAApB,SAAA,CAAAS,CAAC,IAAGc,GAAG,iBAAiBA,GAAG,GAAG;IAClCP,GAAG,CAACU,SAAS,CAAC,IAAA1B,SAAA,CAAAS,CAAC,KAAIJ,UAAU,cAAckB,GAAG,MAAML,IAAI,IAAIb,UAAU,KAAKoB,OAAO,IAAI,CAAC;EACzF;CACD;AAEDE,OAAA,CAAAC,OAAA,GAAelB,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}