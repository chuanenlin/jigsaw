{"ast":null,"code":"// This is needed for AutChain. Because the backend uses the endpoint name as the block type.\n// TODO: Maybe we can ask the backend to change this.\n\nimport { Modality } from '../types';\nexport let Endpoint = /*#__PURE__*/function (Endpoint) {\n  Endpoint[\"Text2Text\"] = \"text2text\";\n  Endpoint[\"Text2Img\"] = \"text2img\";\n  Endpoint[\"Text2Speech\"] = \"text2speech\";\n  Endpoint[\"Text2Video\"] = \"text2video\";\n  Endpoint[\"Text23D\"] = \"text23d\";\n  Endpoint[\"Text2Audio\"] = \"text2audio\";\n  Endpoint[\"Text2Music\"] = \"text2music\";\n  Endpoint[\"TextAndPose2Image\"] = \"textandpose2img\";\n  Endpoint[\"TextAndSeg2Image\"] = \"textandseg2img\";\n  Endpoint[\"TextAndDepth2Image\"] = \"textanddepth2img\";\n  Endpoint[\"TextAndNormal2Image\"] = \"textandnormal2img\";\n  Endpoint[\"TextAndEdge2Image\"] = \"textandedge2img\";\n  Endpoint[\"TextAndSketch2Image\"] = \"textandsketch2img\";\n  Endpoint[\"TextAndSketch2Art\"] = \"textandsketch2art\";\n  Endpoint[\"Image2Character\"] = \"img2character\";\n  Endpoint[\"Image2Tags\"] = \"img2tags\";\n  Endpoint[\"Image2Text\"] = \"img2text\";\n  Endpoint[\"Image2SuperImage\"] = \"img2superimg\";\n  Endpoint[\"Image2NoPeopleImage\"] = \"img2nopeopleimg\";\n  Endpoint[\"Image2Pose\"] = \"img2pose\";\n  Endpoint[\"Image2Depth\"] = \"img2depth\";\n  Endpoint[\"Image2Normal\"] = \"img2normal\";\n  Endpoint[\"Image2Edge\"] = \"img2edge\";\n  Endpoint[\"Image2Seg\"] = \"img2seg\";\n  Endpoint[\"Image23d\"] = \"img23d\";\n  Endpoint[\"Image2GoodFaceImage\"] = \"img2goodfaceimg\";\n  Endpoint[\"ImageGray2ImageColor\"] = \"imggray2imgcolor\";\n  Endpoint[\"ImageColor2ImageGray\"] = \"imgcolor2imggray\";\n  Endpoint[\"Image2Cutout\"] = \"img2cutout\";\n  Endpoint[\"Image2Box\"] = \"img2box\";\n  Endpoint[\"Image2Video\"] = \"img2video\";\n  Endpoint[\"ImageAndText2Image\"] = \"imgandtext2img\";\n  Endpoint[\"Music2Text\"] = \"music2text\";\n  Endpoint[\"Speech2Text\"] = \"speech2text\";\n  Endpoint[\"Video2Text\"] = \"video2text\";\n  Endpoint[\"Video2SuperVideo\"] = \"video2supervideo\";\n  Endpoint[\"Video2SmoothVideo\"] = \"video2smoothvideo\";\n  Endpoint[\"Video2Cutout\"] = \"video2cutout\";\n  Endpoint[\"SpeechSpeech2Speech\"] = \"speech_speech2speech\";\n  Endpoint[\"Face2TalkingHead\"] = \"face2talkinghead\";\n  return Endpoint;\n}({});\n\n// Separate enum for upload endpoints because they are not part of the autochain response\n// We would have to do extra checks in the places using Endpoint to check if it's an upload endpoint\nexport let UploadEndpoint = /*#__PURE__*/function (UploadEndpoint) {\n  UploadEndpoint[\"UploadImage\"] = \"upload_image\";\n  UploadEndpoint[\"UploadVideo\"] = \"upload_video\";\n  UploadEndpoint[\"UploadAudio\"] = \"upload_audio\";\n  UploadEndpoint[\"Upload3D\"] = \"upload_3d\";\n  return UploadEndpoint;\n}({});\nexport const EndpointToBlockType = {\n  [Endpoint.Text2Text]: 'Text to text',\n  [Endpoint.Text2Img]: 'Text to image',\n  [Endpoint.Text2Video]: 'Text to video',\n  [Endpoint.Text23D]: 'Text to 3D',\n  [Endpoint.Text2Audio]: 'Text to audio',\n  [Endpoint.Text2Music]: 'Text to music',\n  [Endpoint.Image2Text]: 'Image to text',\n  [Endpoint.Image2SuperImage]: 'Image to super image',\n  [Endpoint.Image2GoodFaceImage]: 'Image to good face',\n  [Endpoint.ImageGray2ImageColor]: 'Image Gray to Image Color',\n  [Endpoint.Image2Cutout]: 'Image to cutout',\n  [Endpoint.Image2Box]: 'Image to box',\n  [Endpoint.Image2Video]: 'Image to video',\n  [Endpoint.Music2Text]: 'Music to text',\n  [Endpoint.Speech2Text]: 'Speech to text'\n};\nexport const ModalityToInputType = {\n  [Modality.Text]: ['Text'],\n  [Modality.Image]: ['.jpg', '.png'],\n  [Modality.Audio]: ['.wav', '.mp3'],\n  [Modality.Video]: ['.mp4'],\n  [Modality.ThreeDimentional]: ['.obj'],\n  // TODO: find out what is the correct type for the following\n  [Modality.Custom]: ['custom/*'],\n  [Modality.Sketch]: ['sketch/*']\n};\nexport const ModalityToDataReadType = {\n  [Modality.Text]: 'Text',\n  [Modality.Image]: 'DataURL',\n  [Modality.Audio]: 'DataURL',\n  [Modality.Video]: 'DataURL',\n  [Modality.ThreeDimentional]: 'DataURL',\n  [Modality.Custom]: 'DataURL',\n  [Modality.Sketch]: 'DataURL'\n};\nexport const DummyBlockMeta = {\n  description: 'Generates a short caption for an image.',\n  exampleInput: {\n    [Modality.Audio]: 'https://download.samplelib.com/mp3/sample-9s.mp3',\n    [Modality.Video]: 'https://www.shutterstock.com/shutterstock/videos/1057665724/preview/stock-footage-a-seconds-countdown-introduction-with-beautiful-slick-graphics.mp4'\n  },\n  exampleOutput: 'A living room filled with furniture and a clock on the wall',\n  properties: {\n    maxRuntime: '1s'\n  }\n};","map":{"version":3,"names":["Modality","Endpoint","UploadEndpoint","EndpointToBlockType","Text2Text","Text2Img","Text2Video","Text23D","Text2Audio","Text2Music","Image2Text","Image2SuperImage","Image2GoodFaceImage","ImageGray2ImageColor","Image2Cutout","Image2Box","Image2Video","Music2Text","Speech2Text","ModalityToInputType","Text","Image","Audio","Video","ThreeDimentional","Custom","Sketch","ModalityToDataReadType","DummyBlockMeta","description","exampleInput","exampleOutput","properties","maxRuntime"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/src/constants/common.ts"],"sourcesContent":["// This is needed for AutChain. Because the backend uses the endpoint name as the block type.\n// TODO: Maybe we can ask the backend to change this.\n\nimport { ReadType } from 'use-file-picker'\nimport { BlockMeta, Modality } from '../types'\n\nexport enum Endpoint {\n  Text2Text = 'text2text',\n  Text2Img = 'text2img',\n  Text2Speech = 'text2speech',\n  Text2Video = 'text2video',\n  Text23D = 'text23d',\n  Text2Audio = 'text2audio',\n  Text2Music = 'text2music',\n  TextAndPose2Image = 'textandpose2img',\n  TextAndSeg2Image = 'textandseg2img',\n  TextAndDepth2Image = 'textanddepth2img',\n  TextAndNormal2Image = 'textandnormal2img',\n  TextAndEdge2Image = 'textandedge2img',\n  TextAndSketch2Image = 'textandsketch2img',\n  TextAndSketch2Art = 'textandsketch2art',\n  Image2Character = 'img2character',\n  Image2Tags = 'img2tags',\n  Image2Text = 'img2text',\n  Image2SuperImage = 'img2superimg',\n  Image2NoPeopleImage = 'img2nopeopleimg',\n  Image2Pose = 'img2pose',\n  Image2Depth = 'img2depth',\n  Image2Normal = 'img2normal',\n  Image2Edge = 'img2edge',\n  Image2Seg = 'img2seg',\n  Image23d = 'img23d',\n  Image2GoodFaceImage = 'img2goodfaceimg',\n  ImageGray2ImageColor = 'imggray2imgcolor',\n  ImageColor2ImageGray = 'imgcolor2imggray',\n  Image2Cutout = 'img2cutout',\n  Image2Box = 'img2box',\n  Image2Video = 'img2video',\n  ImageAndText2Image = 'imgandtext2img',\n  Music2Text = 'music2text',\n  Speech2Text = 'speech2text',\n  Video2Text = 'video2text',\n  Video2SuperVideo = 'video2supervideo',\n  Video2SmoothVideo = 'video2smoothvideo',\n  Video2Cutout = 'video2cutout',\n  SpeechSpeech2Speech = 'speech_speech2speech',\n  Face2TalkingHead = 'face2talkinghead',\n}\n\n// Separate enum for upload endpoints because they are not part of the autochain response\n// We would have to do extra checks in the places using Endpoint to check if it's an upload endpoint\nexport enum UploadEndpoint {\n  UploadImage = 'upload_image',\n  UploadVideo = 'upload_video',\n  UploadAudio = 'upload_audio',\n  Upload3D = 'upload_3d',\n}\n\nexport const EndpointToBlockType: Record<string, string> = {\n  [Endpoint.Text2Text]: 'Text to text',\n  [Endpoint.Text2Img]: 'Text to image',\n  [Endpoint.Text2Video]: 'Text to video',\n  [Endpoint.Text23D]: 'Text to 3D',\n  [Endpoint.Text2Audio]: 'Text to audio',\n  [Endpoint.Text2Music]: 'Text to music',\n  [Endpoint.Image2Text]: 'Image to text',\n  [Endpoint.Image2SuperImage]: 'Image to super image',\n  [Endpoint.Image2GoodFaceImage]: 'Image to good face',\n  [Endpoint.ImageGray2ImageColor]: 'Image Gray to Image Color',\n  [Endpoint.Image2Cutout]: 'Image to cutout',\n  [Endpoint.Image2Box]: 'Image to box',\n  [Endpoint.Image2Video]: 'Image to video',\n  [Endpoint.Music2Text]: 'Music to text',\n  [Endpoint.Speech2Text]: 'Speech to text',\n}\n\nexport const ModalityToInputType = {\n  [Modality.Text]: ['Text'],\n  [Modality.Image]: ['.jpg', '.png'],\n  [Modality.Audio]: ['.wav', '.mp3'],\n  [Modality.Video]: ['.mp4'],\n  [Modality.ThreeDimentional]: ['.obj'],\n  // TODO: find out what is the correct type for the following\n  [Modality.Custom]: ['custom/*'],\n  [Modality.Sketch]: ['sketch/*'],\n}\n\nexport const ModalityToDataReadType: Record<Modality, ReadType> = {\n  [Modality.Text]: 'Text',\n  [Modality.Image]: 'DataURL',\n  [Modality.Audio]: 'DataURL',\n  [Modality.Video]: 'DataURL',\n  [Modality.ThreeDimentional]: 'DataURL',\n  [Modality.Custom]: 'DataURL',\n  [Modality.Sketch]: 'DataURL',\n}\n\nexport const DummyBlockMeta: BlockMeta = {\n  description: 'Generates a short caption for an image.',\n  exampleInput: {\n    [Modality.Audio]: 'https://download.samplelib.com/mp3/sample-9s.mp3',\n    [Modality.Video]:\n      'https://www.shutterstock.com/shutterstock/videos/1057665724/preview/stock-footage-a-seconds-countdown-introduction-with-beautiful-slick-graphics.mp4',\n  },\n  exampleOutput: 'A living room filled with furniture and a clock on the wall',\n  properties: {\n    maxRuntime: '1s',\n  },\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}