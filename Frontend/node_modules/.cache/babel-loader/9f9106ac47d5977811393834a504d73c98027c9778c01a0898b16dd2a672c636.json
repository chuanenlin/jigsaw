{"ast":null,"code":"import mapValues from 'lodash/mapValues';\nimport React from 'react';\nimport { context as contextReference } from './context';\nimport { useField } from './useField';\nfunction getNextContext(context, props, options) {\n  // Leaf components by definition do not affect the context. `AutoField` will\n  // skip most of them anyway, but if rendered directly we have to do it here.\n  // An example in the core theme are the `List*Field`s.\n  if ((options === null || options === void 0 ? void 0 : options.kind) === 'leaf') {\n    return context;\n  }\n  const changesName = props.name !== '';\n  const changesState = Object.keys(context.state).some(key => {\n    const next = props[key];\n    return next !== null && next !== undefined;\n  });\n  // There are no other ways of affecting the context.\n  if (!changesName && !changesState) {\n    return context;\n  }\n  const nextContext = Object.assign({}, context);\n  if (changesName) {\n    nextContext.name = nextContext.name.concat(props.name);\n  }\n  if (changesState) {\n    nextContext.state = mapValues(nextContext.state, (prev, key) => {\n      const next = props[key];\n      return next !== null && next !== undefined ? !!next : prev;\n    });\n  }\n  return nextContext;\n}\nexport function connectField(Component, options) {\n  function Field(props) {\n    const [fieldProps, context] = useField(props.name, props, options);\n    const nextContext = getNextContext(context, props, options);\n    const body = React.createElement(Component, Object.assign({}, props, fieldProps));\n    // If the context has not changed, then don't render the `Provider`. It's\n    // possible that it will change at some point, but it's extremely rare, as\n    // either `name` or one of the \"state props\" has to change.\n    if (context === nextContext) {\n      return body;\n    }\n    return React.createElement(contextReference.Provider, {\n      children: body,\n      value: nextContext\n    });\n  }\n  Field.displayName = `${Component.displayName || Component.name}Field`;\n  return Object.assign(Field, {\n    Component,\n    options\n  });\n}","map":{"version":3,"names":["mapValues","React","context","contextReference","useField","getNextContext","props","options","kind","changesName","name","changesState","Object","keys","state","some","key","next","undefined","nextContext","assign","concat","prev","connectField","Component","Field","fieldProps","body","createElement","Provider","children","value","displayName"],"sources":["/Users/chuanenl/MyDrive/CMU/Projects/Jigsaw/Code/Frontend/node_modules/uniforms/esm/connectField.js"],"sourcesContent":["import mapValues from 'lodash/mapValues';\nimport React from 'react';\nimport { context as contextReference } from './context';\nimport { useField } from './useField';\nfunction getNextContext(context, props, options) {\n    // Leaf components by definition do not affect the context. `AutoField` will\n    // skip most of them anyway, but if rendered directly we have to do it here.\n    // An example in the core theme are the `List*Field`s.\n    if ((options === null || options === void 0 ? void 0 : options.kind) === 'leaf') {\n        return context;\n    }\n    const changesName = props.name !== '';\n    const changesState = Object.keys(context.state).some(key => {\n        const next = props[key];\n        return next !== null && next !== undefined;\n    });\n    // There are no other ways of affecting the context.\n    if (!changesName && !changesState) {\n        return context;\n    }\n    const nextContext = Object.assign({}, context);\n    if (changesName) {\n        nextContext.name = nextContext.name.concat(props.name);\n    }\n    if (changesState) {\n        nextContext.state = mapValues(nextContext.state, (prev, key) => {\n            const next = props[key];\n            return next !== null && next !== undefined ? !!next : prev;\n        });\n    }\n    return nextContext;\n}\nexport function connectField(Component, options) {\n    function Field(props) {\n        const [fieldProps, context] = useField(props.name, props, options);\n        const nextContext = getNextContext(context, props, options);\n        const body = React.createElement(Component, Object.assign({}, props, fieldProps));\n        // If the context has not changed, then don't render the `Provider`. It's\n        // possible that it will change at some point, but it's extremely rare, as\n        // either `name` or one of the \"state props\" has to change.\n        if (context === nextContext) {\n            return body;\n        }\n        return React.createElement(contextReference.Provider, { children: body, value: nextContext });\n    }\n    Field.displayName = `${Component.displayName || Component.name}Field`;\n    return Object.assign(Field, { Component, options });\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,kBAAkB;AACxC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,IAAIC,gBAAgB,QAAQ,WAAW;AACvD,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,cAAcA,CAACH,OAAO,EAAEI,KAAK,EAAEC,OAAO,EAAE;EAC7C;EACA;EACA;EACA,IAAI,CAACA,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACC,IAAI,MAAM,MAAM,EAAE;IAC7E,OAAON,OAAO;EAClB;EACA,MAAMO,WAAW,GAAGH,KAAK,CAACI,IAAI,KAAK,EAAE;EACrC,MAAMC,YAAY,GAAGC,MAAM,CAACC,IAAI,CAACX,OAAO,CAACY,KAAK,CAAC,CAACC,IAAI,CAACC,GAAG,IAAI;IACxD,MAAMC,IAAI,GAAGX,KAAK,CAACU,GAAG,CAAC;IACvB,OAAOC,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAKC,SAAS;EAC9C,CAAC,CAAC;EACF;EACA,IAAI,CAACT,WAAW,IAAI,CAACE,YAAY,EAAE;IAC/B,OAAOT,OAAO;EAClB;EACA,MAAMiB,WAAW,GAAGP,MAAM,CAACQ,MAAM,CAAC,CAAC,CAAC,EAAElB,OAAO,CAAC;EAC9C,IAAIO,WAAW,EAAE;IACbU,WAAW,CAACT,IAAI,GAAGS,WAAW,CAACT,IAAI,CAACW,MAAM,CAACf,KAAK,CAACI,IAAI,CAAC;EAC1D;EACA,IAAIC,YAAY,EAAE;IACdQ,WAAW,CAACL,KAAK,GAAGd,SAAS,CAACmB,WAAW,CAACL,KAAK,EAAE,CAACQ,IAAI,EAAEN,GAAG,KAAK;MAC5D,MAAMC,IAAI,GAAGX,KAAK,CAACU,GAAG,CAAC;MACvB,OAAOC,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAKC,SAAS,GAAG,CAAC,CAACD,IAAI,GAAGK,IAAI;IAC9D,CAAC,CAAC;EACN;EACA,OAAOH,WAAW;AACtB;AACA,OAAO,SAASI,YAAYA,CAACC,SAAS,EAAEjB,OAAO,EAAE;EAC7C,SAASkB,KAAKA,CAACnB,KAAK,EAAE;IAClB,MAAM,CAACoB,UAAU,EAAExB,OAAO,CAAC,GAAGE,QAAQ,CAACE,KAAK,CAACI,IAAI,EAAEJ,KAAK,EAAEC,OAAO,CAAC;IAClE,MAAMY,WAAW,GAAGd,cAAc,CAACH,OAAO,EAAEI,KAAK,EAAEC,OAAO,CAAC;IAC3D,MAAMoB,IAAI,GAAG1B,KAAK,CAAC2B,aAAa,CAACJ,SAAS,EAAEZ,MAAM,CAACQ,MAAM,CAAC,CAAC,CAAC,EAAEd,KAAK,EAAEoB,UAAU,CAAC,CAAC;IACjF;IACA;IACA;IACA,IAAIxB,OAAO,KAAKiB,WAAW,EAAE;MACzB,OAAOQ,IAAI;IACf;IACA,OAAO1B,KAAK,CAAC2B,aAAa,CAACzB,gBAAgB,CAAC0B,QAAQ,EAAE;MAAEC,QAAQ,EAAEH,IAAI;MAAEI,KAAK,EAAEZ;IAAY,CAAC,CAAC;EACjG;EACAM,KAAK,CAACO,WAAW,GAAI,GAAER,SAAS,CAACQ,WAAW,IAAIR,SAAS,CAACd,IAAK,OAAM;EACrE,OAAOE,MAAM,CAACQ,MAAM,CAACK,KAAK,EAAE;IAAED,SAAS;IAAEjB;EAAQ,CAAC,CAAC;AACvD"},"metadata":{},"sourceType":"module","externalDependencies":[]}