import { useState, useCallback } from 'react';
import { fromEvent } from 'file-selector';

function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return exports;
  };
  var exports = {},
    Op = Object.prototype,
    hasOwn = Op.hasOwnProperty,
    defineProperty = Object.defineProperty || function (obj, key, desc) {
      obj[key] = desc.value;
    },
    $Symbol = "function" == typeof Symbol ? Symbol : {},
    iteratorSymbol = $Symbol.iterator || "@@iterator",
    asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
    toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
      generator = Object.create(protoGenerator.prototype),
      context = new Context(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    }), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
    NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg,
          value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function (method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self, context) {
    var state = "suspendedStart";
    return function (method, arg) {
      if ("executing" === state) throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method) throw arg;
        return doneResult();
      }
      for (context.method = method, context.arg = arg;;) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }
        if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
          if ("suspendedStart" === state) throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method,
      method = delegate.iterator[methodName];
    if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1,
          next = function next() {
            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
            return next.value = undefined, next.done = !0, next;
          };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (val) {
    var object = Object(val),
      keys = [];
    for (var key in object) keys.push(key);
    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
          record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
            hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}

var BYTES_PER_MEGABYTE = 1000000;

var FileSizeValidator = /*#__PURE__*/function () {
  function FileSizeValidator() {}
  var _proto = FileSizeValidator.prototype;
  _proto.validateBeforeParsing = /*#__PURE__*/function () {
    var _validateBeforeParsing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(config, plainFiles) {
      var minFileSize, maxFileSize, errors;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            minFileSize = config.minFileSize, maxFileSize = config.maxFileSize;
            if (!(!minFileSize && !maxFileSize)) {
              _context.next = 3;
              break;
            }
            return _context.abrupt("return", Promise.resolve());
          case 3:
            errors = plainFiles.map(function (file) {
              return getFileSizeError({
                minFileSize: minFileSize,
                maxFileSize: maxFileSize,
                fileSize: file.size
              });
            }).filter(function (error) {
              return !!error;
            });
            return _context.abrupt("return", errors.length > 0 ? Promise.reject(errors[0]) : Promise.resolve());
          case 5:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    function validateBeforeParsing(_x, _x2) {
      return _validateBeforeParsing.apply(this, arguments);
    }
    return validateBeforeParsing;
  }();
  _proto.validateAfterParsing = /*#__PURE__*/function () {
    var _validateAfterParsing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_config, _file) {
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", Promise.resolve());
          case 1:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    function validateAfterParsing(_x3, _x4) {
      return _validateAfterParsing.apply(this, arguments);
    }
    return validateAfterParsing;
  }();
  return FileSizeValidator;
}();
var getFileSizeError = function getFileSizeError(_ref) {
  var fileSize = _ref.fileSize,
    maxFileSize = _ref.maxFileSize,
    minFileSize = _ref.minFileSize;
  if (minFileSize) {
    var minBytes = minFileSize * BYTES_PER_MEGABYTE;
    if (fileSize < minBytes) {
      return {
        fileSizeTooSmall: true
      };
    }
  }
  if (maxFileSize) {
    var maxBytes = maxFileSize * BYTES_PER_MEGABYTE;
    if (fileSize > maxBytes) {
      return {
        fileSizeToolarge: true
      };
    }
  }
};

var FilesLimitValidator = /*#__PURE__*/function () {
  function FilesLimitValidator() {}
  var _proto = FilesLimitValidator.prototype;
  _proto.validateBeforeParsing = function validateBeforeParsing(config, plainFiles) {
    var limitFilesConfig = config.limitFilesConfig;
    if (limitFilesConfig) {
      if (limitFilesConfig.max && plainFiles.length > limitFilesConfig.max) {
        return Promise.reject({
          maxLimitExceeded: true
        });
      }
      if (limitFilesConfig.min && plainFiles.length < limitFilesConfig.min) {
        return Promise.reject({
          minLimitNotReached: true
        });
      }
    }
    return Promise.resolve();
  };
  _proto.validateAfterParsing = function validateAfterParsing() {
    return Promise.resolve();
  };
  return FilesLimitValidator;
}();

function openFileDialog(accept, multiple, callback, initializeWithCustomAttributes) {
  // this function must be called from a user
  // activation event (ie an onclick event)
  // Create an input element
  var inputElement = document.createElement('input');
  // Hide element and append to body (required to run on iOS safari)
  inputElement.style.display = 'none';
  document.body.appendChild(inputElement);
  // Set its type to file
  inputElement.type = 'file';
  // Set accept to the file types you want the user to select.
  // Include both the file extension and the mime type
  // if accept is "*" then dont set the accept attribute
  if (accept !== '*') inputElement.accept = accept;
  // Accept multiple files
  inputElement.multiple = multiple;
  // set onchange event to call callback when user has selected file
  //inputElement.addEventListener('change', callback);
  inputElement.addEventListener('change', function (arg) {
    callback(arg);
    // remove element
    document.body.removeChild(inputElement);
  });
  if (initializeWithCustomAttributes) {
    initializeWithCustomAttributes(inputElement);
  }
  // dispatch a click event to open the file dialog
  inputElement.dispatchEvent(new MouseEvent('click'));
}

var ImageDimensionsValidator = /*#__PURE__*/function () {
  function ImageDimensionsValidator() {}
  var _proto = ImageDimensionsValidator.prototype;
  _proto.validateBeforeParsing = function validateBeforeParsing() {
    return Promise.resolve();
  };
  _proto.validateAfterParsing = function validateAfterParsing(config, file, reader) {
    var readAs = config.readAs,
      imageSizeRestrictions = config.imageSizeRestrictions;
    if (readAs === 'DataURL' && imageSizeRestrictions && isImage(file.type)) {
      return checkImageDimensions(reader.result, imageSizeRestrictions);
    }
    return Promise.resolve();
  };
  return ImageDimensionsValidator;
}();
var isImage = function isImage(fileType) {
  return fileType.startsWith('image');
};
var checkImageDimensions = function checkImageDimensions(imgDataURL, imageSizeRestrictions) {
  return new Promise(function (resolve, reject) {
    var img = new Image();
    img.onload = function () {
      var maxHeight = imageSizeRestrictions.maxHeight,
        maxWidth = imageSizeRestrictions.maxWidth,
        minHeight = imageSizeRestrictions.minHeight,
        minWidth = imageSizeRestrictions.minWidth;
      var width = this.width,
        height = this.height;
      var errors = {};
      if (maxHeight && maxHeight < height) errors = _extends({}, errors, {
        imageHeightTooBig: true
      });
      if (minHeight && minHeight > height) errors = _extends({}, errors, {
        imageHeightTooSmall: true
      });
      if (maxWidth && maxWidth < width) errors = _extends({}, errors, {
        imageWidthTooBig: true
      });
      if (minWidth && minWidth > width) errors = _extends({}, errors, {
        imageWidthTooSmall: true
      });
      Object.keys(errors).length ? reject(errors) : resolve();
    };
    img.onerror = function () {
      reject({
        imageNotLoaded: true
      });
    };
    img.src = imgDataURL;
  });
};

var _excluded = ["name"];
var VALIDATORS = [/*#__PURE__*/new FileSizeValidator(), /*#__PURE__*/new FilesLimitValidator(), /*#__PURE__*/new ImageDimensionsValidator()];
function useFilePicker(props) {
  var _props$accept = props.accept,
    accept = _props$accept === void 0 ? '*' : _props$accept,
    _props$multiple = props.multiple,
    multiple = _props$multiple === void 0 ? true : _props$multiple,
    _props$readAs = props.readAs,
    readAs = _props$readAs === void 0 ? 'Text' : _props$readAs,
    _props$readFilesConte = props.readFilesContent,
    readFilesContent = _props$readFilesConte === void 0 ? true : _props$readFilesConte,
    _props$validators = props.validators,
    validators = _props$validators === void 0 ? [] : _props$validators,
    onFilesSelected = props.onFilesSelected,
    onFilesSuccessfulySelected = props.onFilesSuccessfulySelected,
    onFilesRejected = props.onFilesRejected,
    initializeWithCustomParameters = props.initializeWithCustomParameters;
  var _useState = useState([]),
    plainFiles = _useState[0],
    setPlainFiles = _useState[1];
  var _useState2 = useState([]),
    filesContent = _useState2[0],
    setFilesContent = _useState2[1];
  var _useState3 = useState([]),
    fileErrors = _useState3[0],
    setFileErrors = _useState3[1];
  var _useState4 = useState(false),
    loading = _useState4[0],
    setLoading = _useState4[1];
  var clear = useCallback(function () {
    setPlainFiles([]);
    setFilesContent([]);
    setFileErrors([]);
  }, []);
  var parseFile = function parseFile(file) {
    return new Promise( /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, reject) {
        var reader, readStrategy, addError;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              reader = new FileReader(); //availible reader methods: readAsText, readAsBinaryString, readAsArrayBuffer, readAsDataURL
              readStrategy = reader["readAs" + readAs];
              readStrategy.call(reader, file);
              addError = function addError(_ref2) {
                var _ref2$name = _ref2.name,
                  name = _ref2$name === void 0 ? file.name : _ref2$name,
                  others = _objectWithoutPropertiesLoose(_ref2, _excluded);
                reject(_extends({
                  name: name,
                  fileSizeToolarge: false,
                  fileSizeTooSmall: false
                }, others));
              };
              reader.onload = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
                return _regeneratorRuntime().wrap(function _callee$(_context) {
                  while (1) switch (_context.prev = _context.next) {
                    case 0:
                      return _context.abrupt("return", Promise.all(VALIDATORS.concat(validators).map(function (validator) {
                        return validator.validateAfterParsing(props, file, reader)["catch"](function (err) {
                          return Promise.reject(addError(err));
                        });
                      })).then(function () {
                        return resolve(_extends({}, file, {
                          content: reader.result,
                          name: file.name,
                          lastModified: file.lastModified
                        }));
                      })["catch"](function () {}));
                    case 1:
                    case "end":
                      return _context.stop();
                  }
                }, _callee);
              }));
              reader.onerror = function () {
                addError({
                  readerError: reader.error,
                  plainFile: file
                });
              };
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }());
  };
  var openFileSelector = function openFileSelector() {
    var fileExtensions = accept instanceof Array ? accept.join(',') : accept;
    openFileDialog(fileExtensions, multiple, /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(evt) {
        var inputElement, plainFileObjects, validations, files, fileErrors, filesContent;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              clear();
              inputElement = evt.target;
              plainFileObjects = inputElement.files ? Array.from(inputElement.files) : [];
              setLoading(true);
              _context3.next = 6;
              return Promise.all(VALIDATORS.concat(validators).map(function (validator) {
                return validator.validateBeforeParsing(props, plainFileObjects)["catch"](function (err) {
                  return err;
                });
              }));
            case 6:
              validations = _context3.sent.filter(Boolean);
              setPlainFiles(plainFileObjects);
              setFileErrors(validations);
              if (!validations.length) {
                _context3.next = 14;
                break;
              }
              setLoading(false);
              onFilesRejected == null ? void 0 : onFilesRejected({
                errors: validations
              });
              onFilesSelected == null ? void 0 : onFilesSelected({
                errors: validations
              });
              return _context3.abrupt("return");
            case 14:
              if (readFilesContent) {
                _context3.next = 18;
                break;
              }
              setLoading(false);
              onFilesSelected == null ? void 0 : onFilesSelected({
                plainFiles: plainFileObjects,
                filesContent: []
              });
              return _context3.abrupt("return");
            case 18:
              _context3.next = 20;
              return fromEvent(evt);
            case 20:
              files = _context3.sent;
              fileErrors = [];
              _context3.next = 24;
              return Promise.all(files.map(function (file) {
                return parseFile(file)["catch"](function (fileError) {
                  fileError.plainFile = file;
                  fileErrors.push(fileError);
                });
              }));
            case 24:
              filesContent = _context3.sent;
              setLoading(false);
              if (!fileErrors.length) {
                _context3.next = 33;
                break;
              }
              setPlainFiles([]);
              setFilesContent([]);
              setFileErrors(function (errors) {
                return [].concat(errors, fileErrors);
              });
              onFilesRejected == null ? void 0 : onFilesRejected({
                errors: fileErrors
              });
              onFilesSelected == null ? void 0 : onFilesSelected({
                errors: validations.concat(fileErrors)
              });
              return _context3.abrupt("return");
            case 33:
              setFilesContent(filesContent);
              setPlainFiles(plainFileObjects);
              setFileErrors([]);
              onFilesSuccessfulySelected == null ? void 0 : onFilesSuccessfulySelected({
                filesContent: filesContent,
                plainFiles: plainFileObjects
              });
              onFilesSelected == null ? void 0 : onFilesSelected({
                plainFiles: plainFileObjects,
                filesContent: filesContent
              });
            case 38:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }(), initializeWithCustomParameters);
  };
  return [openFileSelector, {
    filesContent: filesContent,
    errors: fileErrors,
    loading: loading,
    plainFiles: plainFiles,
    clear: clear
  }];
}

/**
 * File limit validator has to be overriden to take into account the files that were previously selected
 * @param previousPlainFiles files that were previously selected
 * @returns a validator that checks if the amount of files selected previously and in the current batch is within the limits
 */
var persistentFileLimitValidator = function persistentFileLimitValidator(previousPlainFiles) {
  return {
    validateBeforeParsing: function validateBeforeParsing(config, plainFiles) {
      var limitFilesConfig = config.limitFilesConfig;
      var fileAmount = previousPlainFiles.length + plainFiles.length;
      if (limitFilesConfig) {
        if (limitFilesConfig.max && fileAmount > limitFilesConfig.max) {
          return Promise.reject({
            maxLimitExceeded: true
          });
        }
        if (limitFilesConfig.min && fileAmount < limitFilesConfig.min) {
          return Promise.reject({
            minLimitNotReached: true
          });
        }
      }
      return Promise.resolve();
    },
    validateAfterParsing: function validateAfterParsing() {
      return Promise.resolve();
    }
  };
};

/**
 * A version of useFilePicker hook that keeps selected files between selections. On top of that it allows to remove files from the selection.
 */
function useImperativeFilePicker(props) {
  var readFilesContent = props.readFilesContent,
    _onFilesSelected = props.onFilesSelected,
    _onFilesSuccessfulySelected = props.onFilesSuccessfulySelected;
  var _useState = useState([]),
    allPlainFiles = _useState[0],
    setAllPlainFiles = _useState[1];
  var _useState2 = useState([]),
    allFilesContent = _useState2[0],
    setAllFilesContent = _useState2[1];
  var _useFilePicker = useFilePicker(_extends({}, props, {
      validators: [persistentFileLimitValidator(allPlainFiles)].concat(props.validators || []),
      onFilesSelected: function onFilesSelected(data) {
        var _data$errors;
        if (!_onFilesSelected) return;
        if ((_data$errors = data.errors) != null && _data$errors.length) {
          return _onFilesSelected(data);
        }
        // override the files property to return all files that were selected previously and in the current batch
        _onFilesSelected({
          errors: undefined,
          plainFiles: [].concat(allPlainFiles, data.plainFiles || []),
          filesContent: [].concat(allFilesContent, data.filesContent || [])
        });
      },
      onFilesSuccessfulySelected: function onFilesSuccessfulySelected(data) {
        setAllPlainFiles(function (previousPlainFiles) {
          return previousPlainFiles.concat(data.plainFiles);
        });
        setAllFilesContent(function (previousFilesContent) {
          return previousFilesContent.concat(data.filesContent);
        });
        if (!_onFilesSuccessfulySelected) return;
        // override the files property to return all files that were selected previously and in the current batch
        _onFilesSuccessfulySelected({
          plainFiles: [].concat(allPlainFiles, data.plainFiles || []),
          filesContent: [].concat(allFilesContent, data.filesContent || [])
        });
      }
    })),
    open = _useFilePicker[0],
    _useFilePicker$ = _useFilePicker[1],
    loading = _useFilePicker$.loading,
    errors = _useFilePicker$.errors,
    clear = _useFilePicker$.clear;
  var clearPreviousFiles = useCallback(function () {
    setAllPlainFiles([]);
    if (readFilesContent) {
      setAllFilesContent([]);
    }
  }, [readFilesContent]);
  var clearAll = useCallback(function () {
    clear();
    clearPreviousFiles();
  }, [clear, clearPreviousFiles]);
  var removeFileByIndex = useCallback(function (index) {
    setAllPlainFiles(function (previousPlainFiles) {
      return [].concat(previousPlainFiles.slice(0, index), previousPlainFiles.slice(index + 1));
    });
    setAllFilesContent(function (previousFilesContent) {
      return [].concat(previousFilesContent.slice(0, index), previousFilesContent.slice(index + 1));
    });
  }, []);
  var removeFileByReference = useCallback(function (file) {
    var index = allPlainFiles.findIndex(function (f) {
      return f === file;
    });
    if (index === -1) return;
    removeFileByIndex(index);
  }, [removeFileByIndex, allPlainFiles]);
  return [open, {
    plainFiles: allPlainFiles,
    filesContent: allFilesContent,
    loading: loading,
    errors: errors,
    clear: clearAll,
    removeFileByIndex: removeFileByIndex,
    removeFileByReference: removeFileByReference
  }];
}

export { useFilePicker, useImperativeFilePicker };
//# sourceMappingURL=use-file-picker.esm.js.map
