{"version":3,"file":"use-file-picker.esm.js","sources":["../src/constants/bytesPerMegabyte.ts","../src/validators/fileSizeValidator/index.ts","../src/validators/filesLimitValidator/index.ts","../src/helpers/openFileDialog.ts","../src/validators/imageDimensionsValidator/index.ts","../src/useFilePicker.tsx","../src/validators/persistentFilesLimitValidator/index.ts","../src/useImperativeFilePicker.tsx"],"sourcesContent":["export const BYTES_PER_MEGABYTE = 1000000;\n","import { FileWithPath } from 'file-selector';\nimport { BYTES_PER_MEGABYTE } from '../../constants/bytesPerMegabyte';\nimport { UseFilePickerConfig } from '../../interfaces';\nimport { Validator } from '../validatorInterface';\n\nexport default class FileSizeValidator implements Validator {\n  async validateBeforeParsing(config: UseFilePickerConfig, plainFiles: File[]): Promise<void> {\n    const { minFileSize, maxFileSize } = config;\n\n    if (!minFileSize && !maxFileSize) {\n      return Promise.resolve();\n    }\n\n    const errors = plainFiles\n      .map(file => getFileSizeError({ minFileSize, maxFileSize, fileSize: file.size }))\n      .filter(error => !!error);\n\n    return errors.length > 0 ? Promise.reject(errors[0]) : Promise.resolve();\n  }\n  async validateAfterParsing(_config: UseFilePickerConfig, _file: FileWithPath): Promise<void> {\n    return Promise.resolve();\n  }\n}\n\nconst getFileSizeError = ({\n  fileSize,\n  maxFileSize,\n  minFileSize,\n}: {\n  minFileSize: number | undefined;\n  maxFileSize: number | undefined;\n  fileSize: number;\n}) => {\n  if (minFileSize) {\n    const minBytes = minFileSize * BYTES_PER_MEGABYTE;\n    if (fileSize < minBytes) {\n      return { fileSizeTooSmall: true };\n    }\n  }\n  if (maxFileSize) {\n    const maxBytes = maxFileSize * BYTES_PER_MEGABYTE;\n    if (fileSize > maxBytes) {\n      return { fileSizeToolarge: true };\n    }\n  }\n};\n","import { UseFilePickerConfig } from '../../interfaces';\nimport { Validator } from '../validatorInterface';\n\nexport default class FilesLimitValidator implements Validator {\n  validateBeforeParsing(config: UseFilePickerConfig, plainFiles: File[]): Promise<void> {\n    const { limitFilesConfig } = config;\n    if (limitFilesConfig) {\n      if (limitFilesConfig.max && plainFiles.length > limitFilesConfig.max) {\n        return Promise.reject({ maxLimitExceeded: true });\n      }\n\n      if (limitFilesConfig.min && plainFiles.length < limitFilesConfig.min) {\n        return Promise.reject({ minLimitNotReached: true });\n      }\n    }\n    return Promise.resolve();\n  }\n  validateAfterParsing(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n","export function openFileDialog(\n  accept: string,\n  multiple: boolean,\n  callback: (arg: Event) => void,\n  initializeWithCustomAttributes?: (arg: HTMLInputElement) => void\n): void {\n  // this function must be called from a user\n  // activation event (ie an onclick event)\n\n  // Create an input element\n  var inputElement = document.createElement('input');\n  // Hide element and append to body (required to run on iOS safari)\n  inputElement.style.display = 'none';\n  document.body.appendChild(inputElement);\n  // Set its type to file\n  inputElement.type = 'file';\n  // Set accept to the file types you want the user to select.\n  // Include both the file extension and the mime type\n  // if accept is \"*\" then dont set the accept attribute\n  if (accept !== '*') inputElement.accept = accept;\n  // Accept multiple files\n  inputElement.multiple = multiple;\n  // set onchange event to call callback when user has selected file\n  //inputElement.addEventListener('change', callback);\n  inputElement.addEventListener('change', arg => {\n    callback(arg);\n    // remove element\n    document.body.removeChild(inputElement);\n  });\n\n  if (initializeWithCustomAttributes) {\n    initializeWithCustomAttributes(inputElement);\n  }\n  // dispatch a click event to open the file dialog\n  inputElement.dispatchEvent(new MouseEvent('click'));\n}\n","import { FileWithPath } from 'file-selector';\nimport { ImageDimensionError, ImageDims, UseFilePickerConfig } from '../../interfaces';\nimport { Validator } from '../validatorInterface';\n\nexport default class ImageDimensionsValidator implements Validator {\n  validateBeforeParsing(): Promise<void> {\n    return Promise.resolve();\n  }\n  validateAfterParsing(config: UseFilePickerConfig, file: FileWithPath, reader: FileReader): Promise<void> {\n    const { readAs, imageSizeRestrictions } = config;\n    if (readAs === 'DataURL' && imageSizeRestrictions && isImage(file.type)) {\n      return checkImageDimensions(reader.result as string, imageSizeRestrictions);\n    }\n    return Promise.resolve();\n  }\n}\n\nconst isImage = (fileType: string) => fileType.startsWith('image');\n\nconst checkImageDimensions = (imgDataURL: string, imageSizeRestrictions: ImageDims) =>\n  new Promise<void>((resolve, reject) => {\n    const img = new Image();\n    img.onload = function () {\n      const { maxHeight, maxWidth, minHeight, minWidth } = imageSizeRestrictions;\n      const { width, height } = this as unknown as typeof img;\n      let errors: ImageDimensionError = {};\n      if (maxHeight && maxHeight < height) errors = { ...errors, imageHeightTooBig: true };\n      if (minHeight && minHeight > height) errors = { ...errors, imageHeightTooSmall: true };\n      if (maxWidth && maxWidth < width) errors = { ...errors, imageWidthTooBig: true };\n      if (minWidth && minWidth > width) errors = { ...errors, imageWidthTooSmall: true };\n      Object.keys(errors).length ? reject(errors) : resolve();\n    };\n    img.onerror = function () {\n      reject({ imageNotLoaded: true } as ImageDimensionError);\n    };\n    img.src = imgDataURL;\n  });\n","import { useState, useCallback } from 'react';\nimport { fromEvent, FileWithPath } from 'file-selector';\nimport { UseFilePickerConfig, FileContent, FilePickerReturnTypes, FileError, ReaderMethod } from './interfaces';\nimport FileSizeValidator from './validators/fileSizeValidator';\nimport FilesLimitValidator from './validators/filesLimitValidator';\nimport { Validator } from './validators/validatorInterface';\nimport { openFileDialog } from './helpers/openFileDialog';\nimport ImageDimensionsValidator from './validators/imageDimensionsValidator';\n\nconst VALIDATORS: Validator[] = [new FileSizeValidator(), new FilesLimitValidator(), new ImageDimensionsValidator()];\n\nfunction useFilePicker(props: UseFilePickerConfig): FilePickerReturnTypes {\n  const {\n    accept = '*',\n    multiple = true,\n    readAs = 'Text',\n    readFilesContent = true,\n    validators = [],\n    onFilesSelected,\n    onFilesSuccessfulySelected,\n    onFilesRejected,\n    initializeWithCustomParameters,\n  } = props;\n  const [plainFiles, setPlainFiles] = useState<File[]>([]);\n  const [filesContent, setFilesContent] = useState<FileContent[]>([]);\n  const [fileErrors, setFileErrors] = useState<FileError[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const clear: () => void = useCallback(() => {\n    setPlainFiles([]);\n    setFilesContent([]);\n    setFileErrors([]);\n  }, []);\n\n  const parseFile = (file: FileWithPath) =>\n    new Promise<FileContent>(\n      async (resolve: (fileContent: FileContent) => void, reject: (reason: FileError) => void) => {\n        const reader = new FileReader();\n\n        //availible reader methods: readAsText, readAsBinaryString, readAsArrayBuffer, readAsDataURL\n        const readStrategy = reader[`readAs${readAs}` as ReaderMethod] as typeof reader.readAsText;\n        readStrategy.call(reader, file);\n\n        const addError = ({ name = file.name, ...others }: FileError) => {\n          reject({ name, fileSizeToolarge: false, fileSizeTooSmall: false, ...others });\n        };\n\n        reader.onload = async () =>\n          Promise.all(\n            VALIDATORS.concat(validators).map(validator =>\n              validator.validateAfterParsing(props, file, reader).catch(err => Promise.reject(addError(err)))\n            )\n          )\n            .then(() =>\n              resolve({\n                ...file,\n                content: reader.result as string,\n                name: file.name,\n                lastModified: file.lastModified,\n              } as FileContent)\n            )\n            .catch(() => {});\n\n        reader.onerror = () => {\n          addError({ readerError: reader.error, plainFile: file });\n        };\n      }\n    );\n\n  const openFileSelector = () => {\n    const fileExtensions = accept instanceof Array ? accept.join(',') : accept;\n    openFileDialog(\n      fileExtensions,\n      multiple,\n      async evt => {\n        clear();\n        const inputElement = evt.target as HTMLInputElement;\n        const plainFileObjects = inputElement.files ? Array.from(inputElement.files) : [];\n\n        setLoading(true);\n\n        const validations = (\n          (await Promise.all(\n            VALIDATORS.concat(validators).map(validator =>\n              validator.validateBeforeParsing(props, plainFileObjects).catch((err: FileError) => err)\n            )\n          )) as FileError[]\n        ).filter(Boolean);\n\n        setPlainFiles(plainFileObjects);\n        setFileErrors(validations);\n        if (validations.length) {\n          setLoading(false);\n          onFilesRejected?.({ errors: validations });\n          onFilesSelected?.({ errors: validations });\n          return;\n        }\n\n        if (!readFilesContent) {\n          setLoading(false);\n          onFilesSelected?.({ plainFiles: plainFileObjects, filesContent: [] });\n          return;\n        }\n\n        const files = (await fromEvent(evt)) as FileWithPath[];\n\n        const fileErrors: FileError[] = [];\n        const filesContent = (await Promise.all(\n          files.map(file =>\n            parseFile(file).catch(fileError => {\n              fileError.plainFile = file;\n              fileErrors.push(fileError);\n            })\n          )\n        )) as FileContent[];\n        setLoading(false);\n\n        if (fileErrors.length) {\n          setPlainFiles([]);\n          setFilesContent([]);\n          setFileErrors(errors => [...errors, ...fileErrors]);\n          onFilesRejected?.({ errors: fileErrors });\n          onFilesSelected?.({\n            errors: validations.concat(fileErrors),\n          });\n          return;\n        }\n\n        setFilesContent(filesContent);\n        setPlainFiles(plainFileObjects);\n        setFileErrors([]);\n        onFilesSuccessfulySelected?.({ filesContent, plainFiles: plainFileObjects });\n        onFilesSelected?.({\n          plainFiles: plainFileObjects,\n          filesContent,\n        });\n      },\n      initializeWithCustomParameters\n    );\n  };\n\n  return [openFileSelector, { filesContent, errors: fileErrors, loading, plainFiles, clear }];\n}\n\nexport default useFilePicker;\n","import { UseFilePickerConfig } from '../../interfaces';\nimport { Validator } from '../validatorInterface';\n\n/**\n * File limit validator has to be overriden to take into account the files that were previously selected\n * @param previousPlainFiles files that were previously selected\n * @returns a validator that checks if the amount of files selected previously and in the current batch is within the limits\n */\nconst persistentFileLimitValidator: (previousPlainFiles: File[]) => Validator = previousPlainFiles => ({\n  validateBeforeParsing(config: UseFilePickerConfig, plainFiles: File[]): Promise<void> {\n    const { limitFilesConfig } = config;\n    const fileAmount = previousPlainFiles.length + plainFiles.length;\n    if (limitFilesConfig) {\n      if (limitFilesConfig.max && fileAmount > limitFilesConfig.max) {\n        return Promise.reject({ maxLimitExceeded: true });\n      }\n\n      if (limitFilesConfig.min && fileAmount < limitFilesConfig.min) {\n        return Promise.reject({ minLimitNotReached: true });\n      }\n    }\n    return Promise.resolve();\n  },\n  validateAfterParsing(): Promise<void> {\n    return Promise.resolve();\n  },\n});\n\nexport default persistentFileLimitValidator;\n","import { useCallback, useState } from 'react';\nimport { FileContent, ImperativeFilePickerReturnTypes, UseFilePickerConfig } from './interfaces';\nimport useFilePicker from './useFilePicker';\nimport persistentFileLimitValidator from './validators/persistentFilesLimitValidator';\n\n/**\n * A version of useFilePicker hook that keeps selected files between selections. On top of that it allows to remove files from the selection.\n */\nfunction useImperativeFilePicker(props: UseFilePickerConfig): ImperativeFilePickerReturnTypes {\n  const { readFilesContent, onFilesSelected, onFilesSuccessfulySelected } = props;\n\n  const [allPlainFiles, setAllPlainFiles] = useState<File[]>([]);\n  const [allFilesContent, setAllFilesContent] = useState<FileContent[]>([]);\n\n  const [open, { loading, errors, clear }] = useFilePicker({\n    ...props,\n    validators: [persistentFileLimitValidator(allPlainFiles), ...(props.validators || [])],\n    onFilesSelected: data => {\n      if (!onFilesSelected) return;\n      if (data.errors?.length) {\n        return onFilesSelected(data);\n      }\n      // override the files property to return all files that were selected previously and in the current batch\n      onFilesSelected({\n        errors: undefined,\n        plainFiles: [...allPlainFiles, ...(data.plainFiles || [])],\n        filesContent: [...allFilesContent, ...(data.filesContent || [])],\n      });\n    },\n    onFilesSuccessfulySelected: data => {\n      setAllPlainFiles(previousPlainFiles => previousPlainFiles.concat(data.plainFiles));\n      setAllFilesContent(previousFilesContent => previousFilesContent.concat(data.filesContent));\n\n      if (!onFilesSuccessfulySelected) return;\n      // override the files property to return all files that were selected previously and in the current batch\n      onFilesSuccessfulySelected({\n        plainFiles: [...allPlainFiles, ...(data.plainFiles || [])],\n        filesContent: [...allFilesContent, ...(data.filesContent || [])],\n      });\n    },\n  });\n\n  const clearPreviousFiles = useCallback(() => {\n    setAllPlainFiles([]);\n    if (readFilesContent) {\n      setAllFilesContent([]);\n    }\n  }, [readFilesContent]);\n\n  const clearAll = useCallback(() => {\n    clear();\n    clearPreviousFiles();\n  }, [clear, clearPreviousFiles]);\n\n  const removeFileByIndex = useCallback((index: number) => {\n    setAllPlainFiles(previousPlainFiles => [\n      ...previousPlainFiles.slice(0, index),\n      ...previousPlainFiles.slice(index + 1),\n    ]);\n    setAllFilesContent(previousFilesContent => [\n      ...previousFilesContent.slice(0, index),\n      ...previousFilesContent.slice(index + 1),\n    ]);\n  }, []);\n\n  const removeFileByReference = useCallback(\n    (file: File) => {\n      const index = allPlainFiles.findIndex(f => f === file);\n      if (index === -1) return;\n      removeFileByIndex(index);\n    },\n    [removeFileByIndex, allPlainFiles]\n  );\n\n  return [\n    open,\n    {\n      plainFiles: allPlainFiles,\n      filesContent: allFilesContent,\n      loading,\n      errors,\n      clear: clearAll,\n      removeFileByIndex,\n      removeFileByReference,\n    },\n  ];\n}\n\nexport default useImperativeFilePicker;\n"],"names":["BYTES_PER_MEGABYTE","FileSizeValidator","_proto","prototype","validateBeforeParsing","_validateBeforeParsing","_asyncToGenerator","_regeneratorRuntime","mark","_callee","config","plainFiles","minFileSize","maxFileSize","errors","wrap","_callee$","_context","prev","next","abrupt","Promise","resolve","map","file","getFileSizeError","fileSize","size","filter","error","length","reject","stop","_x","_x2","apply","arguments","validateAfterParsing","_validateAfterParsing","_callee2","_config","_file","_callee2$","_context2","_x3","_x4","_ref","minBytes","fileSizeTooSmall","maxBytes","fileSizeToolarge","FilesLimitValidator","limitFilesConfig","max","maxLimitExceeded","min","minLimitNotReached","openFileDialog","accept","multiple","callback","initializeWithCustomAttributes","inputElement","document","createElement","style","display","body","appendChild","type","addEventListener","arg","removeChild","dispatchEvent","MouseEvent","ImageDimensionsValidator","reader","readAs","imageSizeRestrictions","isImage","checkImageDimensions","result","fileType","startsWith","imgDataURL","img","Image","onload","maxHeight","maxWidth","minHeight","minWidth","width","height","_extends","imageHeightTooBig","imageHeightTooSmall","imageWidthTooBig","imageWidthTooSmall","Object","keys","onerror","imageNotLoaded","src","VALIDATORS","useFilePicker","props","_props$accept","_props$multiple","_props$readAs","_props$readFilesConte","readFilesContent","_props$validators","validators","onFilesSelected","onFilesSuccessfulySelected","onFilesRejected","initializeWithCustomParameters","_useState","useState","setPlainFiles","_useState2","filesContent","setFilesContent","_useState3","fileErrors","setFileErrors","_useState4","loading","setLoading","clear","useCallback","parseFile","readStrategy","addError","FileReader","call","_ref2","_ref2$name","name","others","_objectWithoutPropertiesLoose","_excluded","all","concat","validator","err","then","content","lastModified","readerError","plainFile","openFileSelector","fileExtensions","Array","join","_ref4","_callee3","evt","plainFileObjects","validations","files","_callee3$","_context3","target","from","sent","Boolean","fromEvent","fileError","push","persistentFileLimitValidator","previousPlainFiles","fileAmount","useImperativeFilePicker","allPlainFiles","setAllPlainFiles","allFilesContent","setAllFilesContent","_useFilePicker","data","_data$errors","undefined","previousFilesContent","open","_useFilePicker$","clearPreviousFiles","clearAll","removeFileByIndex","index","slice","removeFileByReference","findIndex","f"],"mappings":"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"}